   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_CrystalClock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	drs_val,1,1
  18              		.comm	dmx32_val,1,1
  19              		.section	.text.TFC_InitClock,"ax",%progbits
  20              		.align	2
  21              		.global	TFC_InitClock
  22              		.code	16
  23              		.thumb_func
  25              	TFC_InitClock:
  26              	.LFB0:
  27              		.file 1 "../Sources/TFC/TFC_CrystalClock.c"
   1:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_CrystalClock.c **** 
   3:../Sources/TFC/TFC_CrystalClock.c **** /* For some reason CW needs to have cw.h explicitly included here for
   4:../Sources/TFC/TFC_CrystalClock.c ****  * the code relocation of set_sys_dividers() to work correctly even
   5:../Sources/TFC/TFC_CrystalClock.c ****  * though common.h should pull in cw.h.
   6:../Sources/TFC/TFC_CrystalClock.c ****  */
   7:../Sources/TFC/TFC_CrystalClock.c **** #if (defined(CW))
   8:../Sources/TFC/TFC_CrystalClock.c **** 	#include "cw.h"
   9:../Sources/TFC/TFC_CrystalClock.c **** #endif
  10:../Sources/TFC/TFC_CrystalClock.c **** 
  11:../Sources/TFC/TFC_CrystalClock.c **** // Constants for use in pll_init
  12:../Sources/TFC/TFC_CrystalClock.c **** #define NO_OSCINIT 0
  13:../Sources/TFC/TFC_CrystalClock.c **** #define OSCINIT 1
  14:../Sources/TFC/TFC_CrystalClock.c **** 
  15:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_0 0
  16:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_1 1
  17:../Sources/TFC/TFC_CrystalClock.c **** 
  18:../Sources/TFC/TFC_CrystalClock.c **** #define LOW_POWER 0
  19:../Sources/TFC/TFC_CrystalClock.c **** #define HIGH_GAIN 1
  20:../Sources/TFC/TFC_CrystalClock.c **** 
  21:../Sources/TFC/TFC_CrystalClock.c **** #define CANNED_OSC  0
  22:../Sources/TFC/TFC_CrystalClock.c **** #define CRYSTAL 1
  23:../Sources/TFC/TFC_CrystalClock.c **** 
  24:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_0 0
  25:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_1 1
  26:../Sources/TFC/TFC_CrystalClock.c **** 
  27:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_ONLY 0
  28:../Sources/TFC/TFC_CrystalClock.c **** #define MCGOUT 1
  29:../Sources/TFC/TFC_CrystalClock.c **** 
  30:../Sources/TFC/TFC_CrystalClock.c **** // MCG Mode defines
  31:../Sources/TFC/TFC_CrystalClock.c **** 
  32:../Sources/TFC/TFC_CrystalClock.c **** #define BLPI 1
  33:../Sources/TFC/TFC_CrystalClock.c **** #define FBI  2
  34:../Sources/TFC/TFC_CrystalClock.c **** #define FEI  3
  35:../Sources/TFC/TFC_CrystalClock.c **** #define FEE  4
  36:../Sources/TFC/TFC_CrystalClock.c **** #define FBE  5
  37:../Sources/TFC/TFC_CrystalClock.c **** #define BLPE 6
  38:../Sources/TFC/TFC_CrystalClock.c **** #define PBE  7
  39:../Sources/TFC/TFC_CrystalClock.c **** #define PEE  8
  40:../Sources/TFC/TFC_CrystalClock.c **** 
  41:../Sources/TFC/TFC_CrystalClock.c **** // IRC defines
  42:../Sources/TFC/TFC_CrystalClock.c **** #define SLOW_IRC 0
  43:../Sources/TFC/TFC_CrystalClock.c **** #define FAST_IRC 1
  44:../Sources/TFC/TFC_CrystalClock.c **** 
  45:../Sources/TFC/TFC_CrystalClock.c **** 
  46:../Sources/TFC/TFC_CrystalClock.c **** unsigned char fll_rtc_init(unsigned char, unsigned char);
  47:../Sources/TFC/TFC_CrystalClock.c **** 
  48:../Sources/TFC/TFC_CrystalClock.c **** 
  49:../Sources/TFC/TFC_CrystalClock.c **** // prototypes
  50:../Sources/TFC/TFC_CrystalClock.c **** void rtc_as_refclk(void);
  51:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq);
  52:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  53:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq);
  54:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select);
  55:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq);
  56:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  57:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val);
  58:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val);
  59:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val);
  60:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select);
  61:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  62:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  63:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val);
  64:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val);
  65:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val);
  66:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  67:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val);
  68:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select);
  69:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select);
  70:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  71:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select);
  72:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val);
  73:../Sources/TFC/TFC_CrystalClock.c **** 
  74:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
  75:../Sources/TFC/TFC_CrystalClock.c **** 
  76:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref);
  77:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void);
  78:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq);
  79:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis);
  80:../Sources/TFC/TFC_CrystalClock.c **** 
  81:../Sources/TFC/TFC_CrystalClock.c **** 
  82:../Sources/TFC/TFC_CrystalClock.c **** 
  83:../Sources/TFC/TFC_CrystalClock.c **** 
  84:../Sources/TFC/TFC_CrystalClock.c **** // global variables
  85:../Sources/TFC/TFC_CrystalClock.c **** extern int core_clk_khz;
  86:../Sources/TFC/TFC_CrystalClock.c **** char drs_val, dmx32_val;
  87:../Sources/TFC/TFC_CrystalClock.c **** 
  88:../Sources/TFC/TFC_CrystalClock.c **** 
  89:../Sources/TFC/TFC_CrystalClock.c **** 
  90:../Sources/TFC/TFC_CrystalClock.c **** 
  91:../Sources/TFC/TFC_CrystalClock.c **** /*****************************************************************************
  92:../Sources/TFC/TFC_CrystalClock.c ****  * @name     pll_init
  93:../Sources/TFC/TFC_CrystalClock.c ****  *
  94:../Sources/TFC/TFC_CrystalClock.c ****  * @brief:   Initialization of the MCU.
  95:../Sources/TFC/TFC_CrystalClock.c ****  *
  96:../Sources/TFC/TFC_CrystalClock.c ****  * @param  : None
  97:../Sources/TFC/TFC_CrystalClock.c ****  *
  98:../Sources/TFC/TFC_CrystalClock.c ****  * @return : None
  99:../Sources/TFC/TFC_CrystalClock.c ****  *****************************************************************************
 100:../Sources/TFC/TFC_CrystalClock.c ****  * It will configure the MCU to disable STOP and COP Modules.
 101:../Sources/TFC/TFC_CrystalClock.c ****  * It also set the MCG configuration and bus clock frequency.
 102:../Sources/TFC/TFC_CrystalClock.c ****  ****************************************************************************/
 103:../Sources/TFC/TFC_CrystalClock.c **** void TFC_InitClock()
 104:../Sources/TFC/TFC_CrystalClock.c **** {
  28              		.loc 1 104 0
  29              		.cfi_startproc
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 02AF     		add	r7, sp, #8
  39              	.LCFI2:
  40              		.cfi_def_cfa 7, 8
 105:../Sources/TFC/TFC_CrystalClock.c **** 	pll_init(8000000, LOW_POWER, CRYSTAL, 4, 24, MCGOUT);
  41              		.loc 1 105 0
  42 0006 064B     		ldr	r3, .L2
  43 0008 1822     		mov	r2, #24
  44 000a 0092     		str	r2, [sp]
  45 000c 0122     		mov	r2, #1
  46 000e 0192     		str	r2, [sp, #4]
  47 0010 181C     		mov	r0, r3
  48 0012 0021     		mov	r1, #0
  49 0014 0122     		mov	r2, #1
  50 0016 0423     		mov	r3, #4
  51 0018 FFF7FEFF 		bl	pll_init
 106:../Sources/TFC/TFC_CrystalClock.c ****     	
 107:../Sources/TFC/TFC_CrystalClock.c ****     /************* USB Part **********************/
 108:../Sources/TFC/TFC_CrystalClock.c ****    	/*********************************************/   
 109:../Sources/TFC/TFC_CrystalClock.c ****    //	SIM_CLKDIV2 &= (uint32_t)(~(SIM_CLKDIV2_USBFRAC_MASK | SIM_CLKDIV2_USBDIV_MASK));
 110:../Sources/TFC/TFC_CrystalClock.c **** 
 111:../Sources/TFC/TFC_CrystalClock.c ****     /* Configure USBFRAC = 0, USBDIV = 0 => frq(USBout) = 1 / 1 * frq(PLLin) */
 112:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
 113:../Sources/TFC/TFC_CrystalClock.c ****    			    
 114:../Sources/TFC/TFC_CrystalClock.c ****    	/* Configure USB to be clocked from PLL */
 115:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SOPT2  |= (SIM_SOPT2_USBSRC_MASK | SIM_SOPT2_PLLFLLSEL_MASK);
 116:../Sources/TFC/TFC_CrystalClock.c **** 
 117:../Sources/TFC/TFC_CrystalClock.c ****    	/* Enable USB-OTG IP clocking */
 118:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SCGC4 |= (SIM_SCGC4_USBOTG_MASK); 
 119:../Sources/TFC/TFC_CrystalClock.c ****     			    
 120:../Sources/TFC/TFC_CrystalClock.c ****     			/* Configure enable USB regulator for device */
 121:../Sources/TFC/TFC_CrystalClock.c ****    //SIM_SOPT1 |= SIM_SOPT1_USBREGEN_MASK;
 122:../Sources/TFC/TFC_CrystalClock.c ****    			    
 123:../Sources/TFC/TFC_CrystalClock.c ****    //NVICICER2 |= (1<<9);	/* Clear any pending interrupts on USB */
 124:../Sources/TFC/TFC_CrystalClock.c **** //   NVICISER2 |= (1<<9);	/* Enable interrupts from USB module */	 
 125:../Sources/TFC/TFC_CrystalClock.c **** 
 126:../Sources/TFC/TFC_CrystalClock.c ****     	
 127:../Sources/TFC/TFC_CrystalClock.c ****     /* Now running PEE Mode */
 128:../Sources/TFC/TFC_CrystalClock.c **** 
 129:../Sources/TFC/TFC_CrystalClock.c **** 
 130:../Sources/TFC/TFC_CrystalClock.c **** }
  52              		.loc 1 130 0
  53 001c BD46     		mov	sp, r7
  54              		@ sp needed for prologue
  55 001e 80BD     		pop	{r7, pc}
  56              	.L3:
  57              		.align	2
  58              	.L2:
  59 0020 00127A00 		.word	8000000
  60              		.cfi_endproc
  61              	.LFE0:
  63              		.global	__aeabi_idiv
  64              		.section	.text.pll_init,"ax",%progbits
  65              		.align	2
  66              		.global	pll_init
  67              		.code	16
  68              		.thumb_func
  70              	pll_init:
  71              	.LFB1:
 131:../Sources/TFC/TFC_CrystalClock.c **** 
 132:../Sources/TFC/TFC_CrystalClock.c **** 
 133:../Sources/TFC/TFC_CrystalClock.c **** /*
 134:../Sources/TFC/TFC_CrystalClock.c ****  * File:    mcg.c
 135:../Sources/TFC/TFC_CrystalClock.c ****  *
 136:../Sources/TFC/TFC_CrystalClock.c ****  * MCG drivers for Freescale Kinetis L - series devices
 137:../Sources/TFC/TFC_CrystalClock.c ****  * Notes:
 138:../Sources/TFC/TFC_CrystalClock.c ****  * Assumes the MCG mode is in the default FEI mode out of reset
 139:../Sources/TFC/TFC_CrystalClock.c ****  */
 140:../Sources/TFC/TFC_CrystalClock.c **** 
 141:../Sources/TFC/TFC_CrystalClock.c **** #include "derivative.h"
 142:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC_CrystalClock.h"
 143:../Sources/TFC/TFC_CrystalClock.c **** 
 144:../Sources/TFC/TFC_CrystalClock.c **** 
 145:../Sources/TFC/TFC_CrystalClock.c **** 
 146:../Sources/TFC/TFC_CrystalClock.c **** 
 147:../Sources/TFC/TFC_CrystalClock.c **** /*********************************************************************************************/
 148:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : pll_init
 149:../Sources/TFC/TFC_CrystalClock.c ****  *
 150:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: Option to move from FEI to PEE mode or to just initialize the PLL
 151:../Sources/TFC/TFC_CrystalClock.c ****  *
 152:../Sources/TFC/TFC_CrystalClock.c ****  * This function initializess PLL0. Either OSC0 is selected for the
 153:../Sources/TFC/TFC_CrystalClock.c ****  * reference clock source. The oscillators can be configured to use a crystal or take in an
 154:../Sources/TFC/TFC_CrystalClock.c ****  * external square wave clock.
 155:../Sources/TFC/TFC_CrystalClock.c ****  * Using the function parameter names the PLL frequency is calculated as follows:
 156:../Sources/TFC/TFC_CrystalClock.c ****  * PLL freq = ((crystal_val / prdiv_val) * vdiv_val)
 157:../Sources/TFC/TFC_CrystalClock.c ****  * Refer to the readme file in the mcg driver directory for examples of pll_init configurations.
 158:../Sources/TFC/TFC_CrystalClock.c ****  * All parameters must be provided, for example crystal_val must be provided even if the
 159:../Sources/TFC/TFC_CrystalClock.c ****  * oscillator associated with that parameter is already initialized.
 160:../Sources/TFC/TFC_CrystalClock.c ****  * The various passed parameters are checked to ensure they are within the allowed range. If any
 161:../Sources/TFC/TFC_CrystalClock.c ****  * of these checks fail the driver will exit and return a fail/error code. An error code will
 162:../Sources/TFC/TFC_CrystalClock.c ****  * also be returned if any error occurs during the PLL initialization sequence. Refer to the
 163:../Sources/TFC/TFC_CrystalClock.c ****  * readme file in the mcg driver directory for a list of all these codes.
 164:../Sources/TFC/TFC_CrystalClock.c ****  *
 165:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz either from a crystal or square
 166:../Sources/TFC/TFC_CrystalClock.c ****  *                           wave clock source
 167:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 168:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an
 169:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 170:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 171:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 172:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 173:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 174:../Sources/TFC/TFC_CrystalClock.c ****  *             mcgout_select  - 0 if the PLL is just to be enabled, non-zero if the PLL is used
 175:../Sources/TFC/TFC_CrystalClock.c ****  *                              to provide the MCGOUT clock for the system.
 176:../Sources/TFC/TFC_CrystalClock.c ****  *
 177:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : PLL frequency (Hz) or error code
 178:../Sources/TFC/TFC_CrystalClock.c ****  */
 179:../Sources/TFC/TFC_CrystalClock.c **** 
 180:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
 181:../Sources/TFC/TFC_CrystalClock.c **** {
  72              		.loc 1 181 0
  73              		.cfi_startproc
  74 0000 80B5     		push	{r7, lr}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 86B0     		sub	sp, sp, #24
  80              	.LCFI4:
  81              		.cfi_def_cfa_offset 32
  82 0004 00AF     		add	r7, sp, #0
  83              	.LCFI5:
  84              		.cfi_def_cfa_register 7
  85 0006 7860     		str	r0, [r7, #4]
  86 0008 081C     		mov	r0, r1
  87 000a 111C     		mov	r1, r2
  88 000c 1A1C     		mov	r2, r3
  89 000e FB1C     		add	r3, r7, #3
  90 0010 1870     		strb	r0, [r3]
  91 0012 BB1C     		add	r3, r7, #2
  92 0014 1970     		strb	r1, [r3]
  93 0016 7B1C     		add	r3, r7, #1
  94 0018 1A70     		strb	r2, [r3]
 182:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 183:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 184:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 185:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 186:../Sources/TFC/TFC_CrystalClock.c ****   int ref_freq;
 187:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 188:../Sources/TFC/TFC_CrystalClock.c **** 
 189:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
 190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
  95              		.loc 1 190 0
  96 001a C24B     		ldr	r3, .L64
  97 001c 9B79     		ldrb	r3, [r3, #6]
  98 001e DBB2     		uxtb	r3, r3
  99 0020 1A1C     		mov	r2, r3
 100 0022 0C23     		mov	r3, #12
 101 0024 1340     		and	r3, r2
 102 0026 9B08     		lsr	r3, r3, #2
 103 0028 0DD1     		bne	.L5
 191:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 104              		.loc 1 191 0 discriminator 1
 105 002a BE4B     		ldr	r3, .L64
 106 002c 9B79     		ldrb	r3, [r3, #6]
 107 002e DBB2     		uxtb	r3, r3
 108 0030 1A1C     		mov	r2, r3
 109 0032 1023     		mov	r3, #16
 110 0034 1340     		and	r3, r2
 190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 111              		.loc 1 190 0 discriminator 1
 112 0036 06D0     		beq	.L5
 192:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 113              		.loc 1 192 0 discriminator 1
 114 0038 BA4B     		ldr	r3, .L64
 115 003a 9B79     		ldrb	r3, [r3, #6]
 116 003c DBB2     		uxtb	r3, r3
 117 003e 1A1C     		mov	r2, r3
 118 0040 2023     		mov	r3, #32
 119 0042 1340     		and	r3, r2
 190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 120              		.loc 1 190 0 discriminator 1
 121 0044 01D0     		beq	.L6
 122              	.L5:
 193:../Sources/TFC/TFC_CrystalClock.c ****   {
 194:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 123              		.loc 1 194 0
 124 0046 0123     		mov	r3, #1
 125 0048 73E2     		b	.L7
 126              	.L6:
 195:../Sources/TFC/TFC_CrystalClock.c ****   }
 196:../Sources/TFC/TFC_CrystalClock.c **** 
 197:../Sources/TFC/TFC_CrystalClock.c ****   // check external frequency is less than the maximum frequency
 198:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 127              		.loc 1 198 0
 128 004a 7A68     		ldr	r2, [r7, #4]
 129 004c B64B     		ldr	r3, .L64+4
 130 004e 9A42     		cmp	r2, r3
 131 0050 01DD     		ble	.L8
 132              		.loc 1 198 0 is_stmt 0 discriminator 1
 133 0052 2123     		mov	r3, #33
 134 0054 6DE2     		b	.L7
 135              	.L8:
 199:../Sources/TFC/TFC_CrystalClock.c **** 
 200:../Sources/TFC/TFC_CrystalClock.c ****   // check crystal frequency is within spec. if crystal osc is being used as PLL ref
 201:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 136              		.loc 1 201 0 is_stmt 1
 137 0056 BB1C     		add	r3, r7, #2
 138 0058 1B78     		ldrb	r3, [r3]
 139 005a 002B     		cmp	r3, #0
 140 005c 09D0     		beq	.L9
 202:../Sources/TFC/TFC_CrystalClock.c ****   {
 203:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 3000000) || (crystal_val > 32000000)) {return 0x22;} // return 1 if one of t
 141              		.loc 1 203 0
 142 005e 7A68     		ldr	r2, [r7, #4]
 143 0060 B24B     		ldr	r3, .L64+8
 144 0062 9A42     		cmp	r2, r3
 145 0064 03DD     		ble	.L10
 146              		.loc 1 203 0 is_stmt 0 discriminator 2
 147 0066 7A68     		ldr	r2, [r7, #4]
 148 0068 B14B     		ldr	r3, .L64+12
 149 006a 9A42     		cmp	r2, r3
 150 006c 01DD     		ble	.L9
 151              	.L10:
 152              		.loc 1 203 0 discriminator 1
 153 006e 2223     		mov	r3, #34
 154 0070 5FE2     		b	.L7
 155              	.L9:
 204:../Sources/TFC/TFC_CrystalClock.c ****   }
 205:../Sources/TFC/TFC_CrystalClock.c **** 
 206:../Sources/TFC/TFC_CrystalClock.c ****   // make sure HGO will never be greater than 1. Could return an error instead if desired.
 207:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 156              		.loc 1 207 0 is_stmt 1
 157 0072 FB1C     		add	r3, r7, #3
 158 0074 1B78     		ldrb	r3, [r3]
 159 0076 002B     		cmp	r3, #0
 160 0078 02D0     		beq	.L11
 208:../Sources/TFC/TFC_CrystalClock.c ****   {
 209:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 161              		.loc 1 209 0
 162 007a FB1C     		add	r3, r7, #3
 163 007c 0122     		mov	r2, #1
 164 007e 1A70     		strb	r2, [r3]
 165              	.L11:
 210:../Sources/TFC/TFC_CrystalClock.c ****   }
 211:../Sources/TFC/TFC_CrystalClock.c **** 
 212:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL divider settings are within spec.
 213:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 166              		.loc 1 213 0
 167 0080 7B1C     		add	r3, r7, #1
 168 0082 1B78     		ldrb	r3, [r3]
 169 0084 5BB2     		sxtb	r3, r3
 170 0086 002B     		cmp	r3, #0
 171 0088 04DD     		ble	.L12
 172              		.loc 1 213 0 is_stmt 0 discriminator 2
 173 008a 7B1C     		add	r3, r7, #1
 174 008c 1B78     		ldrb	r3, [r3]
 175 008e 5BB2     		sxtb	r3, r3
 176 0090 192B     		cmp	r3, #25
 177 0092 01DD     		ble	.L13
 178              	.L12:
 179              		.loc 1 213 0 discriminator 1
 180 0094 4123     		mov	r3, #65
 181 0096 4CE2     		b	.L7
 182              	.L13:
 214:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;}
 183              		.loc 1 214 0 is_stmt 1
 184 0098 3B1C     		mov	r3, r7
 185 009a 2033     		add	r3, r3, #32
 186 009c 1B78     		ldrb	r3, [r3]
 187 009e 5BB2     		sxtb	r3, r3
 188 00a0 172B     		cmp	r3, #23
 189 00a2 05DD     		ble	.L14
 190              		.loc 1 214 0 is_stmt 0 discriminator 2
 191 00a4 3B1C     		mov	r3, r7
 192 00a6 2033     		add	r3, r3, #32
 193 00a8 1B78     		ldrb	r3, [r3]
 194 00aa 5BB2     		sxtb	r3, r3
 195 00ac 322B     		cmp	r3, #50
 196 00ae 01DD     		ble	.L15
 197              	.L14:
 198              		.loc 1 214 0 discriminator 1
 199 00b0 4223     		mov	r3, #66
 200 00b2 3EE2     		b	.L7
 201              	.L15:
 215:../Sources/TFC/TFC_CrystalClock.c **** 
 216:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL reference clock frequency is within spec.
 217:../Sources/TFC/TFC_CrystalClock.c ****   ref_freq = crystal_val / prdiv_val;
 202              		.loc 1 217 0 is_stmt 1
 203 00b4 7B1C     		add	r3, r7, #1
 204 00b6 1B78     		ldrb	r3, [r3]
 205 00b8 5BB2     		sxtb	r3, r3
 206 00ba 7868     		ldr	r0, [r7, #4]
 207 00bc 191C     		mov	r1, r3
 208 00be FFF7FEFF 		bl	__aeabi_idiv
 209 00c2 031C     		mov	r3, r0
 210 00c4 3B61     		str	r3, [r7, #16]
 218:../Sources/TFC/TFC_CrystalClock.c ****   if ((ref_freq < 2000000) || (ref_freq > 4000000)) {return 0x43;}
 211              		.loc 1 218 0
 212 00c6 3A69     		ldr	r2, [r7, #16]
 213 00c8 9A4B     		ldr	r3, .L64+16
 214 00ca 9A42     		cmp	r2, r3
 215 00cc 03DD     		ble	.L16
 216              		.loc 1 218 0 is_stmt 0 discriminator 2
 217 00ce 3A69     		ldr	r2, [r7, #16]
 218 00d0 994B     		ldr	r3, .L64+20
 219 00d2 9A42     		cmp	r2, r3
 220 00d4 01DD     		ble	.L17
 221              	.L16:
 222              		.loc 1 218 0 discriminator 1
 223 00d6 4323     		mov	r3, #67
 224 00d8 2BE2     		b	.L7
 225              	.L17:
 219:../Sources/TFC/TFC_CrystalClock.c **** 
 220:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL output frequency is within spec.
 221:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 226              		.loc 1 221 0 is_stmt 1
 227 00da 7B1C     		add	r3, r7, #1
 228 00dc 1B78     		ldrb	r3, [r3]
 229 00de 5BB2     		sxtb	r3, r3
 230 00e0 7868     		ldr	r0, [r7, #4]
 231 00e2 191C     		mov	r1, r3
 232 00e4 FFF7FEFF 		bl	__aeabi_idiv
 233 00e8 031C     		mov	r3, r0
 234 00ea 3A1C     		mov	r2, r7
 235 00ec 2032     		add	r2, r2, #32
 236 00ee 1278     		ldrb	r2, [r2]
 237 00f0 52B2     		sxtb	r2, r2
 238 00f2 5343     		mul	r3, r2
 239 00f4 FB60     		str	r3, [r7, #12]
 222:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 240              		.loc 1 222 0
 241 00f6 FA68     		ldr	r2, [r7, #12]
 242 00f8 904B     		ldr	r3, .L64+24
 243 00fa 9A42     		cmp	r2, r3
 244 00fc 03DD     		ble	.L18
 245              		.loc 1 222 0 is_stmt 0 discriminator 2
 246 00fe FA68     		ldr	r2, [r7, #12]
 247 0100 8F4B     		ldr	r3, .L64+28
 248 0102 9A42     		cmp	r2, r3
 249 0104 01DD     		ble	.L19
 250              	.L18:
 251              		.loc 1 222 0 discriminator 1
 252 0106 4523     		mov	r3, #69
 253 0108 13E2     		b	.L7
 254              	.L19:
 223:../Sources/TFC/TFC_CrystalClock.c **** 
 224:../Sources/TFC/TFC_CrystalClock.c ****   // configure the MCG_C2 register
 225:../Sources/TFC/TFC_CrystalClock.c ****   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the
 226:../Sources/TFC/TFC_CrystalClock.c ****   // it still needs to be set correctly even if the oscillator is not being used
 227:../Sources/TFC/TFC_CrystalClock.c ****       
 228:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 255              		.loc 1 228 0 is_stmt 1
 256 010a 864A     		ldr	r2, .L64
 257 010c 3B1C     		mov	r3, r7
 258 010e 1633     		add	r3, r3, #22
 259 0110 5278     		ldrb	r2, [r2, #1]
 260 0112 1A70     		strb	r2, [r3]
 229:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 261              		.loc 1 229 0
 262 0114 3B1C     		mov	r3, r7
 263 0116 1633     		add	r3, r3, #22
 264 0118 3A1C     		mov	r2, r7
 265 011a 1632     		add	r2, r2, #22
 266 011c 1278     		ldrb	r2, [r2]
 267 011e 3C21     		mov	r1, #60
 268 0120 8A43     		bic	r2, r1
 269 0122 1A70     		strb	r2, [r3]
 230:../Sources/TFC/TFC_CrystalClock.c ****     
 231:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 8000000)
 270              		.loc 1 231 0
 271 0124 7A68     		ldr	r2, [r7, #4]
 272 0126 874B     		ldr	r3, .L64+32
 273 0128 9A42     		cmp	r2, r3
 274 012a 14DC     		bgt	.L20
 232:../Sources/TFC/TFC_CrystalClock.c ****   {
 233:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 275              		.loc 1 233 0
 276 012c FB1C     		add	r3, r7, #3
 277 012e 1B78     		ldrb	r3, [r3]
 278 0130 DB00     		lsl	r3, r3, #3
 279 0132 DAB2     		uxtb	r2, r3
 280 0134 BB1C     		add	r3, r7, #2
 281 0136 1B78     		ldrb	r3, [r3]
 282 0138 9B00     		lsl	r3, r3, #2
 283 013a DBB2     		uxtb	r3, r3
 284 013c 1343     		orr	r3, r2
 285 013e DAB2     		uxtb	r2, r3
 286 0140 3B1C     		mov	r3, r7
 287 0142 1633     		add	r3, r3, #22
 288 0144 1B78     		ldrb	r3, [r3]
 289 0146 1343     		orr	r3, r2
 290 0148 DAB2     		uxtb	r2, r3
 291 014a 3B1C     		mov	r3, r7
 292 014c 1633     		add	r3, r3, #22
 293 014e 1021     		mov	r1, #16
 294 0150 0A43     		orr	r2, r1
 295 0152 1A70     		strb	r2, [r3]
 296 0154 13E0     		b	.L21
 297              	.L20:
 234:../Sources/TFC/TFC_CrystalClock.c ****   }
 235:../Sources/TFC/TFC_CrystalClock.c ****   else
 236:../Sources/TFC/TFC_CrystalClock.c ****   {
 237:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 298              		.loc 1 237 0
 299 0156 FB1C     		add	r3, r7, #3
 300 0158 1B78     		ldrb	r3, [r3]
 301 015a DB00     		lsl	r3, r3, #3
 302 015c DAB2     		uxtb	r2, r3
 303 015e BB1C     		add	r3, r7, #2
 304 0160 1B78     		ldrb	r3, [r3]
 305 0162 9B00     		lsl	r3, r3, #2
 306 0164 DBB2     		uxtb	r3, r3
 307 0166 1343     		orr	r3, r2
 308 0168 DAB2     		uxtb	r2, r3
 309 016a 3B1C     		mov	r3, r7
 310 016c 1633     		add	r3, r3, #22
 311 016e 1B78     		ldrb	r3, [r3]
 312 0170 1343     		orr	r3, r2
 313 0172 DAB2     		uxtb	r2, r3
 314 0174 3B1C     		mov	r3, r7
 315 0176 1633     		add	r3, r3, #22
 316 0178 2021     		mov	r1, #32
 317 017a 0A43     		orr	r2, r1
 318 017c 1A70     		strb	r2, [r3]
 319              	.L21:
 238:../Sources/TFC/TFC_CrystalClock.c ****   }
 239:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 320              		.loc 1 239 0
 321 017e 694B     		ldr	r3, .L64
 322 0180 3A1C     		mov	r2, r7
 323 0182 1632     		add	r2, r2, #22
 324 0184 1278     		ldrb	r2, [r2]
 325 0186 5A70     		strb	r2, [r3, #1]
 240:../Sources/TFC/TFC_CrystalClock.c ****   
 241:../Sources/TFC/TFC_CrystalClock.c ****   // determine FRDIV based on reference clock frequency
 242:../Sources/TFC/TFC_CrystalClock.c ****   // since the external frequency has already been checked only the maximum frequency for each FRDI
 243:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 326              		.loc 1 243 0
 327 0188 7A68     		ldr	r2, [r7, #4]
 328 018a 6F4B     		ldr	r3, .L64+36
 329 018c 9A42     		cmp	r2, r3
 330 018e 04DC     		bgt	.L22
 331              		.loc 1 243 0 is_stmt 0 discriminator 1
 332 0190 3B1C     		mov	r3, r7
 333 0192 1733     		add	r3, r3, #23
 334 0194 0022     		mov	r2, #0
 335 0196 1A70     		strb	r2, [r3]
 336 0198 27E0     		b	.L23
 337              	.L22:
 244:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 338              		.loc 1 244 0 is_stmt 1
 339 019a 7A68     		ldr	r2, [r7, #4]
 340 019c 6B4B     		ldr	r3, .L64+40
 341 019e 9A42     		cmp	r2, r3
 342 01a0 04DC     		bgt	.L24
 343              		.loc 1 244 0 is_stmt 0 discriminator 1
 344 01a2 3B1C     		mov	r3, r7
 345 01a4 1733     		add	r3, r3, #23
 346 01a6 0122     		mov	r2, #1
 347 01a8 1A70     		strb	r2, [r3]
 348 01aa 1EE0     		b	.L23
 349              	.L24:
 245:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 350              		.loc 1 245 0 is_stmt 1
 351 01ac 7A68     		ldr	r2, [r7, #4]
 352 01ae 684B     		ldr	r3, .L64+44
 353 01b0 9A42     		cmp	r2, r3
 354 01b2 04DC     		bgt	.L25
 355              		.loc 1 245 0 is_stmt 0 discriminator 1
 356 01b4 3B1C     		mov	r3, r7
 357 01b6 1733     		add	r3, r3, #23
 358 01b8 0222     		mov	r2, #2
 359 01ba 1A70     		strb	r2, [r3]
 360 01bc 15E0     		b	.L23
 361              	.L25:
 246:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 362              		.loc 1 246 0 is_stmt 1
 363 01be 7A68     		ldr	r2, [r7, #4]
 364 01c0 644B     		ldr	r3, .L64+48
 365 01c2 9A42     		cmp	r2, r3
 366 01c4 04DC     		bgt	.L26
 367              		.loc 1 246 0 is_stmt 0 discriminator 1
 368 01c6 3B1C     		mov	r3, r7
 369 01c8 1733     		add	r3, r3, #23
 370 01ca 0322     		mov	r2, #3
 371 01cc 1A70     		strb	r2, [r3]
 372 01ce 0CE0     		b	.L23
 373              	.L26:
 247:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 374              		.loc 1 247 0 is_stmt 1
 375 01d0 7A68     		ldr	r2, [r7, #4]
 376 01d2 614B     		ldr	r3, .L64+52
 377 01d4 9A42     		cmp	r2, r3
 378 01d6 04DC     		bgt	.L27
 379              		.loc 1 247 0 is_stmt 0 discriminator 1
 380 01d8 3B1C     		mov	r3, r7
 381 01da 1733     		add	r3, r3, #23
 382 01dc 0422     		mov	r2, #4
 383 01de 1A70     		strb	r2, [r3]
 384 01e0 03E0     		b	.L23
 385              	.L27:
 248:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 386              		.loc 1 248 0 is_stmt 1
 387 01e2 3B1C     		mov	r3, r7
 388 01e4 1733     		add	r3, r3, #23
 389 01e6 0522     		mov	r2, #5
 390 01e8 1A70     		strb	r2, [r3]
 391              	.L23:
 249:../Sources/TFC/TFC_CrystalClock.c **** 
 250:../Sources/TFC/TFC_CrystalClock.c ****   // Select external oscillator and Reference Divider and clear IREFS to start ext osc
 251:../Sources/TFC/TFC_CrystalClock.c ****   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintai
 252:../Sources/TFC/TFC_CrystalClock.c ****   // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 253:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 392              		.loc 1 253 0
 393 01ea 4E4A     		ldr	r2, .L64
 394 01ec 3B1C     		mov	r3, r7
 395 01ee 1633     		add	r3, r3, #22
 396 01f0 1278     		ldrb	r2, [r2]
 397 01f2 1A70     		strb	r2, [r3]
 254:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 398              		.loc 1 254 0
 399 01f4 3B1C     		mov	r3, r7
 400 01f6 1633     		add	r3, r3, #22
 401 01f8 3A1C     		mov	r2, r7
 402 01fa 1632     		add	r2, r2, #22
 403 01fc 1178     		ldrb	r1, [r2]
 404 01fe 0322     		mov	r2, #3
 405 0200 0A40     		and	r2, r1
 406 0202 1A70     		strb	r2, [r3]
 255:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 407              		.loc 1 255 0
 408 0204 3B1C     		mov	r3, r7
 409 0206 1733     		add	r3, r3, #23
 410 0208 1B78     		ldrb	r3, [r3]
 411 020a DB00     		lsl	r3, r3, #3
 412 020c DAB2     		uxtb	r2, r3
 413 020e 3823     		mov	r3, #56
 414 0210 1340     		and	r3, r2
 415 0212 DAB2     		uxtb	r2, r3
 416 0214 3B1C     		mov	r3, r7
 417 0216 1633     		add	r3, r3, #22
 418 0218 1B78     		ldrb	r3, [r3]
 419 021a 1343     		orr	r3, r2
 420 021c DAB2     		uxtb	r2, r3
 421 021e 3B1C     		mov	r3, r7
 422 0220 1633     		add	r3, r3, #22
 423 0222 8021     		mov	r1, #128
 424 0224 4942     		neg	r1, r1
 425 0226 0A43     		orr	r2, r1
 426 0228 1A70     		strb	r2, [r3]
 256:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 427              		.loc 1 256 0
 428 022a 3E4B     		ldr	r3, .L64
 429 022c 3A1C     		mov	r2, r7
 430 022e 1632     		add	r2, r2, #22
 431 0230 1278     		ldrb	r2, [r2]
 432 0232 1A70     		strb	r2, [r3]
 257:../Sources/TFC/TFC_CrystalClock.c **** 
 258:../Sources/TFC/TFC_CrystalClock.c ****   // if the external oscillator is used need to wait for OSCINIT to set
 259:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 433              		.loc 1 259 0
 434 0234 BB1C     		add	r3, r7, #2
 435 0236 1B78     		ldrb	r3, [r3]
 436 0238 002B     		cmp	r3, #0
 437 023a 24D0     		beq	.L28
 260:../Sources/TFC/TFC_CrystalClock.c ****   {
 261:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 438              		.loc 1 261 0
 439 023c 3B1C     		mov	r3, r7
 440 023e 1433     		add	r3, r3, #20
 441 0240 0022     		mov	r2, #0
 442 0242 1A80     		strh	r2, [r3]
 443 0244 0DE0     		b	.L29
 444              	.L32:
 262:../Sources/TFC/TFC_CrystalClock.c ****     {
 263:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 445              		.loc 1 263 0
 446 0246 374B     		ldr	r3, .L64
 447 0248 9B79     		ldrb	r3, [r3, #6]
 448 024a DBB2     		uxtb	r3, r3
 449 024c 1A1C     		mov	r2, r3
 450 024e 0223     		mov	r3, #2
 451 0250 1340     		and	r3, r2
 452 0252 0ED1     		bne	.L58
 453              	.L30:
 261:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 454              		.loc 1 261 0
 455 0254 3B1C     		mov	r3, r7
 456 0256 1433     		add	r3, r3, #20
 457 0258 3A1C     		mov	r2, r7
 458 025a 1432     		add	r2, r2, #20
 459 025c 1288     		ldrh	r2, [r2]
 460 025e 0132     		add	r2, r2, #1
 461 0260 1A80     		strh	r2, [r3]
 462              	.L29:
 261:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 463              		.loc 1 261 0 is_stmt 0 discriminator 1
 464 0262 3B1C     		mov	r3, r7
 465 0264 1433     		add	r3, r3, #20
 466 0266 0021     		mov	r1, #0
 467 0268 5A5E     		ldrsh	r2, [r3, r1]
 468 026a 3C4B     		ldr	r3, .L64+56
 469 026c 9A42     		cmp	r2, r3
 470 026e EADD     		ble	.L32
 471 0270 00E0     		b	.L31
 472              	.L58:
 473              		.loc 1 263 0 is_stmt 1
 474 0272 C046     		mov	r8, r8
 475              	.L31:
 264:../Sources/TFC/TFC_CrystalClock.c ****     }
 265:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error
 476              		.loc 1 265 0
 477 0274 2B4B     		ldr	r3, .L64
 478 0276 9B79     		ldrb	r3, [r3, #6]
 479 0278 DBB2     		uxtb	r3, r3
 480 027a 1A1C     		mov	r2, r3
 481 027c 0223     		mov	r3, #2
 482 027e 1340     		and	r3, r2
 483 0280 01D1     		bne	.L28
 484              		.loc 1 265 0 is_stmt 0 discriminator 1
 485 0282 2323     		mov	r3, #35
 486 0284 55E1     		b	.L7
 487              	.L28:
 266:../Sources/TFC/TFC_CrystalClock.c ****   }
 267:../Sources/TFC/TFC_CrystalClock.c **** 
 268:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to clear
 269:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 488              		.loc 1 269 0 is_stmt 1
 489 0286 3B1C     		mov	r3, r7
 490 0288 1433     		add	r3, r3, #20
 491 028a 0022     		mov	r2, #0
 492 028c 1A80     		strh	r2, [r3]
 493 028e 0DE0     		b	.L33
 494              	.L36:
 270:../Sources/TFC/TFC_CrystalClock.c ****   {
 271:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 495              		.loc 1 271 0
 496 0290 244B     		ldr	r3, .L64
 497 0292 9B79     		ldrb	r3, [r3, #6]
 498 0294 DBB2     		uxtb	r3, r3
 499 0296 1A1C     		mov	r2, r3
 500 0298 1023     		mov	r3, #16
 501 029a 1340     		and	r3, r2
 502 029c 0ED0     		beq	.L59
 503              	.L34:
 269:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 504              		.loc 1 269 0
 505 029e 3B1C     		mov	r3, r7
 506 02a0 1433     		add	r3, r3, #20
 507 02a2 3A1C     		mov	r2, r7
 508 02a4 1432     		add	r2, r2, #20
 509 02a6 1288     		ldrh	r2, [r2]
 510 02a8 0132     		add	r2, r2, #1
 511 02aa 1A80     		strh	r2, [r3]
 512              	.L33:
 269:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 513              		.loc 1 269 0 is_stmt 0 discriminator 1
 514 02ac 3B1C     		mov	r3, r7
 515 02ae 1433     		add	r3, r3, #20
 516 02b0 0021     		mov	r1, #0
 517 02b2 5A5E     		ldrsh	r2, [r3, r1]
 518 02b4 2A4B     		ldr	r3, .L64+60
 519 02b6 9A42     		cmp	r2, r3
 520 02b8 EADD     		ble	.L36
 521 02ba 00E0     		b	.L35
 522              	.L59:
 523              		.loc 1 271 0 is_stmt 1
 524 02bc C046     		mov	r8, r8
 525              	.L35:
 272:../Sources/TFC/TFC_CrystalClock.c ****   }
 273:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 526              		.loc 1 273 0
 527 02be 194B     		ldr	r3, .L64
 528 02c0 9B79     		ldrb	r3, [r3, #6]
 529 02c2 DBB2     		uxtb	r3, r3
 530 02c4 1A1C     		mov	r2, r3
 531 02c6 1023     		mov	r3, #16
 532 02c8 1340     		and	r3, r2
 533 02ca 01D0     		beq	.L37
 534              		.loc 1 273 0 is_stmt 0 discriminator 1
 535 02cc 1123     		mov	r3, #17
 536 02ce 30E1     		b	.L7
 537              	.L37:
 274:../Sources/TFC/TFC_CrystalClock.c **** 
 275:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to show clock source is ext ref clk
 276:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 538              		.loc 1 276 0 is_stmt 1
 539 02d0 3B1C     		mov	r3, r7
 540 02d2 1433     		add	r3, r3, #20
 541 02d4 0022     		mov	r2, #0
 542 02d6 1A80     		strh	r2, [r3]
 543 02d8 0FE0     		b	.L38
 544              	.L41:
 277:../Sources/TFC/TFC_CrystalClock.c ****   {
 278:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 545              		.loc 1 278 0
 546 02da 124B     		ldr	r3, .L64
 547 02dc 9B79     		ldrb	r3, [r3, #6]
 548 02de DBB2     		uxtb	r3, r3
 549 02e0 1A1C     		mov	r2, r3
 550 02e2 0C23     		mov	r3, #12
 551 02e4 1340     		and	r3, r2
 552 02e6 9B08     		lsr	r3, r3, #2
 553 02e8 022B     		cmp	r3, #2
 554 02ea 0ED0     		beq	.L60
 555              	.L39:
 276:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 556              		.loc 1 276 0
 557 02ec 3B1C     		mov	r3, r7
 558 02ee 1433     		add	r3, r3, #20
 559 02f0 3A1C     		mov	r2, r7
 560 02f2 1432     		add	r2, r2, #20
 561 02f4 1288     		ldrh	r2, [r2]
 562 02f6 0132     		add	r2, r2, #1
 563 02f8 1A80     		strh	r2, [r3]
 564              	.L38:
 276:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 565              		.loc 1 276 0 is_stmt 0 discriminator 1
 566 02fa 3B1C     		mov	r3, r7
 567 02fc 1433     		add	r3, r3, #20
 568 02fe 0021     		mov	r1, #0
 569 0300 5A5E     		ldrsh	r2, [r3, r1]
 570 0302 174B     		ldr	r3, .L64+60
 571 0304 9A42     		cmp	r2, r3
 572 0306 E8DD     		ble	.L41
 573 0308 00E0     		b	.L40
 574              	.L60:
 575              		.loc 1 278 0 is_stmt 1
 576 030a C046     		mov	r8, r8
 577              	.L40:
 279:../Sources/TFC/TFC_CrystalClock.c ****   }
 280:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 578              		.loc 1 280 0
 579 030c 054B     		ldr	r3, .L64
 580 030e 9B79     		ldrb	r3, [r3, #6]
 581 0310 DBB2     		uxtb	r3, r3
 582 0312 1A1C     		mov	r2, r3
 583 0314 0C23     		mov	r3, #12
 584 0316 1340     		and	r3, r2
 585 0318 9B08     		lsr	r3, r3, #2
 586 031a 022B     		cmp	r3, #2
 587 031c 22D0     		beq	.L42
 588              		.loc 1 280 0 is_stmt 0 discriminator 1
 589 031e 1A23     		mov	r3, #26
 590 0320 07E1     		b	.L7
 591              	.L65:
 592 0322 C046     		.align	2
 593              	.L64:
 594 0324 00400640 		.word	1074151424
 595 0328 80F0FA02 		.word	50000000
 596 032c BFC62D00 		.word	2999999
 597 0330 0048E801 		.word	32000000
 598 0334 7F841E00 		.word	1999999
 599 0338 00093D00 		.word	4000000
 600 033c FF6BDC02 		.word	47999999
 601 0340 00E1F505 		.word	100000000
 602 0344 00127A00 		.word	8000000
 603 0348 D0121300 		.word	1250000
 604 034c A0252600 		.word	2500000
 605 0350 404B4C00 		.word	5000000
 606 0354 80969800 		.word	10000000
 607 0358 002D3101 		.word	20000000
 608 035c 1F4E0000 		.word	19999
 609 0360 CF070000 		.word	1999
 610              	.L42:
 281:../Sources/TFC/TFC_CrystalClock.c **** 
 282:../Sources/TFC/TFC_CrystalClock.c ****   // Now in FBE
 283:../Sources/TFC/TFC_CrystalClock.c ****   // It is recommended that the clock monitor is enabled when using an external clock as the clock 
 284:../Sources/TFC/TFC_CrystalClock.c ****   // It is enabled here but can be removed if this is not required.
 285:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 611              		.loc 1 285 0 is_stmt 1
 612 0364 754B     		ldr	r3, .L66
 613 0366 754A     		ldr	r2, .L66
 614 0368 5279     		ldrb	r2, [r2, #5]
 615 036a D2B2     		uxtb	r2, r2
 616 036c 2021     		mov	r1, #32
 617 036e 0A43     		orr	r2, r1
 618 0370 D2B2     		uxtb	r2, r2
 619 0372 5A71     		strb	r2, [r3, #5]
 286:../Sources/TFC/TFC_CrystalClock.c ****   
 287:../Sources/TFC/TFC_CrystalClock.c ****   // Configure PLL
 288:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 289:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 290:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 620              		.loc 1 290 0
 621 0374 714A     		ldr	r2, .L66
 622 0376 3B1C     		mov	r3, r7
 623 0378 1633     		add	r3, r3, #22
 624 037a 1279     		ldrb	r2, [r2, #4]
 625 037c 1A70     		strb	r2, [r3]
 291:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 626              		.loc 1 291 0
 627 037e 3B1C     		mov	r3, r7
 628 0380 1633     		add	r3, r3, #22
 629 0382 3A1C     		mov	r2, r7
 630 0384 1632     		add	r2, r2, #22
 631 0386 1278     		ldrb	r2, [r2]
 632 0388 1F21     		mov	r1, #31
 633 038a 8A43     		bic	r2, r1
 634 038c 1A70     		strb	r2, [r3]
 292:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 635              		.loc 1 292 0
 636 038e 7B1C     		add	r3, r7, #1
 637 0390 1B78     		ldrb	r3, [r3]
 638 0392 013B     		sub	r3, r3, #1
 639 0394 DAB2     		uxtb	r2, r3
 640 0396 1F23     		mov	r3, #31
 641 0398 1340     		and	r3, r2
 642 039a D9B2     		uxtb	r1, r3
 643 039c 3B1C     		mov	r3, r7
 644 039e 1633     		add	r3, r3, #22
 645 03a0 3A1C     		mov	r2, r7
 646 03a2 1632     		add	r2, r2, #22
 647 03a4 1278     		ldrb	r2, [r2]
 648 03a6 0A43     		orr	r2, r1
 649 03a8 1A70     		strb	r2, [r3]
 293:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 650              		.loc 1 293 0
 651 03aa 644B     		ldr	r3, .L66
 652 03ac 3A1C     		mov	r2, r7
 653 03ae 1632     		add	r2, r2, #22
 654 03b0 1278     		ldrb	r2, [r2]
 655 03b2 1A71     		strb	r2, [r3, #4]
 294:../Sources/TFC/TFC_CrystalClock.c **** 
 295:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 296:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk
 297:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 298:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 656              		.loc 1 298 0
 657 03b4 614A     		ldr	r2, .L66
 658 03b6 3B1C     		mov	r3, r7
 659 03b8 1633     		add	r3, r3, #22
 660 03ba 5279     		ldrb	r2, [r2, #5]
 661 03bc 1A70     		strb	r2, [r3]
 299:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 662              		.loc 1 299 0
 663 03be 3B1C     		mov	r3, r7
 664 03c0 1633     		add	r3, r3, #22
 665 03c2 3A1C     		mov	r2, r7
 666 03c4 1632     		add	r2, r2, #22
 667 03c6 1278     		ldrb	r2, [r2]
 668 03c8 1F21     		mov	r1, #31
 669 03ca 8A43     		bic	r2, r1
 670 03cc 1A70     		strb	r2, [r3]
 300:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 671              		.loc 1 300 0
 672 03ce 3B1C     		mov	r3, r7
 673 03d0 2033     		add	r3, r3, #32
 674 03d2 1B78     		ldrb	r3, [r3]
 675 03d4 183B     		sub	r3, r3, #24
 676 03d6 DAB2     		uxtb	r2, r3
 677 03d8 1F23     		mov	r3, #31
 678 03da 1340     		and	r3, r2
 679 03dc DAB2     		uxtb	r2, r3
 680 03de 3B1C     		mov	r3, r7
 681 03e0 1633     		add	r3, r3, #22
 682 03e2 1B78     		ldrb	r3, [r3]
 683 03e4 1343     		orr	r3, r2
 684 03e6 DAB2     		uxtb	r2, r3
 685 03e8 3B1C     		mov	r3, r7
 686 03ea 1633     		add	r3, r3, #22
 687 03ec 4021     		mov	r1, #64
 688 03ee 0A43     		orr	r2, r1
 689 03f0 1A70     		strb	r2, [r3]
 301:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 690              		.loc 1 301 0
 691 03f2 524B     		ldr	r3, .L66
 692 03f4 3A1C     		mov	r2, r7
 693 03f6 1632     		add	r2, r2, #22
 694 03f8 1278     		ldrb	r2, [r2]
 695 03fa 5A71     		strb	r2, [r3, #5]
 302:../Sources/TFC/TFC_CrystalClock.c **** 
 303:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 304:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 696              		.loc 1 304 0
 697 03fc 3B1C     		mov	r3, r7
 698 03fe 1433     		add	r3, r3, #20
 699 0400 0022     		mov	r2, #0
 700 0402 1A80     		strh	r2, [r3]
 701 0404 0DE0     		b	.L43
 702              	.L46:
 305:../Sources/TFC/TFC_CrystalClock.c ****   {
 306:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 703              		.loc 1 306 0
 704 0406 4D4B     		ldr	r3, .L66
 705 0408 9B79     		ldrb	r3, [r3, #6]
 706 040a DBB2     		uxtb	r3, r3
 707 040c 1A1C     		mov	r2, r3
 708 040e 2023     		mov	r3, #32
 709 0410 1340     		and	r3, r2
 710 0412 0ED1     		bne	.L61
 711              	.L44:
 304:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 712              		.loc 1 304 0
 713 0414 3B1C     		mov	r3, r7
 714 0416 1433     		add	r3, r3, #20
 715 0418 3A1C     		mov	r2, r7
 716 041a 1432     		add	r2, r2, #20
 717 041c 1288     		ldrh	r2, [r2]
 718 041e 0132     		add	r2, r2, #1
 719 0420 1A80     		strh	r2, [r3]
 720              	.L43:
 304:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 721              		.loc 1 304 0 is_stmt 0 discriminator 1
 722 0422 3B1C     		mov	r3, r7
 723 0424 1433     		add	r3, r3, #20
 724 0426 0021     		mov	r1, #0
 725 0428 5A5E     		ldrsh	r2, [r3, r1]
 726 042a 454B     		ldr	r3, .L66+4
 727 042c 9A42     		cmp	r2, r3
 728 042e EADD     		ble	.L46
 729 0430 00E0     		b	.L45
 730              	.L61:
 731              		.loc 1 306 0 is_stmt 1
 732 0432 C046     		mov	r8, r8
 733              	.L45:
 307:../Sources/TFC/TFC_CrystalClock.c ****   }
 308:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 734              		.loc 1 308 0
 735 0434 414B     		ldr	r3, .L66
 736 0436 9B79     		ldrb	r3, [r3, #6]
 737 0438 DBB2     		uxtb	r3, r3
 738 043a 1A1C     		mov	r2, r3
 739 043c 2023     		mov	r3, #32
 740 043e 1340     		and	r3, r2
 741 0440 01D1     		bne	.L47
 742              		.loc 1 308 0 is_stmt 0 discriminator 1
 743 0442 1623     		mov	r3, #22
 744 0444 75E0     		b	.L7
 745              	.L47:
 309:../Sources/TFC/TFC_CrystalClock.c **** 
 310:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 311:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 746              		.loc 1 311 0 is_stmt 1
 747 0446 3B1C     		mov	r3, r7
 748 0448 1433     		add	r3, r3, #20
 749 044a 0022     		mov	r2, #0
 750 044c 1A80     		strh	r2, [r3]
 751 044e 0DE0     		b	.L48
 752              	.L51:
 312:../Sources/TFC/TFC_CrystalClock.c ****   {
 313:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 753              		.loc 1 313 0
 754 0450 3A4B     		ldr	r3, .L66
 755 0452 9B79     		ldrb	r3, [r3, #6]
 756 0454 DBB2     		uxtb	r3, r3
 757 0456 1A1C     		mov	r2, r3
 758 0458 4023     		mov	r3, #64
 759 045a 1340     		and	r3, r2
 760 045c 0ED1     		bne	.L62
 761              	.L49:
 311:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 762              		.loc 1 311 0
 763 045e 3B1C     		mov	r3, r7
 764 0460 1433     		add	r3, r3, #20
 765 0462 3A1C     		mov	r2, r7
 766 0464 1432     		add	r2, r2, #20
 767 0466 1288     		ldrh	r2, [r2]
 768 0468 0132     		add	r2, r2, #1
 769 046a 1A80     		strh	r2, [r3]
 770              	.L48:
 311:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 771              		.loc 1 311 0 is_stmt 0 discriminator 1
 772 046c 3B1C     		mov	r3, r7
 773 046e 1433     		add	r3, r3, #20
 774 0470 0021     		mov	r1, #0
 775 0472 5A5E     		ldrsh	r2, [r3, r1]
 776 0474 334B     		ldr	r3, .L66+8
 777 0476 9A42     		cmp	r2, r3
 778 0478 EADD     		ble	.L51
 779 047a 00E0     		b	.L50
 780              	.L62:
 781              		.loc 1 313 0 is_stmt 1
 782 047c C046     		mov	r8, r8
 783              	.L50:
 314:../Sources/TFC/TFC_CrystalClock.c ****   }
 315:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 784              		.loc 1 315 0
 785 047e 2F4B     		ldr	r3, .L66
 786 0480 9B79     		ldrb	r3, [r3, #6]
 787 0482 DBB2     		uxtb	r3, r3
 788 0484 1A1C     		mov	r2, r3
 789 0486 4023     		mov	r3, #64
 790 0488 1340     		and	r3, r2
 791 048a 01D1     		bne	.L52
 792              		.loc 1 315 0 is_stmt 0 discriminator 1
 793 048c 4423     		mov	r3, #68
 794 048e 50E0     		b	.L7
 795              	.L52:
 316:../Sources/TFC/TFC_CrystalClock.c **** 
 317:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 318:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 796              		.loc 1 318 0 is_stmt 1
 797 0490 2A4B     		ldr	r3, .L66
 798 0492 1B79     		ldrb	r3, [r3, #4]
 799 0494 DAB2     		uxtb	r2, r3
 800 0496 1F23     		mov	r3, #31
 801 0498 1340     		and	r3, r2
 802 049a DAB2     		uxtb	r2, r3
 803 049c 3B1C     		mov	r3, r7
 804 049e 0B33     		add	r3, r3, #11
 805 04a0 0132     		add	r2, r2, #1
 806 04a2 1A70     		strb	r2, [r3]
 319:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 807              		.loc 1 319 0
 808 04a4 254B     		ldr	r3, .L66
 809 04a6 5B79     		ldrb	r3, [r3, #5]
 810 04a8 DAB2     		uxtb	r2, r3
 811 04aa 1F23     		mov	r3, #31
 812 04ac 1340     		and	r3, r2
 813 04ae DAB2     		uxtb	r2, r3
 814 04b0 3B1C     		mov	r3, r7
 815 04b2 0A33     		add	r3, r3, #10
 816 04b4 1832     		add	r2, r2, #24
 817 04b6 1A70     		strb	r2, [r3]
 320:../Sources/TFC/TFC_CrystalClock.c **** 
 321:../Sources/TFC/TFC_CrystalClock.c ****   // now in PBE
 322:../Sources/TFC/TFC_CrystalClock.c **** 
 323:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 818              		.loc 1 323 0
 819 04b8 204B     		ldr	r3, .L66
 820 04ba 204A     		ldr	r2, .L66
 821 04bc 1278     		ldrb	r2, [r2]
 822 04be D1B2     		uxtb	r1, r2
 823 04c0 3F22     		mov	r2, #63
 824 04c2 0A40     		and	r2, r1
 825 04c4 D2B2     		uxtb	r2, r2
 826 04c6 1A70     		strb	r2, [r3]
 324:../Sources/TFC/TFC_CrystalClock.c **** 
 325:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 326:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 827              		.loc 1 326 0
 828 04c8 3B1C     		mov	r3, r7
 829 04ca 1433     		add	r3, r3, #20
 830 04cc 0022     		mov	r2, #0
 831 04ce 1A80     		strh	r2, [r3]
 832 04d0 0FE0     		b	.L53
 833              	.L56:
 327:../Sources/TFC/TFC_CrystalClock.c ****   {
 328:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 834              		.loc 1 328 0
 835 04d2 1A4B     		ldr	r3, .L66
 836 04d4 9B79     		ldrb	r3, [r3, #6]
 837 04d6 DBB2     		uxtb	r3, r3
 838 04d8 1A1C     		mov	r2, r3
 839 04da 0C23     		mov	r3, #12
 840 04dc 1340     		and	r3, r2
 841 04de 9B08     		lsr	r3, r3, #2
 842 04e0 032B     		cmp	r3, #3
 843 04e2 0ED0     		beq	.L63
 844              	.L54:
 326:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 845              		.loc 1 326 0
 846 04e4 3B1C     		mov	r3, r7
 847 04e6 1433     		add	r3, r3, #20
 848 04e8 3A1C     		mov	r2, r7
 849 04ea 1432     		add	r2, r2, #20
 850 04ec 1288     		ldrh	r2, [r2]
 851 04ee 0132     		add	r2, r2, #1
 852 04f0 1A80     		strh	r2, [r3]
 853              	.L53:
 326:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 854              		.loc 1 326 0 is_stmt 0 discriminator 1
 855 04f2 3B1C     		mov	r3, r7
 856 04f4 1433     		add	r3, r3, #20
 857 04f6 0021     		mov	r1, #0
 858 04f8 5A5E     		ldrsh	r2, [r3, r1]
 859 04fa 114B     		ldr	r3, .L66+4
 860 04fc 9A42     		cmp	r2, r3
 861 04fe E8DD     		ble	.L56
 862 0500 00E0     		b	.L55
 863              	.L63:
 864              		.loc 1 328 0 is_stmt 1
 865 0502 C046     		mov	r8, r8
 866              	.L55:
 329:../Sources/TFC/TFC_CrystalClock.c ****   }
 330:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 867              		.loc 1 330 0
 868 0504 0D4B     		ldr	r3, .L66
 869 0506 9B79     		ldrb	r3, [r3, #6]
 870 0508 DBB2     		uxtb	r3, r3
 871 050a 1A1C     		mov	r2, r3
 872 050c 0C23     		mov	r3, #12
 873 050e 1340     		and	r3, r2
 874 0510 9B08     		lsr	r3, r3, #2
 875 0512 032B     		cmp	r3, #3
 876 0514 01D0     		beq	.L57
 877              		.loc 1 330 0 is_stmt 0 discriminator 1
 878 0516 1B23     		mov	r3, #27
 879 0518 0BE0     		b	.L7
 880              	.L57:
 331:../Sources/TFC/TFC_CrystalClock.c **** 
 332:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 333:../Sources/TFC/TFC_CrystalClock.c ****   
 334:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 881              		.loc 1 334 0 is_stmt 1
 882 051a 3B1C     		mov	r3, r7
 883 051c 0B33     		add	r3, r3, #11
 884 051e 1B78     		ldrb	r3, [r3]
 885 0520 7868     		ldr	r0, [r7, #4]
 886 0522 191C     		mov	r1, r3
 887 0524 FFF7FEFF 		bl	__aeabi_idiv
 888 0528 031C     		mov	r3, r0
 889 052a 3A1C     		mov	r2, r7
 890 052c 0A32     		add	r2, r2, #10
 891 052e 1278     		ldrb	r2, [r2]
 892 0530 5343     		mul	r3, r2
 893              	.L7:
 335:../Sources/TFC/TFC_CrystalClock.c **** } // pll_init
 894              		.loc 1 335 0
 895 0532 181C     		mov	r0, r3
 896 0534 BD46     		mov	sp, r7
 897 0536 06B0     		add	sp, sp, #24
 898              		@ sp needed for prologue
 899 0538 80BD     		pop	{r7, pc}
 900              	.L67:
 901 053a C046     		.align	2
 902              	.L66:
 903 053c 00400640 		.word	1074151424
 904 0540 CF070000 		.word	1999
 905 0544 9F0F0000 		.word	3999
 906              		.cfi_endproc
 907              	.LFE1:
 909              		.section	.text.pee_pbe,"ax",%progbits
 910              		.align	2
 911              		.global	pee_pbe
 912              		.code	16
 913              		.thumb_func
 915              	pee_pbe:
 916              	.LFB2:
 336:../Sources/TFC/TFC_CrystalClock.c **** 
 337:../Sources/TFC/TFC_CrystalClock.c **** 
 338:../Sources/TFC/TFC_CrystalClock.c **** 
 339:../Sources/TFC/TFC_CrystalClock.c **** 
 340:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 341:../Sources/TFC/TFC_CrystalClock.c **** 
 342:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val)
 343:../Sources/TFC/TFC_CrystalClock.c **** {
 917              		.loc 1 343 0
 918              		.cfi_startproc
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI6:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 84B0     		sub	sp, sp, #16
 925              	.LCFI7:
 926              		.cfi_def_cfa_offset 24
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI8:
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
 344:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 345:../Sources/TFC/TFC_CrystalClock.c ****   
 346:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PEE mode
 347:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 931              		.loc 1 347 0
 932 0008 274B     		ldr	r3, .L78
 933 000a 9B79     		ldrb	r3, [r3, #6]
 934 000c DBB2     		uxtb	r3, r3
 935 000e 1A1C     		mov	r2, r3
 936 0010 0C23     		mov	r3, #12
 937 0012 1340     		and	r3, r2
 938 0014 9B08     		lsr	r3, r3, #2
 939 0016 032B     		cmp	r3, #3
 940 0018 0DD1     		bne	.L69
 348:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 941              		.loc 1 348 0 discriminator 1
 942 001a 234B     		ldr	r3, .L78
 943 001c 9B79     		ldrb	r3, [r3, #6]
 944 001e DBB2     		uxtb	r3, r3
 945 0020 1A1C     		mov	r2, r3
 946 0022 1023     		mov	r3, #16
 947 0024 1340     		and	r3, r2
 347:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 948              		.loc 1 347 0 discriminator 1
 949 0026 06D1     		bne	.L69
 349:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK)))                                    // check PLLS mux has selecte
 950              		.loc 1 349 0 discriminator 1
 951 0028 1F4B     		ldr	r3, .L78
 952 002a 9B79     		ldrb	r3, [r3, #6]
 953 002c DBB2     		uxtb	r3, r3
 954 002e 1A1C     		mov	r2, r3
 955 0030 2023     		mov	r3, #32
 956 0032 1340     		and	r3, r2
 347:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 957              		.loc 1 347 0 discriminator 1
 958 0034 01D1     		bne	.L70
 959              	.L69:
 350:../Sources/TFC/TFC_CrystalClock.c ****   {
 351:../Sources/TFC/TFC_CrystalClock.c ****     return 0x8;                                                       // return error code
 960              		.loc 1 351 0
 961 0036 0823     		mov	r3, #8
 962 0038 32E0     		b	.L71
 963              	.L70:
 352:../Sources/TFC/TFC_CrystalClock.c ****   } 
 353:../Sources/TFC/TFC_CrystalClock.c ****   
 354:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the PLL by default the PLL and external clock settings are valid
 355:../Sources/TFC/TFC_CrystalClock.c **** // To move to PBE from PEE simply requires the switching of the CLKS mux to select the ext clock 
 356:../Sources/TFC/TFC_CrystalClock.c **** // As CLKS is already 0 the CLKS value can simply be OR'ed into the register 
 357:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // switch CLKS mux to select external reference clock as MCG_OUT
 964              		.loc 1 357 0
 965 003a 1B4B     		ldr	r3, .L78
 966 003c 1A4A     		ldr	r2, .L78
 967 003e 1278     		ldrb	r2, [r2]
 968 0040 D2B2     		uxtb	r2, r2
 969 0042 8021     		mov	r1, #128
 970 0044 4942     		neg	r1, r1
 971 0046 0A43     		orr	r2, r1
 972 0048 D2B2     		uxtb	r2, r2
 973 004a 1A70     		strb	r2, [r3]
 358:../Sources/TFC/TFC_CrystalClock.c ****   
 359:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update 
 360:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 974              		.loc 1 360 0
 975 004c 3B1C     		mov	r3, r7
 976 004e 0E33     		add	r3, r3, #14
 977 0050 0022     		mov	r2, #0
 978 0052 1A80     		strh	r2, [r3]
 979 0054 0FE0     		b	.L72
 980              	.L75:
 361:../Sources/TFC/TFC_CrystalClock.c ****   {
 362:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 981              		.loc 1 362 0
 982 0056 144B     		ldr	r3, .L78
 983 0058 9B79     		ldrb	r3, [r3, #6]
 984 005a DBB2     		uxtb	r3, r3
 985 005c 1A1C     		mov	r2, r3
 986 005e 0C23     		mov	r3, #12
 987 0060 1340     		and	r3, r2
 988 0062 9B08     		lsr	r3, r3, #2
 989 0064 022B     		cmp	r3, #2
 990 0066 0ED0     		beq	.L77
 991              	.L73:
 360:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 992              		.loc 1 360 0
 993 0068 3B1C     		mov	r3, r7
 994 006a 0E33     		add	r3, r3, #14
 995 006c 3A1C     		mov	r2, r7
 996 006e 0E32     		add	r2, r2, #14
 997 0070 1288     		ldrh	r2, [r2]
 998 0072 0132     		add	r2, r2, #1
 999 0074 1A80     		strh	r2, [r3]
 1000              	.L72:
 360:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1001              		.loc 1 360 0 is_stmt 0 discriminator 1
 1002 0076 3B1C     		mov	r3, r7
 1003 0078 0E33     		add	r3, r3, #14
 1004 007a 0021     		mov	r1, #0
 1005 007c 5A5E     		ldrsh	r2, [r3, r1]
 1006 007e 0B4B     		ldr	r3, .L78+4
 1007 0080 9A42     		cmp	r2, r3
 1008 0082 E8DD     		ble	.L75
 1009 0084 00E0     		b	.L74
 1010              	.L77:
 1011              		.loc 1 362 0 is_stmt 1
 1012 0086 C046     		mov	r8, r8
 1013              	.L74:
 363:../Sources/TFC/TFC_CrystalClock.c ****   }
 364:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 1014              		.loc 1 364 0
 1015 0088 074B     		ldr	r3, .L78
 1016 008a 9B79     		ldrb	r3, [r3, #6]
 1017 008c DBB2     		uxtb	r3, r3
 1018 008e 1A1C     		mov	r2, r3
 1019 0090 0C23     		mov	r3, #12
 1020 0092 1340     		and	r3, r2
 1021 0094 9B08     		lsr	r3, r3, #2
 1022 0096 022B     		cmp	r3, #2
 1023 0098 01D0     		beq	.L76
 1024              		.loc 1 364 0 is_stmt 0 discriminator 1
 1025 009a 1A23     		mov	r3, #26
 1026 009c 00E0     		b	.L71
 1027              	.L76:
 365:../Sources/TFC/TFC_CrystalClock.c **** 
 366:../Sources/TFC/TFC_CrystalClock.c **** // Now in PBE mode  
 367:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1028              		.loc 1 367 0 is_stmt 1
 1029 009e 7B68     		ldr	r3, [r7, #4]
 1030              	.L71:
 368:../Sources/TFC/TFC_CrystalClock.c **** } // pee_pbe
 1031              		.loc 1 368 0
 1032 00a0 181C     		mov	r0, r3
 1033 00a2 BD46     		mov	sp, r7
 1034 00a4 04B0     		add	sp, sp, #16
 1035              		@ sp needed for prologue
 1036 00a6 80BD     		pop	{r7, pc}
 1037              	.L79:
 1038              		.align	2
 1039              	.L78:
 1040 00a8 00400640 		.word	1074151424
 1041 00ac CF070000 		.word	1999
 1042              		.cfi_endproc
 1043              	.LFE2:
 1045              		.section	.text.pbe_pee,"ax",%progbits
 1046              		.align	2
 1047              		.global	pbe_pee
 1048              		.code	16
 1049              		.thumb_func
 1051              	pbe_pee:
 1052              	.LFB3:
 369:../Sources/TFC/TFC_CrystalClock.c **** 
 370:../Sources/TFC/TFC_CrystalClock.c **** 
 371:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val)
 372:../Sources/TFC/TFC_CrystalClock.c **** {
 1053              		.loc 1 372 0
 1054              		.cfi_startproc
 1055 0000 80B5     		push	{r7, lr}
 1056              	.LCFI9:
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 84B0     		sub	sp, sp, #16
 1061              	.LCFI10:
 1062              		.cfi_def_cfa_offset 24
 1063 0004 00AF     		add	r7, sp, #0
 1064              	.LCFI11:
 1065              		.cfi_def_cfa_register 7
 1066 0006 7860     		str	r0, [r7, #4]
 373:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 374:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 375:../Sources/TFC/TFC_CrystalClock.c **** 
 376:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
 377:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1067              		.loc 1 377 0
 1068 0008 4C4B     		ldr	r3, .L96
 1069 000a 9B79     		ldrb	r3, [r3, #6]
 1070 000c DBB2     		uxtb	r3, r3
 1071 000e 1A1C     		mov	r2, r3
 1072 0010 0C23     		mov	r3, #12
 1073 0012 1340     		and	r3, r2
 1074 0014 9B08     		lsr	r3, r3, #2
 1075 0016 022B     		cmp	r3, #2
 1076 0018 14D1     		bne	.L81
 378:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1077              		.loc 1 378 0 discriminator 1
 1078 001a 484B     		ldr	r3, .L96
 1079 001c 9B79     		ldrb	r3, [r3, #6]
 1080 001e DBB2     		uxtb	r3, r3
 1081 0020 1A1C     		mov	r2, r3
 1082 0022 1023     		mov	r3, #16
 1083 0024 1340     		and	r3, r2
 377:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1084              		.loc 1 377 0 discriminator 1
 1085 0026 0DD1     		bne	.L81
 379:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1086              		.loc 1 379 0
 1087 0028 444B     		ldr	r3, .L96
 1088 002a 9B79     		ldrb	r3, [r3, #6]
 1089 002c DBB2     		uxtb	r3, r3
 1090 002e 1A1C     		mov	r2, r3
 1091 0030 2023     		mov	r3, #32
 1092 0032 1340     		and	r3, r2
 378:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1093              		.loc 1 378 0
 1094 0034 06D0     		beq	.L81
 380:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1095              		.loc 1 380 0
 1096 0036 414B     		ldr	r3, .L96
 1097 0038 5B78     		ldrb	r3, [r3, #1]
 1098 003a DBB2     		uxtb	r3, r3
 1099 003c 1A1C     		mov	r2, r3
 1100 003e 0223     		mov	r3, #2
 1101 0040 1340     		and	r3, r2
 377:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1102              		.loc 1 377 0
 1103 0042 01D0     		beq	.L82
 1104              	.L81:
 381:../Sources/TFC/TFC_CrystalClock.c ****   {
 382:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1105              		.loc 1 382 0
 1106 0044 0723     		mov	r3, #7
 1107 0046 75E0     		b	.L83
 1108              	.L82:
 383:../Sources/TFC/TFC_CrystalClock.c ****   }
 384:../Sources/TFC/TFC_CrystalClock.c **** 
 385:../Sources/TFC/TFC_CrystalClock.c ****   // As the PLL settings have already been checked when PBE mode was enterred they are not checked 
 386:../Sources/TFC/TFC_CrystalClock.c **** 
 387:../Sources/TFC/TFC_CrystalClock.c ****   // Check the PLL state before transitioning to PEE mode
 388:../Sources/TFC/TFC_CrystalClock.c ****   
 389:../Sources/TFC/TFC_CrystalClock.c ****   // Check LOCK bit is set before transitioning MCG to PLL output (already checked in fbe_pbe but g
 390:../Sources/TFC/TFC_CrystalClock.c ****   // to re-check before switch to use PLL)
 391:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1109              		.loc 1 391 0
 1110 0048 3B1C     		mov	r3, r7
 1111 004a 0E33     		add	r3, r3, #14
 1112 004c 0022     		mov	r2, #0
 1113 004e 1A80     		strh	r2, [r3]
 1114 0050 0DE0     		b	.L84
 1115              	.L87:
 392:../Sources/TFC/TFC_CrystalClock.c ****   {
 393:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1116              		.loc 1 393 0
 1117 0052 3A4B     		ldr	r3, .L96
 1118 0054 9B79     		ldrb	r3, [r3, #6]
 1119 0056 DBB2     		uxtb	r3, r3
 1120 0058 1A1C     		mov	r2, r3
 1121 005a 4023     		mov	r3, #64
 1122 005c 1340     		and	r3, r2
 1123 005e 0ED1     		bne	.L94
 1124              	.L85:
 391:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1125              		.loc 1 391 0
 1126 0060 3B1C     		mov	r3, r7
 1127 0062 0E33     		add	r3, r3, #14
 1128 0064 3A1C     		mov	r2, r7
 1129 0066 0E32     		add	r2, r2, #14
 1130 0068 1288     		ldrh	r2, [r2]
 1131 006a 0132     		add	r2, r2, #1
 1132 006c 1A80     		strh	r2, [r3]
 1133              	.L84:
 391:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1134              		.loc 1 391 0 is_stmt 0 discriminator 1
 1135 006e 3B1C     		mov	r3, r7
 1136 0070 0E33     		add	r3, r3, #14
 1137 0072 0021     		mov	r1, #0
 1138 0074 5A5E     		ldrsh	r2, [r3, r1]
 1139 0076 324B     		ldr	r3, .L96+4
 1140 0078 9A42     		cmp	r2, r3
 1141 007a EADD     		ble	.L87
 1142 007c 00E0     		b	.L86
 1143              	.L94:
 1144              		.loc 1 393 0 is_stmt 1
 1145 007e C046     		mov	r8, r8
 1146              	.L86:
 394:../Sources/TFC/TFC_CrystalClock.c ****   }
 395:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1147              		.loc 1 395 0
 1148 0080 2E4B     		ldr	r3, .L96
 1149 0082 9B79     		ldrb	r3, [r3, #6]
 1150 0084 DBB2     		uxtb	r3, r3
 1151 0086 1A1C     		mov	r2, r3
 1152 0088 4023     		mov	r3, #64
 1153 008a 1340     		and	r3, r2
 1154 008c 01D1     		bne	.L88
 1155              		.loc 1 395 0 is_stmt 0 discriminator 1
 1156 008e 4423     		mov	r3, #68
 1157 0090 50E0     		b	.L83
 1158              	.L88:
 396:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 397:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 1159              		.loc 1 397 0 is_stmt 1
 1160 0092 2A4B     		ldr	r3, .L96
 1161 0094 1B79     		ldrb	r3, [r3, #4]
 1162 0096 DAB2     		uxtb	r2, r3
 1163 0098 1F23     		mov	r3, #31
 1164 009a 1340     		and	r3, r2
 1165 009c DAB2     		uxtb	r2, r3
 1166 009e 3B1C     		mov	r3, r7
 1167 00a0 0D33     		add	r3, r3, #13
 1168 00a2 0132     		add	r2, r2, #1
 1169 00a4 1A70     		strb	r2, [r3]
 398:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 1170              		.loc 1 398 0
 1171 00a6 254B     		ldr	r3, .L96
 1172 00a8 5B79     		ldrb	r3, [r3, #5]
 1173 00aa DAB2     		uxtb	r2, r3
 1174 00ac 1F23     		mov	r3, #31
 1175 00ae 1340     		and	r3, r2
 1176 00b0 DAB2     		uxtb	r2, r3
 1177 00b2 3B1C     		mov	r3, r7
 1178 00b4 0C33     		add	r3, r3, #12
 1179 00b6 1832     		add	r2, r2, #24
 1180 00b8 1A70     		strb	r2, [r3]
 399:../Sources/TFC/TFC_CrystalClock.c ****   
 400:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 1181              		.loc 1 400 0
 1182 00ba 204B     		ldr	r3, .L96
 1183 00bc 1F4A     		ldr	r2, .L96
 1184 00be 1278     		ldrb	r2, [r2]
 1185 00c0 D1B2     		uxtb	r1, r2
 1186 00c2 3F22     		mov	r2, #63
 1187 00c4 0A40     		and	r2, r1
 1188 00c6 D2B2     		uxtb	r2, r2
 1189 00c8 1A70     		strb	r2, [r3]
 401:../Sources/TFC/TFC_CrystalClock.c **** 
 402:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 403:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1190              		.loc 1 403 0
 1191 00ca 3B1C     		mov	r3, r7
 1192 00cc 0E33     		add	r3, r3, #14
 1193 00ce 0022     		mov	r2, #0
 1194 00d0 1A80     		strh	r2, [r3]
 1195 00d2 0FE0     		b	.L89
 1196              	.L92:
 404:../Sources/TFC/TFC_CrystalClock.c ****   {
 405:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 1197              		.loc 1 405 0
 1198 00d4 194B     		ldr	r3, .L96
 1199 00d6 9B79     		ldrb	r3, [r3, #6]
 1200 00d8 DBB2     		uxtb	r3, r3
 1201 00da 1A1C     		mov	r2, r3
 1202 00dc 0C23     		mov	r3, #12
 1203 00de 1340     		and	r3, r2
 1204 00e0 9B08     		lsr	r3, r3, #2
 1205 00e2 032B     		cmp	r3, #3
 1206 00e4 0ED0     		beq	.L95
 1207              	.L90:
 403:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1208              		.loc 1 403 0
 1209 00e6 3B1C     		mov	r3, r7
 1210 00e8 0E33     		add	r3, r3, #14
 1211 00ea 3A1C     		mov	r2, r7
 1212 00ec 0E32     		add	r2, r2, #14
 1213 00ee 1288     		ldrh	r2, [r2]
 1214 00f0 0132     		add	r2, r2, #1
 1215 00f2 1A80     		strh	r2, [r3]
 1216              	.L89:
 403:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1217              		.loc 1 403 0 is_stmt 0 discriminator 1
 1218 00f4 3B1C     		mov	r3, r7
 1219 00f6 0E33     		add	r3, r3, #14
 1220 00f8 0021     		mov	r1, #0
 1221 00fa 5A5E     		ldrsh	r2, [r3, r1]
 1222 00fc 104B     		ldr	r3, .L96+4
 1223 00fe 9A42     		cmp	r2, r3
 1224 0100 E8DD     		ble	.L92
 1225 0102 00E0     		b	.L91
 1226              	.L95:
 1227              		.loc 1 405 0 is_stmt 1
 1228 0104 C046     		mov	r8, r8
 1229              	.L91:
 406:../Sources/TFC/TFC_CrystalClock.c ****   }
 407:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 1230              		.loc 1 407 0
 1231 0106 0D4B     		ldr	r3, .L96
 1232 0108 9B79     		ldrb	r3, [r3, #6]
 1233 010a DBB2     		uxtb	r3, r3
 1234 010c 1A1C     		mov	r2, r3
 1235 010e 0C23     		mov	r3, #12
 1236 0110 1340     		and	r3, r2
 1237 0112 9B08     		lsr	r3, r3, #2
 1238 0114 032B     		cmp	r3, #3
 1239 0116 01D0     		beq	.L93
 1240              		.loc 1 407 0 is_stmt 0 discriminator 1
 1241 0118 1B23     		mov	r3, #27
 1242 011a 0BE0     		b	.L83
 1243              	.L93:
 408:../Sources/TFC/TFC_CrystalClock.c **** 
 409:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 410:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 1244              		.loc 1 410 0 is_stmt 1
 1245 011c 3B1C     		mov	r3, r7
 1246 011e 0D33     		add	r3, r3, #13
 1247 0120 1B78     		ldrb	r3, [r3]
 1248 0122 7868     		ldr	r0, [r7, #4]
 1249 0124 191C     		mov	r1, r3
 1250 0126 FFF7FEFF 		bl	__aeabi_idiv
 1251 012a 031C     		mov	r3, r0
 1252 012c 3A1C     		mov	r2, r7
 1253 012e 0C32     		add	r2, r2, #12
 1254 0130 1278     		ldrb	r2, [r2]
 1255 0132 5343     		mul	r3, r2
 1256              	.L83:
 411:../Sources/TFC/TFC_CrystalClock.c ****   
 412:../Sources/TFC/TFC_CrystalClock.c **** }  // pbe_pee
 1257              		.loc 1 412 0
 1258 0134 181C     		mov	r0, r3
 1259 0136 BD46     		mov	sp, r7
 1260 0138 04B0     		add	sp, sp, #16
 1261              		@ sp needed for prologue
 1262 013a 80BD     		pop	{r7, pc}
 1263              	.L97:
 1264              		.align	2
 1265              	.L96:
 1266 013c 00400640 		.word	1074151424
 1267 0140 CF070000 		.word	1999
 1268              		.cfi_endproc
 1269              	.LFE3:
 1271              		.section	.text.pbe_fbe,"ax",%progbits
 1272              		.align	2
 1273              		.global	pbe_fbe
 1274              		.code	16
 1275              		.thumb_func
 1277              	pbe_fbe:
 1278              	.LFB4:
 413:../Sources/TFC/TFC_CrystalClock.c **** 
 414:../Sources/TFC/TFC_CrystalClock.c **** 
 415:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val)
 416:../Sources/TFC/TFC_CrystalClock.c **** {
 1279              		.loc 1 416 0
 1280              		.cfi_startproc
 1281 0000 80B5     		push	{r7, lr}
 1282              	.LCFI12:
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 7, -8
 1285              		.cfi_offset 14, -4
 1286 0002 84B0     		sub	sp, sp, #16
 1287              	.LCFI13:
 1288              		.cfi_def_cfa_offset 24
 1289 0004 00AF     		add	r7, sp, #0
 1290              	.LCFI14:
 1291              		.cfi_def_cfa_register 7
 1292 0006 7860     		str	r0, [r7, #4]
 417:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 418:../Sources/TFC/TFC_CrystalClock.c ****   
 419:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 420:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1293              		.loc 1 420 0
 1294 0008 284B     		ldr	r3, .L108
 1295 000a 9B79     		ldrb	r3, [r3, #6]
 1296 000c DBB2     		uxtb	r3, r3
 1297 000e 1A1C     		mov	r2, r3
 1298 0010 0C23     		mov	r3, #12
 1299 0012 1340     		and	r3, r2
 1300 0014 9B08     		lsr	r3, r3, #2
 1301 0016 022B     		cmp	r3, #2
 1302 0018 14D1     		bne	.L99
 421:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1303              		.loc 1 421 0 discriminator 1
 1304 001a 244B     		ldr	r3, .L108
 1305 001c 9B79     		ldrb	r3, [r3, #6]
 1306 001e DBB2     		uxtb	r3, r3
 1307 0020 1A1C     		mov	r2, r3
 1308 0022 1023     		mov	r3, #16
 1309 0024 1340     		and	r3, r2
 420:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1310              		.loc 1 420 0 discriminator 1
 1311 0026 0DD1     		bne	.L99
 422:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1312              		.loc 1 422 0
 1313 0028 204B     		ldr	r3, .L108
 1314 002a 9B79     		ldrb	r3, [r3, #6]
 1315 002c DBB2     		uxtb	r3, r3
 1316 002e 1A1C     		mov	r2, r3
 1317 0030 2023     		mov	r3, #32
 1318 0032 1340     		and	r3, r2
 421:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1319              		.loc 1 421 0
 1320 0034 06D0     		beq	.L99
 423:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1321              		.loc 1 423 0
 1322 0036 1D4B     		ldr	r3, .L108
 1323 0038 5B78     		ldrb	r3, [r3, #1]
 1324 003a DBB2     		uxtb	r3, r3
 1325 003c 1A1C     		mov	r2, r3
 1326 003e 0223     		mov	r3, #2
 1327 0040 1340     		and	r3, r2
 420:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1328              		.loc 1 420 0
 1329 0042 01D0     		beq	.L100
 1330              	.L99:
 424:../Sources/TFC/TFC_CrystalClock.c ****   {
 425:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1331              		.loc 1 425 0
 1332 0044 0723     		mov	r3, #7
 1333 0046 2DE0     		b	.L101
 1334              	.L100:
 426:../Sources/TFC/TFC_CrystalClock.c ****   }
 427:../Sources/TFC/TFC_CrystalClock.c **** 
 428:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the ext clock, by default the external clock settings are valid
 429:../Sources/TFC/TFC_CrystalClock.c **** // To move to FBE from PBE simply requires the switching of the PLLS mux to disable the PLL 
 430:../Sources/TFC/TFC_CrystalClock.c ****   
 431:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to disable PLL, still clocked from ext ref clk
 1335              		.loc 1 431 0
 1336 0048 184B     		ldr	r3, .L108
 1337 004a 184A     		ldr	r2, .L108
 1338 004c 5279     		ldrb	r2, [r2, #5]
 1339 004e D2B2     		uxtb	r2, r2
 1340 0050 4021     		mov	r1, #64
 1341 0052 8A43     		bic	r2, r1
 1342 0054 D2B2     		uxtb	r2, r2
 1343 0056 5A71     		strb	r2, [r3, #5]
 432:../Sources/TFC/TFC_CrystalClock.c ****   
 433:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 434:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1344              		.loc 1 434 0
 1345 0058 3B1C     		mov	r3, r7
 1346 005a 0E33     		add	r3, r3, #14
 1347 005c 0022     		mov	r2, #0
 1348 005e 1A80     		strh	r2, [r3]
 1349 0060 0DE0     		b	.L102
 1350              	.L105:
 435:../Sources/TFC/TFC_CrystalClock.c ****   {
 436:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 1351              		.loc 1 436 0
 1352 0062 124B     		ldr	r3, .L108
 1353 0064 9B79     		ldrb	r3, [r3, #6]
 1354 0066 DBB2     		uxtb	r3, r3
 1355 0068 1A1C     		mov	r2, r3
 1356 006a 2023     		mov	r3, #32
 1357 006c 1340     		and	r3, r2
 1358 006e 0ED0     		beq	.L107
 1359              	.L103:
 434:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1360              		.loc 1 434 0
 1361 0070 3B1C     		mov	r3, r7
 1362 0072 0E33     		add	r3, r3, #14
 1363 0074 3A1C     		mov	r2, r7
 1364 0076 0E32     		add	r2, r2, #14
 1365 0078 1288     		ldrh	r2, [r2]
 1366 007a 0132     		add	r2, r2, #1
 1367 007c 1A80     		strh	r2, [r3]
 1368              	.L102:
 434:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1369              		.loc 1 434 0 is_stmt 0 discriminator 1
 1370 007e 3B1C     		mov	r3, r7
 1371 0080 0E33     		add	r3, r3, #14
 1372 0082 0021     		mov	r1, #0
 1373 0084 5A5E     		ldrsh	r2, [r3, r1]
 1374 0086 0A4B     		ldr	r3, .L108+4
 1375 0088 9A42     		cmp	r2, r3
 1376 008a EADD     		ble	.L105
 1377 008c 00E0     		b	.L104
 1378              	.L107:
 1379              		.loc 1 436 0 is_stmt 1
 1380 008e C046     		mov	r8, r8
 1381              	.L104:
 437:../Sources/TFC/TFC_CrystalClock.c ****   }
 438:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 1382              		.loc 1 438 0
 1383 0090 064B     		ldr	r3, .L108
 1384 0092 9B79     		ldrb	r3, [r3, #6]
 1385 0094 DBB2     		uxtb	r3, r3
 1386 0096 1A1C     		mov	r2, r3
 1387 0098 2023     		mov	r3, #32
 1388 009a 1340     		and	r3, r2
 1389 009c 01D0     		beq	.L106
 1390              		.loc 1 438 0 is_stmt 0 discriminator 1
 1391 009e 1523     		mov	r3, #21
 1392 00a0 00E0     		b	.L101
 1393              	.L106:
 439:../Sources/TFC/TFC_CrystalClock.c **** 
 440:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode  
 441:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency 
 1394              		.loc 1 441 0 is_stmt 1
 1395 00a2 7B68     		ldr	r3, [r7, #4]
 1396              	.L101:
 442:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_fbe
 1397              		.loc 1 442 0
 1398 00a4 181C     		mov	r0, r3
 1399 00a6 BD46     		mov	sp, r7
 1400 00a8 04B0     		add	sp, sp, #16
 1401              		@ sp needed for prologue
 1402 00aa 80BD     		pop	{r7, pc}
 1403              	.L109:
 1404              		.align	2
 1405              	.L108:
 1406 00ac 00400640 		.word	1074151424
 1407 00b0 CF070000 		.word	1999
 1408              		.cfi_endproc
 1409              	.LFE4:
 1411              		.section	.text.fbe_pbe,"ax",%progbits
 1412              		.align	2
 1413              		.global	fbe_pbe
 1414              		.code	16
 1415              		.thumb_func
 1417              	fbe_pbe:
 1418              	.LFB5:
 443:../Sources/TFC/TFC_CrystalClock.c **** 
 444:../Sources/TFC/TFC_CrystalClock.c **** 
 445:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 446:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbe_pbe
 447:../Sources/TFC/TFC_CrystalClock.c ****  *
 448:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBE to PBE mode
 449:../Sources/TFC/TFC_CrystalClock.c ****  *
 450:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBE mode to PBE mode. 
 451:../Sources/TFC/TFC_CrystalClock.c ****  * This function presently only supports OSC0 and PLL0. Support for OSC1 and PLL1 will be added soo
 452:../Sources/TFC/TFC_CrystalClock.c ****  * The function requires the desired OSC and PLL be passed in to it for compatibility with the
 453:../Sources/TFC/TFC_CrystalClock.c ****  * future support of OSC/PLL selection
 454:../Sources/TFC/TFC_CrystalClock.c ****  *
 455:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 456:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 457:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 458:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 459:../Sources/TFC/TFC_CrystalClock.c ****  *
 460:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 461:../Sources/TFC/TFC_CrystalClock.c ****  */
 462:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 463:../Sources/TFC/TFC_CrystalClock.c **** {
 1419              		.loc 1 463 0
 1420              		.cfi_startproc
 1421 0000 80B5     		push	{r7, lr}
 1422              	.LCFI15:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 86B0     		sub	sp, sp, #24
 1427              	.LCFI16:
 1428              		.cfi_def_cfa_offset 32
 1429 0004 00AF     		add	r7, sp, #0
 1430              	.LCFI17:
 1431              		.cfi_def_cfa_register 7
 1432 0006 7860     		str	r0, [r7, #4]
 1433 0008 FB1C     		add	r3, r7, #3
 1434 000a 1970     		strb	r1, [r3]
 1435 000c BB1C     		add	r3, r7, #2
 1436 000e 1A70     		strb	r2, [r3]
 464:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 465:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 466:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 467:../Sources/TFC/TFC_CrystalClock.c ****   
 468:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 469:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1437              		.loc 1 469 0
 1438 0010 7D4B     		ldr	r3, .L134
 1439 0012 9B79     		ldrb	r3, [r3, #6]
 1440 0014 DBB2     		uxtb	r3, r3
 1441 0016 1A1C     		mov	r2, r3
 1442 0018 0C23     		mov	r3, #12
 1443 001a 1340     		and	r3, r2
 1444 001c 9B08     		lsr	r3, r3, #2
 1445 001e 022B     		cmp	r3, #2
 1446 0020 14D1     		bne	.L111
 470:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1447              		.loc 1 470 0 discriminator 1
 1448 0022 794B     		ldr	r3, .L134
 1449 0024 9B79     		ldrb	r3, [r3, #6]
 1450 0026 DBB2     		uxtb	r3, r3
 1451 0028 1A1C     		mov	r2, r3
 1452 002a 1023     		mov	r3, #16
 1453 002c 1340     		and	r3, r2
 469:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1454              		.loc 1 469 0 discriminator 1
 1455 002e 0DD1     		bne	.L111
 471:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 1456              		.loc 1 471 0
 1457 0030 754B     		ldr	r3, .L134
 1458 0032 9B79     		ldrb	r3, [r3, #6]
 1459 0034 DBB2     		uxtb	r3, r3
 1460 0036 1A1C     		mov	r2, r3
 1461 0038 2023     		mov	r3, #32
 1462 003a 1340     		and	r3, r2
 470:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1463              		.loc 1 470 0
 1464 003c 06D1     		bne	.L111
 472:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1465              		.loc 1 472 0
 1466 003e 724B     		ldr	r3, .L134
 1467 0040 5B78     		ldrb	r3, [r3, #1]
 1468 0042 DBB2     		uxtb	r3, r3
 1469 0044 1A1C     		mov	r2, r3
 1470 0046 0223     		mov	r3, #2
 1471 0048 1340     		and	r3, r2
 469:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1472              		.loc 1 469 0
 1473 004a 01D0     		beq	.L112
 1474              	.L111:
 473:../Sources/TFC/TFC_CrystalClock.c ****   {
 474:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 1475              		.loc 1 474 0
 1476 004c 0423     		mov	r3, #4
 1477 004e D6E0     		b	.L113
 1478              	.L112:
 475:../Sources/TFC/TFC_CrystalClock.c ****   }
 476:../Sources/TFC/TFC_CrystalClock.c ****   
 477:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 478:../Sources/TFC/TFC_CrystalClock.c **** 
 479:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 480:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1479              		.loc 1 480 0
 1480 0050 FB1C     		add	r3, r7, #3
 1481 0052 1B78     		ldrb	r3, [r3]
 1482 0054 5BB2     		sxtb	r3, r3
 1483 0056 002B     		cmp	r3, #0
 1484 0058 04DD     		ble	.L114
 1485              		.loc 1 480 0 is_stmt 0 discriminator 2
 1486 005a FB1C     		add	r3, r7, #3
 1487 005c 1B78     		ldrb	r3, [r3]
 1488 005e 5BB2     		sxtb	r3, r3
 1489 0060 192B     		cmp	r3, #25
 1490 0062 01DD     		ble	.L115
 1491              	.L114:
 1492              		.loc 1 480 0 discriminator 1
 1493 0064 4123     		mov	r3, #65
 1494 0066 CAE0     		b	.L113
 1495              	.L115:
 481:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1496              		.loc 1 481 0 is_stmt 1
 1497 0068 BB1C     		add	r3, r7, #2
 1498 006a 1B78     		ldrb	r3, [r3]
 1499 006c 5BB2     		sxtb	r3, r3
 1500 006e 172B     		cmp	r3, #23
 1501 0070 04DD     		ble	.L116
 1502              		.loc 1 481 0 is_stmt 0 discriminator 2
 1503 0072 BB1C     		add	r3, r7, #2
 1504 0074 1B78     		ldrb	r3, [r3]
 1505 0076 5BB2     		sxtb	r3, r3
 1506 0078 322B     		cmp	r3, #50
 1507 007a 01DD     		ble	.L117
 1508              	.L116:
 1509              		.loc 1 481 0 discriminator 1
 1510 007c 4223     		mov	r3, #66
 1511 007e BEE0     		b	.L113
 1512              	.L117:
 482:../Sources/TFC/TFC_CrystalClock.c ****   
 483:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 484:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1513              		.loc 1 484 0 is_stmt 1
 1514 0080 FB1C     		add	r3, r7, #3
 1515 0082 1B78     		ldrb	r3, [r3]
 1516 0084 5BB2     		sxtb	r3, r3
 1517 0086 7868     		ldr	r0, [r7, #4]
 1518 0088 191C     		mov	r1, r3
 1519 008a FFF7FEFF 		bl	__aeabi_idiv
 1520 008e 031C     		mov	r3, r0
 1521 0090 1A1C     		mov	r2, r3
 1522 0092 5E4B     		ldr	r3, .L134+4
 1523 0094 9A42     		cmp	r2, r3
 1524 0096 0BDD     		ble	.L118
 1525              		.loc 1 484 0 is_stmt 0 discriminator 2
 1526 0098 FB1C     		add	r3, r7, #3
 1527 009a 1B78     		ldrb	r3, [r3]
 1528 009c 5BB2     		sxtb	r3, r3
 1529 009e 7868     		ldr	r0, [r7, #4]
 1530 00a0 191C     		mov	r1, r3
 1531 00a2 FFF7FEFF 		bl	__aeabi_idiv
 1532 00a6 031C     		mov	r3, r0
 1533 00a8 1A1C     		mov	r2, r3
 1534 00aa 594B     		ldr	r3, .L134+8
 1535 00ac 9A42     		cmp	r2, r3
 1536 00ae 01DD     		ble	.L119
 1537              	.L118:
 1538              		.loc 1 484 0 discriminator 1
 1539 00b0 4323     		mov	r3, #67
 1540 00b2 A4E0     		b	.L113
 1541              	.L119:
 485:../Sources/TFC/TFC_CrystalClock.c ****        
 486:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL output frequency is within spec.
 487:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 1542              		.loc 1 487 0 is_stmt 1
 1543 00b4 FB1C     		add	r3, r7, #3
 1544 00b6 1B78     		ldrb	r3, [r3]
 1545 00b8 5BB2     		sxtb	r3, r3
 1546 00ba 7868     		ldr	r0, [r7, #4]
 1547 00bc 191C     		mov	r1, r3
 1548 00be FFF7FEFF 		bl	__aeabi_idiv
 1549 00c2 031C     		mov	r3, r0
 1550 00c4 BA1C     		add	r2, r7, #2
 1551 00c6 1278     		ldrb	r2, [r2]
 1552 00c8 52B2     		sxtb	r2, r2
 1553 00ca 5343     		mul	r3, r2
 1554 00cc 3B61     		str	r3, [r7, #16]
 488:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 1555              		.loc 1 488 0
 1556 00ce 3A69     		ldr	r2, [r7, #16]
 1557 00d0 504B     		ldr	r3, .L134+12
 1558 00d2 9A42     		cmp	r2, r3
 1559 00d4 03DD     		ble	.L120
 1560              		.loc 1 488 0 is_stmt 0 discriminator 2
 1561 00d6 3A69     		ldr	r2, [r7, #16]
 1562 00d8 4F4B     		ldr	r3, .L134+16
 1563 00da 9A42     		cmp	r2, r3
 1564 00dc 01DD     		ble	.L121
 1565              	.L120:
 1566              		.loc 1 488 0 discriminator 1
 1567 00de 4523     		mov	r3, #69
 1568 00e0 8DE0     		b	.L113
 1569              	.L121:
 489:../Sources/TFC/TFC_CrystalClock.c **** 
 490:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 491:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 492:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1570              		.loc 1 492 0 is_stmt 1
 1571 00e2 494A     		ldr	r2, .L134
 1572 00e4 3B1C     		mov	r3, r7
 1573 00e6 0F33     		add	r3, r3, #15
 1574 00e8 1279     		ldrb	r2, [r2, #4]
 1575 00ea 1A70     		strb	r2, [r3]
 493:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 1576              		.loc 1 493 0
 1577 00ec 3B1C     		mov	r3, r7
 1578 00ee 0F33     		add	r3, r3, #15
 1579 00f0 3A1C     		mov	r2, r7
 1580 00f2 0F32     		add	r2, r2, #15
 1581 00f4 1278     		ldrb	r2, [r2]
 1582 00f6 1F21     		mov	r1, #31
 1583 00f8 8A43     		bic	r2, r1
 1584 00fa 1A70     		strb	r2, [r3]
 494:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 1585              		.loc 1 494 0
 1586 00fc FB1C     		add	r3, r7, #3
 1587 00fe 1B78     		ldrb	r3, [r3]
 1588 0100 013B     		sub	r3, r3, #1
 1589 0102 DAB2     		uxtb	r2, r3
 1590 0104 1F23     		mov	r3, #31
 1591 0106 1340     		and	r3, r2
 1592 0108 D9B2     		uxtb	r1, r3
 1593 010a 3B1C     		mov	r3, r7
 1594 010c 0F33     		add	r3, r3, #15
 1595 010e 3A1C     		mov	r2, r7
 1596 0110 0F32     		add	r2, r2, #15
 1597 0112 1278     		ldrb	r2, [r2]
 1598 0114 0A43     		orr	r2, r1
 1599 0116 1A70     		strb	r2, [r3]
 495:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 1600              		.loc 1 495 0
 1601 0118 3B4B     		ldr	r3, .L134
 1602 011a 3A1C     		mov	r2, r7
 1603 011c 0F32     		add	r2, r2, #15
 1604 011e 1278     		ldrb	r2, [r2]
 1605 0120 1A71     		strb	r2, [r3, #4]
 496:../Sources/TFC/TFC_CrystalClock.c **** 
 497:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 498:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 499:../Sources/TFC/TFC_CrystalClock.c ****   // The clock monitor is not enabled here as it has likely been enabled previously and so the valu
 500:../Sources/TFC/TFC_CrystalClock.c ****   // is not altered here.
 501:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 502:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 1606              		.loc 1 502 0
 1607 0122 394A     		ldr	r2, .L134
 1608 0124 3B1C     		mov	r3, r7
 1609 0126 0F33     		add	r3, r3, #15
 1610 0128 5279     		ldrb	r2, [r2, #5]
 1611 012a 1A70     		strb	r2, [r3]
 503:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 1612              		.loc 1 503 0
 1613 012c 3B1C     		mov	r3, r7
 1614 012e 0F33     		add	r3, r3, #15
 1615 0130 3A1C     		mov	r2, r7
 1616 0132 0F32     		add	r2, r2, #15
 1617 0134 1278     		ldrb	r2, [r2]
 1618 0136 1F21     		mov	r1, #31
 1619 0138 8A43     		bic	r2, r1
 1620 013a 1A70     		strb	r2, [r3]
 504:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 1621              		.loc 1 504 0
 1622 013c BB1C     		add	r3, r7, #2
 1623 013e 1B78     		ldrb	r3, [r3]
 1624 0140 183B     		sub	r3, r3, #24
 1625 0142 DAB2     		uxtb	r2, r3
 1626 0144 1F23     		mov	r3, #31
 1627 0146 1340     		and	r3, r2
 1628 0148 DAB2     		uxtb	r2, r3
 1629 014a 3B1C     		mov	r3, r7
 1630 014c 0F33     		add	r3, r3, #15
 1631 014e 1B78     		ldrb	r3, [r3]
 1632 0150 1343     		orr	r3, r2
 1633 0152 DAB2     		uxtb	r2, r3
 1634 0154 3B1C     		mov	r3, r7
 1635 0156 0F33     		add	r3, r3, #15
 1636 0158 4021     		mov	r1, #64
 1637 015a 0A43     		orr	r2, r1
 1638 015c 1A70     		strb	r2, [r3]
 505:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 1639              		.loc 1 505 0
 1640 015e 2A4B     		ldr	r3, .L134
 1641 0160 3A1C     		mov	r2, r7
 1642 0162 0F32     		add	r2, r2, #15
 1643 0164 1278     		ldrb	r2, [r2]
 1644 0166 5A71     		strb	r2, [r3, #5]
 506:../Sources/TFC/TFC_CrystalClock.c ****   
 507:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 508:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1645              		.loc 1 508 0
 1646 0168 3B1C     		mov	r3, r7
 1647 016a 1633     		add	r3, r3, #22
 1648 016c 0022     		mov	r2, #0
 1649 016e 1A80     		strh	r2, [r3]
 1650 0170 0DE0     		b	.L122
 1651              	.L125:
 509:../Sources/TFC/TFC_CrystalClock.c ****   {
 510:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 1652              		.loc 1 510 0
 1653 0172 254B     		ldr	r3, .L134
 1654 0174 9B79     		ldrb	r3, [r3, #6]
 1655 0176 DBB2     		uxtb	r3, r3
 1656 0178 1A1C     		mov	r2, r3
 1657 017a 2023     		mov	r3, #32
 1658 017c 1340     		and	r3, r2
 1659 017e 0ED1     		bne	.L132
 1660              	.L123:
 508:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1661              		.loc 1 508 0
 1662 0180 3B1C     		mov	r3, r7
 1663 0182 1633     		add	r3, r3, #22
 1664 0184 3A1C     		mov	r2, r7
 1665 0186 1632     		add	r2, r2, #22
 1666 0188 1288     		ldrh	r2, [r2]
 1667 018a 0132     		add	r2, r2, #1
 1668 018c 1A80     		strh	r2, [r3]
 1669              	.L122:
 508:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1670              		.loc 1 508 0 is_stmt 0 discriminator 1
 1671 018e 3B1C     		mov	r3, r7
 1672 0190 1633     		add	r3, r3, #22
 1673 0192 0021     		mov	r1, #0
 1674 0194 5A5E     		ldrsh	r2, [r3, r1]
 1675 0196 214B     		ldr	r3, .L134+20
 1676 0198 9A42     		cmp	r2, r3
 1677 019a EADD     		ble	.L125
 1678 019c 00E0     		b	.L124
 1679              	.L132:
 1680              		.loc 1 510 0 is_stmt 1
 1681 019e C046     		mov	r8, r8
 1682              	.L124:
 511:../Sources/TFC/TFC_CrystalClock.c ****   }
 512:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 1683              		.loc 1 512 0
 1684 01a0 194B     		ldr	r3, .L134
 1685 01a2 9B79     		ldrb	r3, [r3, #6]
 1686 01a4 DBB2     		uxtb	r3, r3
 1687 01a6 1A1C     		mov	r2, r3
 1688 01a8 2023     		mov	r3, #32
 1689 01aa 1340     		and	r3, r2
 1690 01ac 01D1     		bne	.L126
 1691              		.loc 1 512 0 is_stmt 0 discriminator 1
 1692 01ae 1623     		mov	r3, #22
 1693 01b0 25E0     		b	.L113
 1694              	.L126:
 513:../Sources/TFC/TFC_CrystalClock.c **** 
 514:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 515:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1695              		.loc 1 515 0 is_stmt 1
 1696 01b2 3B1C     		mov	r3, r7
 1697 01b4 1633     		add	r3, r3, #22
 1698 01b6 0022     		mov	r2, #0
 1699 01b8 1A80     		strh	r2, [r3]
 1700 01ba 0DE0     		b	.L127
 1701              	.L130:
 516:../Sources/TFC/TFC_CrystalClock.c ****   {
 517:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1702              		.loc 1 517 0
 1703 01bc 124B     		ldr	r3, .L134
 1704 01be 9B79     		ldrb	r3, [r3, #6]
 1705 01c0 DBB2     		uxtb	r3, r3
 1706 01c2 1A1C     		mov	r2, r3
 1707 01c4 4023     		mov	r3, #64
 1708 01c6 1340     		and	r3, r2
 1709 01c8 0ED1     		bne	.L133
 1710              	.L128:
 515:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1711              		.loc 1 515 0
 1712 01ca 3B1C     		mov	r3, r7
 1713 01cc 1633     		add	r3, r3, #22
 1714 01ce 3A1C     		mov	r2, r7
 1715 01d0 1632     		add	r2, r2, #22
 1716 01d2 1288     		ldrh	r2, [r2]
 1717 01d4 0132     		add	r2, r2, #1
 1718 01d6 1A80     		strh	r2, [r3]
 1719              	.L127:
 515:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1720              		.loc 1 515 0 is_stmt 0 discriminator 1
 1721 01d8 3B1C     		mov	r3, r7
 1722 01da 1633     		add	r3, r3, #22
 1723 01dc 0021     		mov	r1, #0
 1724 01de 5A5E     		ldrsh	r2, [r3, r1]
 1725 01e0 0E4B     		ldr	r3, .L134+20
 1726 01e2 9A42     		cmp	r2, r3
 1727 01e4 EADD     		ble	.L130
 1728 01e6 00E0     		b	.L129
 1729              	.L133:
 1730              		.loc 1 517 0 is_stmt 1
 1731 01e8 C046     		mov	r8, r8
 1732              	.L129:
 518:../Sources/TFC/TFC_CrystalClock.c ****   }
 519:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1733              		.loc 1 519 0
 1734 01ea 074B     		ldr	r3, .L134
 1735 01ec 9B79     		ldrb	r3, [r3, #6]
 1736 01ee DBB2     		uxtb	r3, r3
 1737 01f0 1A1C     		mov	r2, r3
 1738 01f2 4023     		mov	r3, #64
 1739 01f4 1340     		and	r3, r2
 1740 01f6 01D1     		bne	.L131
 1741              		.loc 1 519 0 is_stmt 0 discriminator 1
 1742 01f8 4423     		mov	r3, #68
 1743 01fa 00E0     		b	.L113
 1744              	.L131:
 520:../Sources/TFC/TFC_CrystalClock.c ****     
 521:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 522:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1745              		.loc 1 522 0 is_stmt 1
 1746 01fc 7B68     		ldr	r3, [r7, #4]
 1747              	.L113:
 523:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_pbe
 1748              		.loc 1 523 0
 1749 01fe 181C     		mov	r0, r3
 1750 0200 BD46     		mov	sp, r7
 1751 0202 06B0     		add	sp, sp, #24
 1752              		@ sp needed for prologue
 1753 0204 80BD     		pop	{r7, pc}
 1754              	.L135:
 1755 0206 C046     		.align	2
 1756              	.L134:
 1757 0208 00400640 		.word	1074151424
 1758 020c 7F841E00 		.word	1999999
 1759 0210 00093D00 		.word	4000000
 1760 0214 FF6BDC02 		.word	47999999
 1761 0218 00E1F505 		.word	100000000
 1762 021c CF070000 		.word	1999
 1763              		.cfi_endproc
 1764              	.LFE5:
 1766              		.section	.text.pbe_blpe,"ax",%progbits
 1767              		.align	2
 1768              		.global	pbe_blpe
 1769              		.code	16
 1770              		.thumb_func
 1772              	pbe_blpe:
 1773              	.LFB6:
 524:../Sources/TFC/TFC_CrystalClock.c **** 
 525:../Sources/TFC/TFC_CrystalClock.c **** 
 526:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val)
 527:../Sources/TFC/TFC_CrystalClock.c **** {
 1774              		.loc 1 527 0
 1775              		.cfi_startproc
 1776 0000 80B5     		push	{r7, lr}
 1777              	.LCFI18:
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 82B0     		sub	sp, sp, #8
 1782              	.LCFI19:
 1783              		.cfi_def_cfa_offset 16
 1784 0004 00AF     		add	r7, sp, #0
 1785              	.LCFI20:
 1786              		.cfi_def_cfa_register 7
 1787 0006 7860     		str	r0, [r7, #4]
 528:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 529:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1788              		.loc 1 529 0
 1789 0008 164B     		ldr	r3, .L140
 1790 000a 9B79     		ldrb	r3, [r3, #6]
 1791 000c DBB2     		uxtb	r3, r3
 1792 000e 1A1C     		mov	r2, r3
 1793 0010 0C23     		mov	r3, #12
 1794 0012 1340     		and	r3, r2
 1795 0014 9B08     		lsr	r3, r3, #2
 1796 0016 022B     		cmp	r3, #2
 1797 0018 14D1     		bne	.L137
 530:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1798              		.loc 1 530 0 discriminator 1
 1799 001a 124B     		ldr	r3, .L140
 1800 001c 9B79     		ldrb	r3, [r3, #6]
 1801 001e DBB2     		uxtb	r3, r3
 1802 0020 1A1C     		mov	r2, r3
 1803 0022 1023     		mov	r3, #16
 1804 0024 1340     		and	r3, r2
 529:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1805              		.loc 1 529 0 discriminator 1
 1806 0026 0DD1     		bne	.L137
 531:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1807              		.loc 1 531 0
 1808 0028 0E4B     		ldr	r3, .L140
 1809 002a 9B79     		ldrb	r3, [r3, #6]
 1810 002c DBB2     		uxtb	r3, r3
 1811 002e 1A1C     		mov	r2, r3
 1812 0030 2023     		mov	r3, #32
 1813 0032 1340     		and	r3, r2
 530:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1814              		.loc 1 530 0
 1815 0034 06D0     		beq	.L137
 532:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1816              		.loc 1 532 0
 1817 0036 0B4B     		ldr	r3, .L140
 1818 0038 5B78     		ldrb	r3, [r3, #1]
 1819 003a DBB2     		uxtb	r3, r3
 1820 003c 1A1C     		mov	r2, r3
 1821 003e 0223     		mov	r3, #2
 1822 0040 1340     		and	r3, r2
 529:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1823              		.loc 1 529 0
 1824 0042 01D0     		beq	.L138
 1825              	.L137:
 533:../Sources/TFC/TFC_CrystalClock.c ****   {
 534:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1826              		.loc 1 534 0
 1827 0044 0723     		mov	r3, #7
 1828 0046 08E0     		b	.L139
 1829              	.L138:
 535:../Sources/TFC/TFC_CrystalClock.c ****   }
 536:../Sources/TFC/TFC_CrystalClock.c ****   
 537:../Sources/TFC/TFC_CrystalClock.c **** // To enter BLPE mode the LP bit must be set, disabling the PLL  
 538:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 1830              		.loc 1 538 0
 1831 0048 064B     		ldr	r3, .L140
 1832 004a 064A     		ldr	r2, .L140
 1833 004c 5278     		ldrb	r2, [r2, #1]
 1834 004e D2B2     		uxtb	r2, r2
 1835 0050 0221     		mov	r1, #2
 1836 0052 0A43     		orr	r2, r1
 1837 0054 D2B2     		uxtb	r2, r2
 1838 0056 5A70     		strb	r2, [r3, #1]
 539:../Sources/TFC/TFC_CrystalClock.c ****   
 540:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPE mode
 541:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;  
 1839              		.loc 1 541 0
 1840 0058 7B68     		ldr	r3, [r7, #4]
 1841              	.L139:
 542:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_blpe
 1842              		.loc 1 542 0
 1843 005a 181C     		mov	r0, r3
 1844 005c BD46     		mov	sp, r7
 1845 005e 02B0     		add	sp, sp, #8
 1846              		@ sp needed for prologue
 1847 0060 80BD     		pop	{r7, pc}
 1848              	.L141:
 1849 0062 C046     		.align	2
 1850              	.L140:
 1851 0064 00400640 		.word	1074151424
 1852              		.cfi_endproc
 1853              	.LFE6:
 1855              		.section	.text.blpe_pbe,"ax",%progbits
 1856              		.align	2
 1857              		.global	blpe_pbe
 1858              		.code	16
 1859              		.thumb_func
 1861              	blpe_pbe:
 1862              	.LFB7:
 543:../Sources/TFC/TFC_CrystalClock.c **** 
 544:../Sources/TFC/TFC_CrystalClock.c **** 
 545:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 546:../Sources/TFC/TFC_CrystalClock.c **** // Since PBE mode can be enterred via FBE -> BLPE modes, it cannot be assumed that the PLL has been
 547:../Sources/TFC/TFC_CrystalClock.c **** // previously configured correctly. That is why this general purpose driver has the PLL settings as
 548:../Sources/TFC/TFC_CrystalClock.c **** // passed parameters.
 549:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 550:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 551:../Sources/TFC/TFC_CrystalClock.c **** {
 1863              		.loc 1 551 0
 1864              		.cfi_startproc
 1865 0000 80B5     		push	{r7, lr}
 1866              	.LCFI21:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 84B0     		sub	sp, sp, #16
 1871              	.LCFI22:
 1872              		.cfi_def_cfa_offset 24
 1873 0004 00AF     		add	r7, sp, #0
 1874              	.LCFI23:
 1875              		.cfi_def_cfa_register 7
 1876 0006 7860     		str	r0, [r7, #4]
 1877 0008 FB1C     		add	r3, r7, #3
 1878 000a 1970     		strb	r1, [r3]
 1879 000c BB1C     		add	r3, r7, #2
 1880 000e 1A70     		strb	r2, [r3]
 552:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 553:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 554:../Sources/TFC/TFC_CrystalClock.c ****   
 555:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 556:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1881              		.loc 1 556 0
 1882 0010 724B     		ldr	r3, .L164
 1883 0012 9B79     		ldrb	r3, [r3, #6]
 1884 0014 DBB2     		uxtb	r3, r3
 1885 0016 1A1C     		mov	r2, r3
 1886 0018 0C23     		mov	r3, #12
 1887 001a 1340     		and	r3, r2
 1888 001c 9B08     		lsr	r3, r3, #2
 1889 001e 022B     		cmp	r3, #2
 1890 0020 0DD1     		bne	.L143
 557:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1891              		.loc 1 557 0 discriminator 1
 1892 0022 6E4B     		ldr	r3, .L164
 1893 0024 9B79     		ldrb	r3, [r3, #6]
 1894 0026 DBB2     		uxtb	r3, r3
 1895 0028 1A1C     		mov	r2, r3
 1896 002a 1023     		mov	r3, #16
 1897 002c 1340     		and	r3, r2
 556:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1898              		.loc 1 556 0 discriminator 1
 1899 002e 06D1     		bne	.L143
 558:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 1900              		.loc 1 558 0 discriminator 1
 1901 0030 6A4B     		ldr	r3, .L164
 1902 0032 5B78     		ldrb	r3, [r3, #1]
 1903 0034 DBB2     		uxtb	r3, r3
 1904 0036 1A1C     		mov	r2, r3
 1905 0038 0223     		mov	r3, #2
 1906 003a 1340     		and	r3, r2
 556:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1907              		.loc 1 556 0 discriminator 1
 1908 003c 01D1     		bne	.L144
 1909              	.L143:
 559:../Sources/TFC/TFC_CrystalClock.c ****   {
 560:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 1910              		.loc 1 560 0
 1911 003e 0623     		mov	r3, #6
 1912 0040 C7E0     		b	.L145
 1913              	.L144:
 561:../Sources/TFC/TFC_CrystalClock.c ****   }
 562:../Sources/TFC/TFC_CrystalClock.c ****   
 563:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 564:../Sources/TFC/TFC_CrystalClock.c **** 
 565:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 566:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1914              		.loc 1 566 0
 1915 0042 FB1C     		add	r3, r7, #3
 1916 0044 1B78     		ldrb	r3, [r3]
 1917 0046 5BB2     		sxtb	r3, r3
 1918 0048 002B     		cmp	r3, #0
 1919 004a 04DD     		ble	.L146
 1920              		.loc 1 566 0 is_stmt 0 discriminator 2
 1921 004c FB1C     		add	r3, r7, #3
 1922 004e 1B78     		ldrb	r3, [r3]
 1923 0050 5BB2     		sxtb	r3, r3
 1924 0052 192B     		cmp	r3, #25
 1925 0054 01DD     		ble	.L147
 1926              	.L146:
 1927              		.loc 1 566 0 discriminator 1
 1928 0056 4123     		mov	r3, #65
 1929 0058 BBE0     		b	.L145
 1930              	.L147:
 567:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1931              		.loc 1 567 0 is_stmt 1
 1932 005a BB1C     		add	r3, r7, #2
 1933 005c 1B78     		ldrb	r3, [r3]
 1934 005e 5BB2     		sxtb	r3, r3
 1935 0060 172B     		cmp	r3, #23
 1936 0062 04DD     		ble	.L148
 1937              		.loc 1 567 0 is_stmt 0 discriminator 2
 1938 0064 BB1C     		add	r3, r7, #2
 1939 0066 1B78     		ldrb	r3, [r3]
 1940 0068 5BB2     		sxtb	r3, r3
 1941 006a 322B     		cmp	r3, #50
 1942 006c 01DD     		ble	.L149
 1943              	.L148:
 1944              		.loc 1 567 0 discriminator 1
 1945 006e 4223     		mov	r3, #66
 1946 0070 AFE0     		b	.L145
 1947              	.L149:
 568:../Sources/TFC/TFC_CrystalClock.c ****   
 569:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 570:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1948              		.loc 1 570 0 is_stmt 1
 1949 0072 FB1C     		add	r3, r7, #3
 1950 0074 1B78     		ldrb	r3, [r3]
 1951 0076 5BB2     		sxtb	r3, r3
 1952 0078 7868     		ldr	r0, [r7, #4]
 1953 007a 191C     		mov	r1, r3
 1954 007c FFF7FEFF 		bl	__aeabi_idiv
 1955 0080 031C     		mov	r3, r0
 1956 0082 1A1C     		mov	r2, r3
 1957 0084 564B     		ldr	r3, .L164+4
 1958 0086 9A42     		cmp	r2, r3
 1959 0088 0BDD     		ble	.L150
 1960              		.loc 1 570 0 is_stmt 0 discriminator 2
 1961 008a FB1C     		add	r3, r7, #3
 1962 008c 1B78     		ldrb	r3, [r3]
 1963 008e 5BB2     		sxtb	r3, r3
 1964 0090 7868     		ldr	r0, [r7, #4]
 1965 0092 191C     		mov	r1, r3
 1966 0094 FFF7FEFF 		bl	__aeabi_idiv
 1967 0098 031C     		mov	r3, r0
 1968 009a 1A1C     		mov	r2, r3
 1969 009c 514B     		ldr	r3, .L164+8
 1970 009e 9A42     		cmp	r2, r3
 1971 00a0 01DD     		ble	.L151
 1972              	.L150:
 1973              		.loc 1 570 0 discriminator 1
 1974 00a2 4323     		mov	r3, #67
 1975 00a4 95E0     		b	.L145
 1976              	.L151:
 571:../Sources/TFC/TFC_CrystalClock.c ****        
 572:../Sources/TFC/TFC_CrystalClock.c **** // If PRDIV, VDIV and the PLL ref clock are in spec. then the PLL frequency is within spec.
 573:../Sources/TFC/TFC_CrystalClock.c **** 
 574:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C5
 575:../Sources/TFC/TFC_CrystalClock.c **** // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code
 576:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1977              		.loc 1 576 0 is_stmt 1
 1978 00a6 4D4A     		ldr	r2, .L164
 1979 00a8 3B1C     		mov	r3, r7
 1980 00aa 0D33     		add	r3, r3, #13
 1981 00ac 1279     		ldrb	r2, [r2, #4]
 1982 00ae 1A70     		strb	r2, [r3]
 577:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 1983              		.loc 1 577 0
 1984 00b0 3B1C     		mov	r3, r7
 1985 00b2 0D33     		add	r3, r3, #13
 1986 00b4 3A1C     		mov	r2, r7
 1987 00b6 0D32     		add	r2, r2, #13
 1988 00b8 1278     		ldrb	r2, [r2]
 1989 00ba 1F21     		mov	r1, #31
 1990 00bc 8A43     		bic	r2, r1
 1991 00be 1A70     		strb	r2, [r3]
 578:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 1992              		.loc 1 578 0
 1993 00c0 FB1C     		add	r3, r7, #3
 1994 00c2 1B78     		ldrb	r3, [r3]
 1995 00c4 013B     		sub	r3, r3, #1
 1996 00c6 DAB2     		uxtb	r2, r3
 1997 00c8 1F23     		mov	r3, #31
 1998 00ca 1340     		and	r3, r2
 1999 00cc D9B2     		uxtb	r1, r3
 2000 00ce 3B1C     		mov	r3, r7
 2001 00d0 0D33     		add	r3, r3, #13
 2002 00d2 3A1C     		mov	r2, r7
 2003 00d4 0D32     		add	r2, r2, #13
 2004 00d6 1278     		ldrb	r2, [r2]
 2005 00d8 0A43     		orr	r2, r1
 2006 00da 1A70     		strb	r2, [r3]
 579:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 2007              		.loc 1 579 0
 2008 00dc 3F4B     		ldr	r3, .L164
 2009 00de 3A1C     		mov	r2, r7
 2010 00e0 0D32     		add	r2, r2, #13
 2011 00e2 1278     		ldrb	r2, [r2]
 2012 00e4 1A71     		strb	r2, [r3, #4]
 580:../Sources/TFC/TFC_CrystalClock.c **** 
 581:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C6
 582:../Sources/TFC/TFC_CrystalClock.c **** // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 583:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor is not enabled here as it has likely been enabled previously and so the value 
 584:../Sources/TFC/TFC_CrystalClock.c **** // is not altered here.
 585:../Sources/TFC/TFC_CrystalClock.c **** // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 586:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 2013              		.loc 1 586 0
 2014 00e6 3D4A     		ldr	r2, .L164
 2015 00e8 3B1C     		mov	r3, r7
 2016 00ea 0D33     		add	r3, r3, #13
 2017 00ec 5279     		ldrb	r2, [r2, #5]
 2018 00ee 1A70     		strb	r2, [r3]
 587:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 2019              		.loc 1 587 0
 2020 00f0 3B1C     		mov	r3, r7
 2021 00f2 0D33     		add	r3, r3, #13
 2022 00f4 3A1C     		mov	r2, r7
 2023 00f6 0D32     		add	r2, r2, #13
 2024 00f8 1278     		ldrb	r2, [r2]
 2025 00fa 1F21     		mov	r1, #31
 2026 00fc 8A43     		bic	r2, r1
 2027 00fe 1A70     		strb	r2, [r3]
 588:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 2028              		.loc 1 588 0
 2029 0100 BB1C     		add	r3, r7, #2
 2030 0102 1B78     		ldrb	r3, [r3]
 2031 0104 183B     		sub	r3, r3, #24
 2032 0106 DAB2     		uxtb	r2, r3
 2033 0108 1F23     		mov	r3, #31
 2034 010a 1340     		and	r3, r2
 2035 010c DAB2     		uxtb	r2, r3
 2036 010e 3B1C     		mov	r3, r7
 2037 0110 0D33     		add	r3, r3, #13
 2038 0112 1B78     		ldrb	r3, [r3]
 2039 0114 1343     		orr	r3, r2
 2040 0116 DAB2     		uxtb	r2, r3
 2041 0118 3B1C     		mov	r3, r7
 2042 011a 0D33     		add	r3, r3, #13
 2043 011c 4021     		mov	r1, #64
 2044 011e 0A43     		orr	r2, r1
 2045 0120 1A70     		strb	r2, [r3]
 589:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 2046              		.loc 1 589 0
 2047 0122 2E4B     		ldr	r3, .L164
 2048 0124 3A1C     		mov	r2, r7
 2049 0126 0D32     		add	r2, r2, #13
 2050 0128 1278     		ldrb	r2, [r2]
 2051 012a 5A71     		strb	r2, [r3, #5]
 590:../Sources/TFC/TFC_CrystalClock.c ****   
 591:../Sources/TFC/TFC_CrystalClock.c **** // Now that PLL is configured, LP is cleared to enable the PLL
 592:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 2052              		.loc 1 592 0
 2053 012c 2B4B     		ldr	r3, .L164
 2054 012e 2B4A     		ldr	r2, .L164
 2055 0130 5278     		ldrb	r2, [r2, #1]
 2056 0132 D2B2     		uxtb	r2, r2
 2057 0134 0221     		mov	r1, #2
 2058 0136 8A43     		bic	r2, r1
 2059 0138 D2B2     		uxtb	r2, r2
 2060 013a 5A70     		strb	r2, [r3, #1]
 593:../Sources/TFC/TFC_CrystalClock.c ****   
 594:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 595:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2061              		.loc 1 595 0
 2062 013c 3B1C     		mov	r3, r7
 2063 013e 0E33     		add	r3, r3, #14
 2064 0140 0022     		mov	r2, #0
 2065 0142 1A80     		strh	r2, [r3]
 2066 0144 0DE0     		b	.L152
 2067              	.L155:
 596:../Sources/TFC/TFC_CrystalClock.c ****   {
 597:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 2068              		.loc 1 597 0
 2069 0146 254B     		ldr	r3, .L164
 2070 0148 9B79     		ldrb	r3, [r3, #6]
 2071 014a DBB2     		uxtb	r3, r3
 2072 014c 1A1C     		mov	r2, r3
 2073 014e 2023     		mov	r3, #32
 2074 0150 1340     		and	r3, r2
 2075 0152 0ED1     		bne	.L162
 2076              	.L153:
 595:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2077              		.loc 1 595 0
 2078 0154 3B1C     		mov	r3, r7
 2079 0156 0E33     		add	r3, r3, #14
 2080 0158 3A1C     		mov	r2, r7
 2081 015a 0E32     		add	r2, r2, #14
 2082 015c 1288     		ldrh	r2, [r2]
 2083 015e 0132     		add	r2, r2, #1
 2084 0160 1A80     		strh	r2, [r3]
 2085              	.L152:
 595:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2086              		.loc 1 595 0 is_stmt 0 discriminator 1
 2087 0162 3B1C     		mov	r3, r7
 2088 0164 0E33     		add	r3, r3, #14
 2089 0166 0021     		mov	r1, #0
 2090 0168 5A5E     		ldrsh	r2, [r3, r1]
 2091 016a 1F4B     		ldr	r3, .L164+12
 2092 016c 9A42     		cmp	r2, r3
 2093 016e EADD     		ble	.L155
 2094 0170 00E0     		b	.L154
 2095              	.L162:
 2096              		.loc 1 597 0 is_stmt 1
 2097 0172 C046     		mov	r8, r8
 2098              	.L154:
 598:../Sources/TFC/TFC_CrystalClock.c ****   }
 599:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 2099              		.loc 1 599 0
 2100 0174 194B     		ldr	r3, .L164
 2101 0176 9B79     		ldrb	r3, [r3, #6]
 2102 0178 DBB2     		uxtb	r3, r3
 2103 017a 1A1C     		mov	r2, r3
 2104 017c 2023     		mov	r3, #32
 2105 017e 1340     		and	r3, r2
 2106 0180 01D1     		bne	.L156
 2107              		.loc 1 599 0 is_stmt 0 discriminator 1
 2108 0182 1623     		mov	r3, #22
 2109 0184 25E0     		b	.L145
 2110              	.L156:
 600:../Sources/TFC/TFC_CrystalClock.c **** 
 601:../Sources/TFC/TFC_CrystalClock.c **** // Wait for LOCK bit to set
 602:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2111              		.loc 1 602 0 is_stmt 1
 2112 0186 3B1C     		mov	r3, r7
 2113 0188 0E33     		add	r3, r3, #14
 2114 018a 0022     		mov	r2, #0
 2115 018c 1A80     		strh	r2, [r3]
 2116 018e 0DE0     		b	.L157
 2117              	.L160:
 603:../Sources/TFC/TFC_CrystalClock.c ****   {
 604:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 2118              		.loc 1 604 0
 2119 0190 124B     		ldr	r3, .L164
 2120 0192 9B79     		ldrb	r3, [r3, #6]
 2121 0194 DBB2     		uxtb	r3, r3
 2122 0196 1A1C     		mov	r2, r3
 2123 0198 4023     		mov	r3, #64
 2124 019a 1340     		and	r3, r2
 2125 019c 0ED1     		bne	.L163
 2126              	.L158:
 602:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2127              		.loc 1 602 0
 2128 019e 3B1C     		mov	r3, r7
 2129 01a0 0E33     		add	r3, r3, #14
 2130 01a2 3A1C     		mov	r2, r7
 2131 01a4 0E32     		add	r2, r2, #14
 2132 01a6 1288     		ldrh	r2, [r2]
 2133 01a8 0132     		add	r2, r2, #1
 2134 01aa 1A80     		strh	r2, [r3]
 2135              	.L157:
 602:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2136              		.loc 1 602 0 is_stmt 0 discriminator 1
 2137 01ac 3B1C     		mov	r3, r7
 2138 01ae 0E33     		add	r3, r3, #14
 2139 01b0 0021     		mov	r1, #0
 2140 01b2 5A5E     		ldrsh	r2, [r3, r1]
 2141 01b4 0C4B     		ldr	r3, .L164+12
 2142 01b6 9A42     		cmp	r2, r3
 2143 01b8 EADD     		ble	.L160
 2144 01ba 00E0     		b	.L159
 2145              	.L163:
 2146              		.loc 1 604 0 is_stmt 1
 2147 01bc C046     		mov	r8, r8
 2148              	.L159:
 605:../Sources/TFC/TFC_CrystalClock.c ****   }
 606:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 2149              		.loc 1 606 0
 2150 01be 074B     		ldr	r3, .L164
 2151 01c0 9B79     		ldrb	r3, [r3, #6]
 2152 01c2 DBB2     		uxtb	r3, r3
 2153 01c4 1A1C     		mov	r2, r3
 2154 01c6 4023     		mov	r3, #64
 2155 01c8 1340     		and	r3, r2
 2156 01ca 01D1     		bne	.L161
 2157              		.loc 1 606 0 is_stmt 0 discriminator 1
 2158 01cc 4423     		mov	r3, #68
 2159 01ce 00E0     		b	.L145
 2160              	.L161:
 607:../Sources/TFC/TFC_CrystalClock.c **** 
 608:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 609:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 2161              		.loc 1 609 0 is_stmt 1
 2162 01d0 7B68     		ldr	r3, [r7, #4]
 2163              	.L145:
 610:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_pbe
 2164              		.loc 1 610 0
 2165 01d2 181C     		mov	r0, r3
 2166 01d4 BD46     		mov	sp, r7
 2167 01d6 04B0     		add	sp, sp, #16
 2168              		@ sp needed for prologue
 2169 01d8 80BD     		pop	{r7, pc}
 2170              	.L165:
 2171 01da C046     		.align	2
 2172              	.L164:
 2173 01dc 00400640 		.word	1074151424
 2174 01e0 7F841E00 		.word	1999999
 2175 01e4 00093D00 		.word	4000000
 2176 01e8 CF070000 		.word	1999
 2177              		.cfi_endproc
 2178              	.LFE7:
 2180              		.section	.text.blpe_fbe,"ax",%progbits
 2181              		.align	2
 2182              		.global	blpe_fbe
 2183              		.code	16
 2184              		.thumb_func
 2186              	blpe_fbe:
 2187              	.LFB8:
 611:../Sources/TFC/TFC_CrystalClock.c **** 
 612:../Sources/TFC/TFC_CrystalClock.c **** 
 613:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val)
 614:../Sources/TFC/TFC_CrystalClock.c **** {
 2188              		.loc 1 614 0
 2189              		.cfi_startproc
 2190 0000 80B5     		push	{r7, lr}
 2191              	.LCFI24:
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 7, -8
 2194              		.cfi_offset 14, -4
 2195 0002 84B0     		sub	sp, sp, #16
 2196              	.LCFI25:
 2197              		.cfi_def_cfa_offset 24
 2198 0004 00AF     		add	r7, sp, #0
 2199              	.LCFI26:
 2200              		.cfi_def_cfa_register 7
 2201 0006 7860     		str	r0, [r7, #4]
 615:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 616:../Sources/TFC/TFC_CrystalClock.c ****   
 617:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 618:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2202              		.loc 1 618 0
 2203 0008 294B     		ldr	r3, .L176
 2204 000a 9B79     		ldrb	r3, [r3, #6]
 2205 000c DBB2     		uxtb	r3, r3
 2206 000e 1A1C     		mov	r2, r3
 2207 0010 0C23     		mov	r3, #12
 2208 0012 1340     		and	r3, r2
 2209 0014 9B08     		lsr	r3, r3, #2
 2210 0016 022B     		cmp	r3, #2
 2211 0018 0DD1     		bne	.L167
 619:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2212              		.loc 1 619 0 discriminator 1
 2213 001a 254B     		ldr	r3, .L176
 2214 001c 9B79     		ldrb	r3, [r3, #6]
 2215 001e DBB2     		uxtb	r3, r3
 2216 0020 1A1C     		mov	r2, r3
 2217 0022 1023     		mov	r3, #16
 2218 0024 1340     		and	r3, r2
 618:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2219              		.loc 1 618 0 discriminator 1
 2220 0026 06D1     		bne	.L167
 620:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 2221              		.loc 1 620 0 discriminator 1
 2222 0028 214B     		ldr	r3, .L176
 2223 002a 5B78     		ldrb	r3, [r3, #1]
 2224 002c DBB2     		uxtb	r3, r3
 2225 002e 1A1C     		mov	r2, r3
 2226 0030 0223     		mov	r3, #2
 2227 0032 1340     		and	r3, r2
 618:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2228              		.loc 1 618 0 discriminator 1
 2229 0034 01D1     		bne	.L168
 2230              	.L167:
 621:../Sources/TFC/TFC_CrystalClock.c ****   {
 622:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 2231              		.loc 1 622 0
 2232 0036 0623     		mov	r3, #6
 2233 0038 35E0     		b	.L169
 2234              	.L168:
 623:../Sources/TFC/TFC_CrystalClock.c ****   }
 624:../Sources/TFC/TFC_CrystalClock.c ****  
 625:../Sources/TFC/TFC_CrystalClock.c **** // To move from BLPE to FBE the PLLS mux be set to select the FLL output and the LP bit must be cle
 626:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to select the FLL
 2235              		.loc 1 626 0
 2236 003a 1D4B     		ldr	r3, .L176
 2237 003c 1C4A     		ldr	r2, .L176
 2238 003e 5279     		ldrb	r2, [r2, #5]
 2239 0040 D2B2     		uxtb	r2, r2
 2240 0042 4021     		mov	r1, #64
 2241 0044 8A43     		bic	r2, r1
 2242 0046 D2B2     		uxtb	r2, r2
 2243 0048 5A71     		strb	r2, [r3, #5]
 627:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK; // clear LP bit  
 2244              		.loc 1 627 0
 2245 004a 194B     		ldr	r3, .L176
 2246 004c 184A     		ldr	r2, .L176
 2247 004e 5278     		ldrb	r2, [r2, #1]
 2248 0050 D2B2     		uxtb	r2, r2
 2249 0052 0221     		mov	r1, #2
 2250 0054 8A43     		bic	r2, r1
 2251 0056 D2B2     		uxtb	r2, r2
 2252 0058 5A70     		strb	r2, [r3, #1]
 628:../Sources/TFC/TFC_CrystalClock.c **** 
 629:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to clear
 630:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2253              		.loc 1 630 0
 2254 005a 3B1C     		mov	r3, r7
 2255 005c 0E33     		add	r3, r3, #14
 2256 005e 0022     		mov	r2, #0
 2257 0060 1A80     		strh	r2, [r3]
 2258 0062 0DE0     		b	.L170
 2259              	.L173:
 631:../Sources/TFC/TFC_CrystalClock.c ****   {
 632:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 2260              		.loc 1 632 0
 2261 0064 124B     		ldr	r3, .L176
 2262 0066 9B79     		ldrb	r3, [r3, #6]
 2263 0068 DBB2     		uxtb	r3, r3
 2264 006a 1A1C     		mov	r2, r3
 2265 006c 2023     		mov	r3, #32
 2266 006e 1340     		and	r3, r2
 2267 0070 0ED0     		beq	.L175
 2268              	.L171:
 630:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2269              		.loc 1 630 0
 2270 0072 3B1C     		mov	r3, r7
 2271 0074 0E33     		add	r3, r3, #14
 2272 0076 3A1C     		mov	r2, r7
 2273 0078 0E32     		add	r2, r2, #14
 2274 007a 1288     		ldrh	r2, [r2]
 2275 007c 0132     		add	r2, r2, #1
 2276 007e 1A80     		strh	r2, [r3]
 2277              	.L170:
 630:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2278              		.loc 1 630 0 is_stmt 0 discriminator 1
 2279 0080 3B1C     		mov	r3, r7
 2280 0082 0E33     		add	r3, r3, #14
 2281 0084 0021     		mov	r1, #0
 2282 0086 5A5E     		ldrsh	r2, [r3, r1]
 2283 0088 0A4B     		ldr	r3, .L176+4
 2284 008a 9A42     		cmp	r2, r3
 2285 008c EADD     		ble	.L173
 2286 008e 00E0     		b	.L172
 2287              	.L175:
 2288              		.loc 1 632 0 is_stmt 1
 2289 0090 C046     		mov	r8, r8
 2290              	.L172:
 633:../Sources/TFC/TFC_CrystalClock.c ****   }
 634:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 2291              		.loc 1 634 0
 2292 0092 074B     		ldr	r3, .L176
 2293 0094 9B79     		ldrb	r3, [r3, #6]
 2294 0096 DBB2     		uxtb	r3, r3
 2295 0098 1A1C     		mov	r2, r3
 2296 009a 2023     		mov	r3, #32
 2297 009c 1340     		and	r3, r2
 2298 009e 01D0     		beq	.L174
 2299              		.loc 1 634 0 is_stmt 0 discriminator 1
 2300 00a0 1523     		mov	r3, #21
 2301 00a2 00E0     		b	.L169
 2302              	.L174:
 635:../Sources/TFC/TFC_CrystalClock.c ****   
 636:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 637:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2303              		.loc 1 637 0 is_stmt 1
 2304 00a4 7B68     		ldr	r3, [r7, #4]
 2305              	.L169:
 638:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_fbe
 2306              		.loc 1 638 0
 2307 00a6 181C     		mov	r0, r3
 2308 00a8 BD46     		mov	sp, r7
 2309 00aa 04B0     		add	sp, sp, #16
 2310              		@ sp needed for prologue
 2311 00ac 80BD     		pop	{r7, pc}
 2312              	.L177:
 2313 00ae C046     		.align	2
 2314              	.L176:
 2315 00b0 00400640 		.word	1074151424
 2316 00b4 CF070000 		.word	1999
 2317              		.cfi_endproc
 2318              	.LFE8:
 2320              		.section	.text.fbe_blpe,"ax",%progbits
 2321              		.align	2
 2322              		.global	fbe_blpe
 2323              		.code	16
 2324              		.thumb_func
 2326              	fbe_blpe:
 2327              	.LFB9:
 639:../Sources/TFC/TFC_CrystalClock.c **** 
 640:../Sources/TFC/TFC_CrystalClock.c **** 
 641:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val)
 642:../Sources/TFC/TFC_CrystalClock.c **** {
 2328              		.loc 1 642 0
 2329              		.cfi_startproc
 2330 0000 80B5     		push	{r7, lr}
 2331              	.LCFI27:
 2332              		.cfi_def_cfa_offset 8
 2333              		.cfi_offset 7, -8
 2334              		.cfi_offset 14, -4
 2335 0002 82B0     		sub	sp, sp, #8
 2336              	.LCFI28:
 2337              		.cfi_def_cfa_offset 16
 2338 0004 00AF     		add	r7, sp, #0
 2339              	.LCFI29:
 2340              		.cfi_def_cfa_register 7
 2341 0006 7860     		str	r0, [r7, #4]
 643:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 644:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2342              		.loc 1 644 0
 2343 0008 164B     		ldr	r3, .L182
 2344 000a 9B79     		ldrb	r3, [r3, #6]
 2345 000c DBB2     		uxtb	r3, r3
 2346 000e 1A1C     		mov	r2, r3
 2347 0010 0C23     		mov	r3, #12
 2348 0012 1340     		and	r3, r2
 2349 0014 9B08     		lsr	r3, r3, #2
 2350 0016 022B     		cmp	r3, #2
 2351 0018 14D1     		bne	.L179
 645:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2352              		.loc 1 645 0 discriminator 1
 2353 001a 124B     		ldr	r3, .L182
 2354 001c 9B79     		ldrb	r3, [r3, #6]
 2355 001e DBB2     		uxtb	r3, r3
 2356 0020 1A1C     		mov	r2, r3
 2357 0022 1023     		mov	r3, #16
 2358 0024 1340     		and	r3, r2
 644:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2359              		.loc 1 644 0 discriminator 1
 2360 0026 0DD1     		bne	.L179
 646:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2361              		.loc 1 646 0
 2362 0028 0E4B     		ldr	r3, .L182
 2363 002a 9B79     		ldrb	r3, [r3, #6]
 2364 002c DBB2     		uxtb	r3, r3
 2365 002e 1A1C     		mov	r2, r3
 2366 0030 2023     		mov	r3, #32
 2367 0032 1340     		and	r3, r2
 645:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2368              		.loc 1 645 0
 2369 0034 06D1     		bne	.L179
 647:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2370              		.loc 1 647 0
 2371 0036 0B4B     		ldr	r3, .L182
 2372 0038 5B78     		ldrb	r3, [r3, #1]
 2373 003a DBB2     		uxtb	r3, r3
 2374 003c 1A1C     		mov	r2, r3
 2375 003e 0223     		mov	r3, #2
 2376 0040 1340     		and	r3, r2
 644:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2377              		.loc 1 644 0
 2378 0042 01D0     		beq	.L180
 2379              	.L179:
 648:../Sources/TFC/TFC_CrystalClock.c ****   {
 649:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2380              		.loc 1 649 0
 2381 0044 0423     		mov	r3, #4
 2382 0046 08E0     		b	.L181
 2383              	.L180:
 650:../Sources/TFC/TFC_CrystalClock.c ****   }
 651:../Sources/TFC/TFC_CrystalClock.c ****  
 652:../Sources/TFC/TFC_CrystalClock.c **** // To move from FBE to BLPE the LP bit must be set
 653:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK; // set LP bit  
 2384              		.loc 1 653 0
 2385 0048 064B     		ldr	r3, .L182
 2386 004a 064A     		ldr	r2, .L182
 2387 004c 5278     		ldrb	r2, [r2, #1]
 2388 004e D2B2     		uxtb	r2, r2
 2389 0050 0221     		mov	r1, #2
 2390 0052 0A43     		orr	r2, r1
 2391 0054 D2B2     		uxtb	r2, r2
 2392 0056 5A70     		strb	r2, [r3, #1]
 654:../Sources/TFC/TFC_CrystalClock.c ****  
 655:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 656:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2393              		.loc 1 656 0
 2394 0058 7B68     		ldr	r3, [r7, #4]
 2395              	.L181:
 657:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_blpe
 2396              		.loc 1 657 0
 2397 005a 181C     		mov	r0, r3
 2398 005c BD46     		mov	sp, r7
 2399 005e 02B0     		add	sp, sp, #8
 2400              		@ sp needed for prologue
 2401 0060 80BD     		pop	{r7, pc}
 2402              	.L183:
 2403 0062 C046     		.align	2
 2404              	.L182:
 2405 0064 00400640 		.word	1074151424
 2406              		.cfi_endproc
 2407              	.LFE9:
 2409              		.section	.text.fbe_fei,"ax",%progbits
 2410              		.align	2
 2411              		.global	fbe_fei
 2412              		.code	16
 2413              		.thumb_func
 2415              	fbe_fei:
 2416              	.LFB10:
 658:../Sources/TFC/TFC_CrystalClock.c **** 
 659:../Sources/TFC/TFC_CrystalClock.c **** 
 660:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq)
 661:../Sources/TFC/TFC_CrystalClock.c **** {
 2417              		.loc 1 661 0
 2418              		.cfi_startproc
 2419 0000 80B5     		push	{r7, lr}
 2420              	.LCFI30:
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 86B0     		sub	sp, sp, #24
 2425              	.LCFI31:
 2426              		.cfi_def_cfa_offset 32
 2427 0004 00AF     		add	r7, sp, #0
 2428              	.LCFI32:
 2429              		.cfi_def_cfa_register 7
 2430 0006 7860     		str	r0, [r7, #4]
 662:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 663:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 664:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 665:../Sources/TFC/TFC_CrystalClock.c ****   
 666:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 667:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2431              		.loc 1 667 0
 2432 0008 534B     		ldr	r3, .L203
 2433 000a 9B79     		ldrb	r3, [r3, #6]
 2434 000c DBB2     		uxtb	r3, r3
 2435 000e 1A1C     		mov	r2, r3
 2436 0010 0C23     		mov	r3, #12
 2437 0012 1340     		and	r3, r2
 2438 0014 9B08     		lsr	r3, r3, #2
 2439 0016 022B     		cmp	r3, #2
 2440 0018 14D1     		bne	.L185
 668:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2441              		.loc 1 668 0 discriminator 1
 2442 001a 4F4B     		ldr	r3, .L203
 2443 001c 9B79     		ldrb	r3, [r3, #6]
 2444 001e DBB2     		uxtb	r3, r3
 2445 0020 1A1C     		mov	r2, r3
 2446 0022 1023     		mov	r3, #16
 2447 0024 1340     		and	r3, r2
 667:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2448              		.loc 1 667 0 discriminator 1
 2449 0026 0DD1     		bne	.L185
 669:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2450              		.loc 1 669 0
 2451 0028 4B4B     		ldr	r3, .L203
 2452 002a 9B79     		ldrb	r3, [r3, #6]
 2453 002c DBB2     		uxtb	r3, r3
 2454 002e 1A1C     		mov	r2, r3
 2455 0030 2023     		mov	r3, #32
 2456 0032 1340     		and	r3, r2
 668:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2457              		.loc 1 668 0
 2458 0034 06D1     		bne	.L185
 670:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2459              		.loc 1 670 0
 2460 0036 484B     		ldr	r3, .L203
 2461 0038 5B78     		ldrb	r3, [r3, #1]
 2462 003a DBB2     		uxtb	r3, r3
 2463 003c 1A1C     		mov	r2, r3
 2464 003e 0223     		mov	r3, #2
 2465 0040 1340     		and	r3, r2
 667:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2466              		.loc 1 667 0
 2467 0042 01D0     		beq	.L186
 2468              	.L185:
 671:../Sources/TFC/TFC_CrystalClock.c ****   {
 672:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2469              		.loc 1 672 0
 2470 0044 0423     		mov	r3, #4
 2471 0046 83E0     		b	.L187
 2472              	.L186:
 673:../Sources/TFC/TFC_CrystalClock.c ****   }
 674:../Sources/TFC/TFC_CrystalClock.c **** 
 675:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
 676:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 2473              		.loc 1 676 0
 2474 0048 7A68     		ldr	r2, [r7, #4]
 2475 004a 444B     		ldr	r3, .L203+4
 2476 004c 9A42     		cmp	r2, r3
 2477 004e 03DD     		ble	.L188
 2478              		.loc 1 676 0 is_stmt 0 discriminator 1
 2479 0050 7A68     		ldr	r2, [r7, #4]
 2480 0052 434B     		ldr	r3, .L203+8
 2481 0054 9A42     		cmp	r2, r3
 2482 0056 01DD     		ble	.L189
 2483              	.L188:
 677:../Sources/TFC/TFC_CrystalClock.c ****   {
 678:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 2484              		.loc 1 678 0 is_stmt 1
 2485 0058 3123     		mov	r3, #49
 2486 005a 79E0     		b	.L187
 2487              	.L189:
 679:../Sources/TFC/TFC_CrystalClock.c ****   }
 680:../Sources/TFC/TFC_CrystalClock.c ****   
 681:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 682:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 2488              		.loc 1 682 0
 2489 005c 7B68     		ldr	r3, [r7, #4]
 2490 005e 181C     		mov	r0, r3
 2491 0060 FFF7FEFF 		bl	fll_freq
 2492 0064 031C     		mov	r3, r0
 2493 0066 3B61     		str	r3, [r7, #16]
 683:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 2494              		.loc 1 683 0
 2495 0068 3B69     		ldr	r3, [r7, #16]
 2496 006a 3B2B     		cmp	r3, #59
 2497 006c 01DC     		bgt	.L190
 2498              		.loc 1 683 0 is_stmt 0 discriminator 1
 2499 006e 3B69     		ldr	r3, [r7, #16]
 2500 0070 6EE0     		b	.L187
 2501              	.L190:
 684:../Sources/TFC/TFC_CrystalClock.c **** 
 685:../Sources/TFC/TFC_CrystalClock.c **** // Need to make sure the clockmonitor is disabled before moving to an "internal" clock mode
 686:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK; //This assumes OSC0 is used as the external clock source
 2502              		.loc 1 686 0 is_stmt 1
 2503 0072 394B     		ldr	r3, .L203
 2504 0074 384A     		ldr	r2, .L203
 2505 0076 5279     		ldrb	r2, [r2, #5]
 2506 0078 D2B2     		uxtb	r2, r2
 2507 007a 2021     		mov	r1, #32
 2508 007c 8A43     		bic	r2, r1
 2509 007e D2B2     		uxtb	r2, r2
 2510 0080 5A71     		strb	r2, [r3, #5]
 687:../Sources/TFC/TFC_CrystalClock.c ****   
 688:../Sources/TFC/TFC_CrystalClock.c **** // Move to FEI by setting CLKS to 0 and enabling the slow IRC as the FLL reference clock
 689:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2511              		.loc 1 689 0
 2512 0082 354A     		ldr	r2, .L203
 2513 0084 3B1C     		mov	r3, r7
 2514 0086 0F33     		add	r3, r3, #15
 2515 0088 1278     		ldrb	r2, [r2]
 2516 008a 1A70     		strb	r2, [r3]
 690:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 2517              		.loc 1 690 0
 2518 008c 3B1C     		mov	r3, r7
 2519 008e 0F33     		add	r3, r3, #15
 2520 0090 3A1C     		mov	r2, r7
 2521 0092 0F32     		add	r2, r2, #15
 2522 0094 1178     		ldrb	r1, [r2]
 2523 0096 3F22     		mov	r2, #63
 2524 0098 0A40     		and	r2, r1
 2525 009a 1A70     		strb	r2, [r3]
 691:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // select internal reference clock
 2526              		.loc 1 691 0
 2527 009c 3B1C     		mov	r3, r7
 2528 009e 0F33     		add	r3, r3, #15
 2529 00a0 3A1C     		mov	r2, r7
 2530 00a2 0F32     		add	r2, r2, #15
 2531 00a4 1278     		ldrb	r2, [r2]
 2532 00a6 0421     		mov	r1, #4
 2533 00a8 0A43     		orr	r2, r1
 2534 00aa 1A70     		strb	r2, [r3]
 692:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1 
 2535              		.loc 1 692 0
 2536 00ac 2A4B     		ldr	r3, .L203
 2537 00ae 3A1C     		mov	r2, r7
 2538 00b0 0F32     		add	r2, r2, #15
 2539 00b2 1278     		ldrb	r2, [r2]
 2540 00b4 1A70     		strb	r2, [r3]
 693:../Sources/TFC/TFC_CrystalClock.c ****   
 694:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
 695:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2541              		.loc 1 695 0
 2542 00b6 3B1C     		mov	r3, r7
 2543 00b8 1633     		add	r3, r3, #22
 2544 00ba 0022     		mov	r2, #0
 2545 00bc 1A80     		strh	r2, [r3]
 2546 00be 0DE0     		b	.L191
 2547              	.L194:
 696:../Sources/TFC/TFC_CrystalClock.c ****   {
 697:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 2548              		.loc 1 697 0
 2549 00c0 254B     		ldr	r3, .L203
 2550 00c2 9B79     		ldrb	r3, [r3, #6]
 2551 00c4 DBB2     		uxtb	r3, r3
 2552 00c6 1A1C     		mov	r2, r3
 2553 00c8 1023     		mov	r3, #16
 2554 00ca 1340     		and	r3, r2
 2555 00cc 0ED1     		bne	.L201
 2556              	.L192:
 695:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2557              		.loc 1 695 0
 2558 00ce 3B1C     		mov	r3, r7
 2559 00d0 1633     		add	r3, r3, #22
 2560 00d2 3A1C     		mov	r2, r7
 2561 00d4 1632     		add	r2, r2, #22
 2562 00d6 1288     		ldrh	r2, [r2]
 2563 00d8 0132     		add	r2, r2, #1
 2564 00da 1A80     		strh	r2, [r3]
 2565              	.L191:
 695:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2566              		.loc 1 695 0 is_stmt 0 discriminator 1
 2567 00dc 3B1C     		mov	r3, r7
 2568 00de 1633     		add	r3, r3, #22
 2569 00e0 0021     		mov	r1, #0
 2570 00e2 5A5E     		ldrsh	r2, [r3, r1]
 2571 00e4 1F4B     		ldr	r3, .L203+12
 2572 00e6 9A42     		cmp	r2, r3
 2573 00e8 EADD     		ble	.L194
 2574 00ea 00E0     		b	.L193
 2575              	.L201:
 2576              		.loc 1 697 0 is_stmt 1
 2577 00ec C046     		mov	r8, r8
 2578              	.L193:
 698:../Sources/TFC/TFC_CrystalClock.c ****   }
 699:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 2579              		.loc 1 699 0
 2580 00ee 1A4B     		ldr	r3, .L203
 2581 00f0 9B79     		ldrb	r3, [r3, #6]
 2582 00f2 DBB2     		uxtb	r3, r3
 2583 00f4 1A1C     		mov	r2, r3
 2584 00f6 1023     		mov	r3, #16
 2585 00f8 1340     		and	r3, r2
 2586 00fa 01D1     		bne	.L195
 2587              		.loc 1 699 0 is_stmt 0 discriminator 1
 2588 00fc 1223     		mov	r3, #18
 2589 00fe 27E0     		b	.L187
 2590              	.L195:
 700:../Sources/TFC/TFC_CrystalClock.c ****   
 701:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 702:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2591              		.loc 1 702 0 is_stmt 1
 2592 0100 3B1C     		mov	r3, r7
 2593 0102 1633     		add	r3, r3, #22
 2594 0104 0022     		mov	r2, #0
 2595 0106 1A80     		strh	r2, [r3]
 2596 0108 0EE0     		b	.L196
 2597              	.L199:
 703:../Sources/TFC/TFC_CrystalClock.c ****   {
 704:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 2598              		.loc 1 704 0
 2599 010a 134B     		ldr	r3, .L203
 2600 010c 9B79     		ldrb	r3, [r3, #6]
 2601 010e DBB2     		uxtb	r3, r3
 2602 0110 1A1C     		mov	r2, r3
 2603 0112 0C23     		mov	r3, #12
 2604 0114 1340     		and	r3, r2
 2605 0116 9B08     		lsr	r3, r3, #2
 2606 0118 0ED0     		beq	.L202
 2607              	.L197:
 702:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2608              		.loc 1 702 0
 2609 011a 3B1C     		mov	r3, r7
 2610 011c 1633     		add	r3, r3, #22
 2611 011e 3A1C     		mov	r2, r7
 2612 0120 1632     		add	r2, r2, #22
 2613 0122 1288     		ldrh	r2, [r2]
 2614 0124 0132     		add	r2, r2, #1
 2615 0126 1A80     		strh	r2, [r3]
 2616              	.L196:
 702:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2617              		.loc 1 702 0 is_stmt 0 discriminator 1
 2618 0128 3B1C     		mov	r3, r7
 2619 012a 1633     		add	r3, r3, #22
 2620 012c 0021     		mov	r1, #0
 2621 012e 5A5E     		ldrsh	r2, [r3, r1]
 2622 0130 0C4B     		ldr	r3, .L203+12
 2623 0132 9A42     		cmp	r2, r3
 2624 0134 E9DD     		ble	.L199
 2625 0136 00E0     		b	.L198
 2626              	.L202:
 2627              		.loc 1 704 0 is_stmt 1
 2628 0138 C046     		mov	r8, r8
 2629              	.L198:
 705:../Sources/TFC/TFC_CrystalClock.c ****   }
 706:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check EXT CLK is re
 2630              		.loc 1 706 0
 2631 013a 074B     		ldr	r3, .L203
 2632 013c 9B79     		ldrb	r3, [r3, #6]
 2633 013e DBB2     		uxtb	r3, r3
 2634 0140 1A1C     		mov	r2, r3
 2635 0142 0C23     		mov	r3, #12
 2636 0144 1340     		and	r3, r2
 2637 0146 9B08     		lsr	r3, r3, #2
 2638 0148 01D0     		beq	.L200
 2639              		.loc 1 706 0 is_stmt 0 discriminator 1
 2640 014a 1823     		mov	r3, #24
 2641 014c 00E0     		b	.L187
 2642              	.L200:
 707:../Sources/TFC/TFC_CrystalClock.c **** 
 708:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
 709:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 2643              		.loc 1 709 0 is_stmt 1
 2644 014e 3B69     		ldr	r3, [r7, #16]
 2645              	.L187:
 710:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fei
 2646              		.loc 1 710 0
 2647 0150 181C     		mov	r0, r3
 2648 0152 BD46     		mov	sp, r7
 2649 0154 06B0     		add	sp, sp, #24
 2650              		@ sp needed for prologue
 2651 0156 80BD     		pop	{r7, pc}
 2652              	.L204:
 2653              		.align	2
 2654              	.L203:
 2655 0158 00400640 		.word	1074151424
 2656 015c 117A0000 		.word	31249
 2657 0160 97980000 		.word	39063
 2658 0164 CF070000 		.word	1999
 2659              		.cfi_endproc
 2660              	.LFE10:
 2662              		.section	.text.fei_fbe,"ax",%progbits
 2663              		.align	2
 2664              		.global	fei_fbe
 2665              		.code	16
 2666              		.thumb_func
 2668              	fei_fbe:
 2669              	.LFB11:
 711:../Sources/TFC/TFC_CrystalClock.c **** 
 712:../Sources/TFC/TFC_CrystalClock.c **** 
 713:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 714:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fbe
 715:../Sources/TFC/TFC_CrystalClock.c ****  *
 716:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FBE mode
 717:../Sources/TFC/TFC_CrystalClock.c ****  *
 718:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FBE mode. This is
 719:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
 720:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
 721:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
 722:../Sources/TFC/TFC_CrystalClock.c ****  *
 723:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 724:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 725:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
 726:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 727:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 728:../Sources/TFC/TFC_CrystalClock.c ****  *
 729:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 730:../Sources/TFC/TFC_CrystalClock.c ****  */
 731:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 732:../Sources/TFC/TFC_CrystalClock.c **** {
 2670              		.loc 1 732 0
 2671              		.cfi_startproc
 2672 0000 80B5     		push	{r7, lr}
 2673              	.LCFI33:
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 7, -8
 2676              		.cfi_offset 14, -4
 2677 0002 84B0     		sub	sp, sp, #16
 2678              	.LCFI34:
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI35:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
 2684 0008 FB1C     		add	r3, r7, #3
 2685 000a 1970     		strb	r1, [r3]
 2686 000c BB1C     		add	r3, r7, #2
 2687 000e 1A70     		strb	r2, [r3]
 733:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 734:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 735:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 736:../Sources/TFC/TFC_CrystalClock.c ****   
 737:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
 738:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2688              		.loc 1 738 0
 2689 0010 B44B     		ldr	r3, .L241
 2690 0012 9B79     		ldrb	r3, [r3, #6]
 2691 0014 DBB2     		uxtb	r3, r3
 2692 0016 1A1C     		mov	r2, r3
 2693 0018 0C23     		mov	r3, #12
 2694 001a 1340     		and	r3, r2
 2695 001c 9B08     		lsr	r3, r3, #2
 2696 001e 0DD1     		bne	.L206
 739:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 2697              		.loc 1 739 0 discriminator 1
 2698 0020 B04B     		ldr	r3, .L241
 2699 0022 9B79     		ldrb	r3, [r3, #6]
 2700 0024 DBB2     		uxtb	r3, r3
 2701 0026 1A1C     		mov	r2, r3
 2702 0028 1023     		mov	r3, #16
 2703 002a 1340     		and	r3, r2
 738:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2704              		.loc 1 738 0 discriminator 1
 2705 002c 06D0     		beq	.L206
 740:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 2706              		.loc 1 740 0 discriminator 1
 2707 002e AD4B     		ldr	r3, .L241
 2708 0030 9B79     		ldrb	r3, [r3, #6]
 2709 0032 DBB2     		uxtb	r3, r3
 2710 0034 1A1C     		mov	r2, r3
 2711 0036 2023     		mov	r3, #32
 2712 0038 1340     		and	r3, r2
 738:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2713              		.loc 1 738 0 discriminator 1
 2714 003a 01D0     		beq	.L207
 2715              	.L206:
 741:../Sources/TFC/TFC_CrystalClock.c ****   {
 742:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 2716              		.loc 1 742 0
 2717 003c 0123     		mov	r3, #1
 2718 003e 4DE1     		b	.L208
 2719              	.L207:
 743:../Sources/TFC/TFC_CrystalClock.c ****   }
 744:../Sources/TFC/TFC_CrystalClock.c **** 
 745:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
 746:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 2720              		.loc 1 746 0
 2721 0040 7A68     		ldr	r2, [r7, #4]
 2722 0042 A94B     		ldr	r3, .L241+4
 2723 0044 9A42     		cmp	r2, r3
 2724 0046 01DD     		ble	.L209
 2725              		.loc 1 746 0 is_stmt 0 discriminator 1
 2726 0048 2123     		mov	r3, #33
 2727 004a 47E1     		b	.L208
 2728              	.L209:
 747:../Sources/TFC/TFC_CrystalClock.c ****   
 748:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
 749:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2729              		.loc 1 749 0 is_stmt 1
 2730 004c BB1C     		add	r3, r7, #2
 2731 004e 1B78     		ldrb	r3, [r3]
 2732 0050 002B     		cmp	r3, #0
 2733 0052 11D0     		beq	.L210
 750:../Sources/TFC/TFC_CrystalClock.c ****   {
 751:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 2734              		.loc 1 751 0
 2735 0054 7A68     		ldr	r2, [r7, #4]
 2736 0056 A54B     		ldr	r3, .L241+8
 2737 0058 9A42     		cmp	r2, r3
 2738 005a 0BDD     		ble	.L211
 2739              		.loc 1 751 0 is_stmt 0 discriminator 1
 2740 005c 7A68     		ldr	r2, [r7, #4]
 2741 005e A44B     		ldr	r3, .L241+12
 2742 0060 9A42     		cmp	r2, r3
 2743 0062 03DD     		ble	.L212
 752:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 2744              		.loc 1 752 0 is_stmt 1
 2745 0064 7A68     		ldr	r2, [r7, #4]
 2746 0066 A34B     		ldr	r3, .L241+16
 2747 0068 9A42     		cmp	r2, r3
 2748 006a 03DD     		ble	.L211
 2749              	.L212:
 2750              		.loc 1 752 0 is_stmt 0 discriminator 1
 2751 006c 7A68     		ldr	r2, [r7, #4]
 2752 006e A24B     		ldr	r3, .L241+20
 2753 0070 9A42     		cmp	r2, r3
 2754 0072 01DD     		ble	.L210
 2755              	.L211:
 753:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 2756              		.loc 1 753 0 is_stmt 1
 2757 0074 2223     		mov	r3, #34
 2758 0076 31E1     		b	.L208
 2759              	.L210:
 754:../Sources/TFC/TFC_CrystalClock.c ****   }
 755:../Sources/TFC/TFC_CrystalClock.c **** 
 756:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
 757:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 2760              		.loc 1 757 0
 2761 0078 FB1C     		add	r3, r7, #3
 2762 007a 1B78     		ldrb	r3, [r3]
 2763 007c 002B     		cmp	r3, #0
 2764 007e 02D0     		beq	.L213
 758:../Sources/TFC/TFC_CrystalClock.c ****   {
 759:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 2765              		.loc 1 759 0
 2766 0080 FB1C     		add	r3, r7, #3
 2767 0082 0122     		mov	r2, #1
 2768 0084 1A70     		strb	r2, [r3]
 2769              	.L213:
 760:../Sources/TFC/TFC_CrystalClock.c ****   }
 761:../Sources/TFC/TFC_CrystalClock.c **** 
 762:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
 763:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
 764:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
 765:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 2770              		.loc 1 765 0
 2771 0086 974A     		ldr	r2, .L241
 2772 0088 3B1C     		mov	r3, r7
 2773 008a 0E33     		add	r3, r3, #14
 2774 008c 5278     		ldrb	r2, [r2, #1]
 2775 008e 1A70     		strb	r2, [r3]
 766:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 2776              		.loc 1 766 0
 2777 0090 3B1C     		mov	r3, r7
 2778 0092 0E33     		add	r3, r3, #14
 2779 0094 3A1C     		mov	r2, r7
 2780 0096 0E32     		add	r2, r2, #14
 2781 0098 1278     		ldrb	r2, [r2]
 2782 009a 3C21     		mov	r1, #60
 2783 009c 8A43     		bic	r2, r1
 2784 009e 1A70     		strb	r2, [r3]
 767:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 2785              		.loc 1 767 0
 2786 00a0 7A68     		ldr	r2, [r7, #4]
 2787 00a2 934B     		ldr	r3, .L241+12
 2788 00a4 9A42     		cmp	r2, r3
 2789 00a6 11DC     		bgt	.L214
 768:../Sources/TFC/TFC_CrystalClock.c ****   {
 769:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2790              		.loc 1 769 0
 2791 00a8 FB1C     		add	r3, r7, #3
 2792 00aa 1B78     		ldrb	r3, [r3]
 2793 00ac DB00     		lsl	r3, r3, #3
 2794 00ae DAB2     		uxtb	r2, r3
 2795 00b0 BB1C     		add	r3, r7, #2
 2796 00b2 1B78     		ldrb	r3, [r3]
 2797 00b4 9B00     		lsl	r3, r3, #2
 2798 00b6 DBB2     		uxtb	r3, r3
 2799 00b8 1343     		orr	r3, r2
 2800 00ba D9B2     		uxtb	r1, r3
 2801 00bc 3B1C     		mov	r3, r7
 2802 00be 0E33     		add	r3, r3, #14
 2803 00c0 3A1C     		mov	r2, r7
 2804 00c2 0E32     		add	r2, r2, #14
 2805 00c4 1278     		ldrb	r2, [r2]
 2806 00c6 0A43     		orr	r2, r1
 2807 00c8 1A70     		strb	r2, [r3]
 2808 00ca 2CE0     		b	.L215
 2809              	.L214:
 770:../Sources/TFC/TFC_CrystalClock.c ****   }
 771:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 2810              		.loc 1 771 0
 2811 00cc 7A68     		ldr	r2, [r7, #4]
 2812 00ce 8B4B     		ldr	r3, .L241+24
 2813 00d0 9A42     		cmp	r2, r3
 2814 00d2 14DC     		bgt	.L216
 772:../Sources/TFC/TFC_CrystalClock.c ****   {
 773:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2815              		.loc 1 773 0
 2816 00d4 FB1C     		add	r3, r7, #3
 2817 00d6 1B78     		ldrb	r3, [r3]
 2818 00d8 DB00     		lsl	r3, r3, #3
 2819 00da DAB2     		uxtb	r2, r3
 2820 00dc BB1C     		add	r3, r7, #2
 2821 00de 1B78     		ldrb	r3, [r3]
 2822 00e0 9B00     		lsl	r3, r3, #2
 2823 00e2 DBB2     		uxtb	r3, r3
 2824 00e4 1343     		orr	r3, r2
 2825 00e6 DAB2     		uxtb	r2, r3
 2826 00e8 3B1C     		mov	r3, r7
 2827 00ea 0E33     		add	r3, r3, #14
 2828 00ec 1B78     		ldrb	r3, [r3]
 2829 00ee 1343     		orr	r3, r2
 2830 00f0 DAB2     		uxtb	r2, r3
 2831 00f2 3B1C     		mov	r3, r7
 2832 00f4 0E33     		add	r3, r3, #14
 2833 00f6 1021     		mov	r1, #16
 2834 00f8 0A43     		orr	r2, r1
 2835 00fa 1A70     		strb	r2, [r3]
 2836 00fc 13E0     		b	.L215
 2837              	.L216:
 774:../Sources/TFC/TFC_CrystalClock.c ****   }
 775:../Sources/TFC/TFC_CrystalClock.c ****   else
 776:../Sources/TFC/TFC_CrystalClock.c ****   {
 777:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2838              		.loc 1 777 0
 2839 00fe FB1C     		add	r3, r7, #3
 2840 0100 1B78     		ldrb	r3, [r3]
 2841 0102 DB00     		lsl	r3, r3, #3
 2842 0104 DAB2     		uxtb	r2, r3
 2843 0106 BB1C     		add	r3, r7, #2
 2844 0108 1B78     		ldrb	r3, [r3]
 2845 010a 9B00     		lsl	r3, r3, #2
 2846 010c DBB2     		uxtb	r3, r3
 2847 010e 1343     		orr	r3, r2
 2848 0110 DAB2     		uxtb	r2, r3
 2849 0112 3B1C     		mov	r3, r7
 2850 0114 0E33     		add	r3, r3, #14
 2851 0116 1B78     		ldrb	r3, [r3]
 2852 0118 1343     		orr	r3, r2
 2853 011a DAB2     		uxtb	r2, r3
 2854 011c 3B1C     		mov	r3, r7
 2855 011e 0E33     		add	r3, r3, #14
 2856 0120 2021     		mov	r1, #32
 2857 0122 0A43     		orr	r2, r1
 2858 0124 1A70     		strb	r2, [r3]
 2859              	.L215:
 778:../Sources/TFC/TFC_CrystalClock.c ****   }
 779:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 2860              		.loc 1 779 0
 2861 0126 6F4B     		ldr	r3, .L241
 2862 0128 3A1C     		mov	r2, r7
 2863 012a 0E32     		add	r2, r2, #14
 2864 012c 1278     		ldrb	r2, [r2]
 2865 012e 5A70     		strb	r2, [r3, #1]
 780:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
 781:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
 782:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 2866              		.loc 1 782 0
 2867 0130 7A68     		ldr	r2, [r7, #4]
 2868 0132 734B     		ldr	r3, .L241+28
 2869 0134 9A42     		cmp	r2, r3
 2870 0136 04DC     		bgt	.L217
 2871              		.loc 1 782 0 is_stmt 0 discriminator 1
 2872 0138 3B1C     		mov	r3, r7
 2873 013a 0F33     		add	r3, r3, #15
 2874 013c 0022     		mov	r2, #0
 2875 013e 1A70     		strb	r2, [r3]
 2876 0140 27E0     		b	.L218
 2877              	.L217:
 783:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 2878              		.loc 1 783 0 is_stmt 1
 2879 0142 7A68     		ldr	r2, [r7, #4]
 2880 0144 6F4B     		ldr	r3, .L241+32
 2881 0146 9A42     		cmp	r2, r3
 2882 0148 04DC     		bgt	.L219
 2883              		.loc 1 783 0 is_stmt 0 discriminator 1
 2884 014a 3B1C     		mov	r3, r7
 2885 014c 0F33     		add	r3, r3, #15
 2886 014e 0122     		mov	r2, #1
 2887 0150 1A70     		strb	r2, [r3]
 2888 0152 1EE0     		b	.L218
 2889              	.L219:
 784:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 2890              		.loc 1 784 0 is_stmt 1
 2891 0154 7A68     		ldr	r2, [r7, #4]
 2892 0156 6C4B     		ldr	r3, .L241+36
 2893 0158 9A42     		cmp	r2, r3
 2894 015a 04DC     		bgt	.L220
 2895              		.loc 1 784 0 is_stmt 0 discriminator 1
 2896 015c 3B1C     		mov	r3, r7
 2897 015e 0F33     		add	r3, r3, #15
 2898 0160 0222     		mov	r2, #2
 2899 0162 1A70     		strb	r2, [r3]
 2900 0164 15E0     		b	.L218
 2901              	.L220:
 785:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 2902              		.loc 1 785 0 is_stmt 1
 2903 0166 7A68     		ldr	r2, [r7, #4]
 2904 0168 684B     		ldr	r3, .L241+40
 2905 016a 9A42     		cmp	r2, r3
 2906 016c 04DC     		bgt	.L221
 2907              		.loc 1 785 0 is_stmt 0 discriminator 1
 2908 016e 3B1C     		mov	r3, r7
 2909 0170 0F33     		add	r3, r3, #15
 2910 0172 0322     		mov	r2, #3
 2911 0174 1A70     		strb	r2, [r3]
 2912 0176 0CE0     		b	.L218
 2913              	.L221:
 786:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 2914              		.loc 1 786 0 is_stmt 1
 2915 0178 7A68     		ldr	r2, [r7, #4]
 2916 017a 654B     		ldr	r3, .L241+44
 2917 017c 9A42     		cmp	r2, r3
 2918 017e 04DC     		bgt	.L222
 2919              		.loc 1 786 0 is_stmt 0 discriminator 1
 2920 0180 3B1C     		mov	r3, r7
 2921 0182 0F33     		add	r3, r3, #15
 2922 0184 0422     		mov	r2, #4
 2923 0186 1A70     		strb	r2, [r3]
 2924 0188 03E0     		b	.L218
 2925              	.L222:
 787:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 2926              		.loc 1 787 0 is_stmt 1
 2927 018a 3B1C     		mov	r3, r7
 2928 018c 0F33     		add	r3, r3, #15
 2929 018e 0522     		mov	r2, #5
 2930 0190 1A70     		strb	r2, [r3]
 2931              	.L218:
 788:../Sources/TFC/TFC_CrystalClock.c ****   
 789:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
 790:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
 791:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 792:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2932              		.loc 1 792 0
 2933 0192 544A     		ldr	r2, .L241
 2934 0194 3B1C     		mov	r3, r7
 2935 0196 0E33     		add	r3, r3, #14
 2936 0198 1278     		ldrb	r2, [r2]
 2937 019a 1A70     		strb	r2, [r3]
 793:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 2938              		.loc 1 793 0
 2939 019c 3B1C     		mov	r3, r7
 2940 019e 0E33     		add	r3, r3, #14
 2941 01a0 3A1C     		mov	r2, r7
 2942 01a2 0E32     		add	r2, r2, #14
 2943 01a4 1178     		ldrb	r1, [r2]
 2944 01a6 0322     		mov	r2, #3
 2945 01a8 0A40     		and	r2, r1
 2946 01aa 1A70     		strb	r2, [r3]
 794:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 2947              		.loc 1 794 0
 2948 01ac 3B1C     		mov	r3, r7
 2949 01ae 0F33     		add	r3, r3, #15
 2950 01b0 1B78     		ldrb	r3, [r3]
 2951 01b2 DB00     		lsl	r3, r3, #3
 2952 01b4 DAB2     		uxtb	r2, r3
 2953 01b6 3823     		mov	r3, #56
 2954 01b8 1340     		and	r3, r2
 2955 01ba DAB2     		uxtb	r2, r3
 2956 01bc 3B1C     		mov	r3, r7
 2957 01be 0E33     		add	r3, r3, #14
 2958 01c0 1B78     		ldrb	r3, [r3]
 2959 01c2 1343     		orr	r3, r2
 2960 01c4 DAB2     		uxtb	r2, r3
 2961 01c6 3B1C     		mov	r3, r7
 2962 01c8 0E33     		add	r3, r3, #14
 2963 01ca 8021     		mov	r1, #128
 2964 01cc 4942     		neg	r1, r1
 2965 01ce 0A43     		orr	r2, r1
 2966 01d0 1A70     		strb	r2, [r3]
 795:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 2967              		.loc 1 795 0
 2968 01d2 444B     		ldr	r3, .L241
 2969 01d4 3A1C     		mov	r2, r7
 2970 01d6 0E32     		add	r2, r2, #14
 2971 01d8 1278     		ldrb	r2, [r2]
 2972 01da 1A70     		strb	r2, [r3]
 796:../Sources/TFC/TFC_CrystalClock.c **** 
 797:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
 798:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2973              		.loc 1 798 0
 2974 01dc BB1C     		add	r3, r7, #2
 2975 01de 1B78     		ldrb	r3, [r3]
 2976 01e0 002B     		cmp	r3, #0
 2977 01e2 24D0     		beq	.L223
 799:../Sources/TFC/TFC_CrystalClock.c ****   {
 800:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 2978              		.loc 1 800 0
 2979 01e4 3B1C     		mov	r3, r7
 2980 01e6 0C33     		add	r3, r3, #12
 2981 01e8 0022     		mov	r2, #0
 2982 01ea 1A80     		strh	r2, [r3]
 2983 01ec 0DE0     		b	.L224
 2984              	.L227:
 801:../Sources/TFC/TFC_CrystalClock.c ****     {
 802:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 2985              		.loc 1 802 0
 2986 01ee 3D4B     		ldr	r3, .L241
 2987 01f0 9B79     		ldrb	r3, [r3, #6]
 2988 01f2 DBB2     		uxtb	r3, r3
 2989 01f4 1A1C     		mov	r2, r3
 2990 01f6 0223     		mov	r3, #2
 2991 01f8 1340     		and	r3, r2
 2992 01fa 0ED1     		bne	.L238
 2993              	.L225:
 800:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 2994              		.loc 1 800 0
 2995 01fc 3B1C     		mov	r3, r7
 2996 01fe 0C33     		add	r3, r3, #12
 2997 0200 3A1C     		mov	r2, r7
 2998 0202 0C32     		add	r2, r2, #12
 2999 0204 1288     		ldrh	r2, [r2]
 3000 0206 0132     		add	r2, r2, #1
 3001 0208 1A80     		strh	r2, [r3]
 3002              	.L224:
 800:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 3003              		.loc 1 800 0 is_stmt 0 discriminator 1
 3004 020a 3B1C     		mov	r3, r7
 3005 020c 0C33     		add	r3, r3, #12
 3006 020e 0021     		mov	r1, #0
 3007 0210 5A5E     		ldrsh	r2, [r3, r1]
 3008 0212 404B     		ldr	r3, .L241+48
 3009 0214 9A42     		cmp	r2, r3
 3010 0216 EADD     		ble	.L227
 3011 0218 00E0     		b	.L226
 3012              	.L238:
 3013              		.loc 1 802 0 is_stmt 1
 3014 021a C046     		mov	r8, r8
 3015              	.L226:
 803:../Sources/TFC/TFC_CrystalClock.c ****     }
 804:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 3016              		.loc 1 804 0
 3017 021c 314B     		ldr	r3, .L241
 3018 021e 9B79     		ldrb	r3, [r3, #6]
 3019 0220 DBB2     		uxtb	r3, r3
 3020 0222 1A1C     		mov	r2, r3
 3021 0224 0223     		mov	r3, #2
 3022 0226 1340     		and	r3, r2
 3023 0228 01D1     		bne	.L223
 3024              		.loc 1 804 0 is_stmt 0 discriminator 1
 3025 022a 2323     		mov	r3, #35
 3026 022c 56E0     		b	.L208
 3027              	.L223:
 805:../Sources/TFC/TFC_CrystalClock.c ****   }
 806:../Sources/TFC/TFC_CrystalClock.c **** 
 807:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
 808:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3028              		.loc 1 808 0 is_stmt 1
 3029 022e 3B1C     		mov	r3, r7
 3030 0230 0C33     		add	r3, r3, #12
 3031 0232 0022     		mov	r2, #0
 3032 0234 1A80     		strh	r2, [r3]
 3033 0236 0DE0     		b	.L228
 3034              	.L231:
 809:../Sources/TFC/TFC_CrystalClock.c ****   {
 810:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 3035              		.loc 1 810 0
 3036 0238 2A4B     		ldr	r3, .L241
 3037 023a 9B79     		ldrb	r3, [r3, #6]
 3038 023c DBB2     		uxtb	r3, r3
 3039 023e 1A1C     		mov	r2, r3
 3040 0240 1023     		mov	r3, #16
 3041 0242 1340     		and	r3, r2
 3042 0244 0ED0     		beq	.L239
 3043              	.L229:
 808:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3044              		.loc 1 808 0
 3045 0246 3B1C     		mov	r3, r7
 3046 0248 0C33     		add	r3, r3, #12
 3047 024a 3A1C     		mov	r2, r7
 3048 024c 0C32     		add	r2, r2, #12
 3049 024e 1288     		ldrh	r2, [r2]
 3050 0250 0132     		add	r2, r2, #1
 3051 0252 1A80     		strh	r2, [r3]
 3052              	.L228:
 808:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3053              		.loc 1 808 0 is_stmt 0 discriminator 1
 3054 0254 3B1C     		mov	r3, r7
 3055 0256 0C33     		add	r3, r3, #12
 3056 0258 0021     		mov	r1, #0
 3057 025a 5A5E     		ldrsh	r2, [r3, r1]
 3058 025c 2E4B     		ldr	r3, .L241+52
 3059 025e 9A42     		cmp	r2, r3
 3060 0260 EADD     		ble	.L231
 3061 0262 00E0     		b	.L230
 3062              	.L239:
 3063              		.loc 1 810 0 is_stmt 1
 3064 0264 C046     		mov	r8, r8
 3065              	.L230:
 811:../Sources/TFC/TFC_CrystalClock.c ****   }
 812:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 3066              		.loc 1 812 0
 3067 0266 1F4B     		ldr	r3, .L241
 3068 0268 9B79     		ldrb	r3, [r3, #6]
 3069 026a DBB2     		uxtb	r3, r3
 3070 026c 1A1C     		mov	r2, r3
 3071 026e 1023     		mov	r3, #16
 3072 0270 1340     		and	r3, r2
 3073 0272 01D0     		beq	.L232
 3074              		.loc 1 812 0 is_stmt 0 discriminator 1
 3075 0274 1123     		mov	r3, #17
 3076 0276 31E0     		b	.L208
 3077              	.L232:
 813:../Sources/TFC/TFC_CrystalClock.c ****   
 814:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 815:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3078              		.loc 1 815 0 is_stmt 1
 3079 0278 3B1C     		mov	r3, r7
 3080 027a 0C33     		add	r3, r3, #12
 3081 027c 0022     		mov	r2, #0
 3082 027e 1A80     		strh	r2, [r3]
 3083 0280 0FE0     		b	.L233
 3084              	.L236:
 816:../Sources/TFC/TFC_CrystalClock.c ****   {
 817:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3085              		.loc 1 817 0
 3086 0282 184B     		ldr	r3, .L241
 3087 0284 9B79     		ldrb	r3, [r3, #6]
 3088 0286 DBB2     		uxtb	r3, r3
 3089 0288 1A1C     		mov	r2, r3
 3090 028a 0C23     		mov	r3, #12
 3091 028c 1340     		and	r3, r2
 3092 028e 9B08     		lsr	r3, r3, #2
 3093 0290 022B     		cmp	r3, #2
 3094 0292 0ED0     		beq	.L240
 3095              	.L234:
 815:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3096              		.loc 1 815 0
 3097 0294 3B1C     		mov	r3, r7
 3098 0296 0C33     		add	r3, r3, #12
 3099 0298 3A1C     		mov	r2, r7
 3100 029a 0C32     		add	r2, r2, #12
 3101 029c 1288     		ldrh	r2, [r2]
 3102 029e 0132     		add	r2, r2, #1
 3103 02a0 1A80     		strh	r2, [r3]
 3104              	.L233:
 815:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3105              		.loc 1 815 0 is_stmt 0 discriminator 1
 3106 02a2 3B1C     		mov	r3, r7
 3107 02a4 0C33     		add	r3, r3, #12
 3108 02a6 0021     		mov	r1, #0
 3109 02a8 5A5E     		ldrsh	r2, [r3, r1]
 3110 02aa 1B4B     		ldr	r3, .L241+52
 3111 02ac 9A42     		cmp	r2, r3
 3112 02ae E8DD     		ble	.L236
 3113 02b0 00E0     		b	.L235
 3114              	.L240:
 3115              		.loc 1 817 0 is_stmt 1
 3116 02b2 C046     		mov	r8, r8
 3117              	.L235:
 818:../Sources/TFC/TFC_CrystalClock.c ****   }
 819:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3118              		.loc 1 819 0
 3119 02b4 0B4B     		ldr	r3, .L241
 3120 02b6 9B79     		ldrb	r3, [r3, #6]
 3121 02b8 DBB2     		uxtb	r3, r3
 3122 02ba 1A1C     		mov	r2, r3
 3123 02bc 0C23     		mov	r3, #12
 3124 02be 1340     		and	r3, r2
 3125 02c0 9B08     		lsr	r3, r3, #2
 3126 02c2 022B     		cmp	r3, #2
 3127 02c4 01D0     		beq	.L237
 3128              		.loc 1 819 0 is_stmt 0 discriminator 1
 3129 02c6 1A23     		mov	r3, #26
 3130 02c8 08E0     		b	.L208
 3131              	.L237:
 820:../Sources/TFC/TFC_CrystalClock.c ****  
 821:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
 822:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
 823:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
 824:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 3132              		.loc 1 824 0 is_stmt 1
 3133 02ca 064B     		ldr	r3, .L241
 3134 02cc 054A     		ldr	r2, .L241
 3135 02ce 5279     		ldrb	r2, [r2, #5]
 3136 02d0 D2B2     		uxtb	r2, r2
 3137 02d2 2021     		mov	r1, #32
 3138 02d4 0A43     		orr	r2, r1
 3139 02d6 D2B2     		uxtb	r2, r2
 3140 02d8 5A71     		strb	r2, [r3, #5]
 825:../Sources/TFC/TFC_CrystalClock.c ****   
 826:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 3141              		.loc 1 826 0
 3142 02da 7B68     		ldr	r3, [r7, #4]
 3143              	.L208:
 827:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbe
 3144              		.loc 1 827 0
 3145 02dc 181C     		mov	r0, r3
 3146 02de BD46     		mov	sp, r7
 3147 02e0 04B0     		add	sp, sp, #16
 3148              		@ sp needed for prologue
 3149 02e2 80BD     		pop	{r7, pc}
 3150              	.L242:
 3151              		.align	2
 3152              	.L241:
 3153 02e4 00400640 		.word	1074151424
 3154 02e8 80F0FA02 		.word	50000000
 3155 02ec 2F750000 		.word	29999
 3156 02f0 409C0000 		.word	40000
 3157 02f4 BFC62D00 		.word	2999999
 3158 02f8 0048E801 		.word	32000000
 3159 02fc 00127A00 		.word	8000000
 3160 0300 D0121300 		.word	1250000
 3161 0304 A0252600 		.word	2500000
 3162 0308 404B4C00 		.word	5000000
 3163 030c 80969800 		.word	10000000
 3164 0310 002D3101 		.word	20000000
 3165 0314 0F270000 		.word	9999
 3166 0318 CF070000 		.word	1999
 3167              		.cfi_endproc
 3168              	.LFE11:
 3170              		.section	.text.fbe_fee,"ax",%progbits
 3171              		.align	2
 3172              		.global	fbe_fee
 3173              		.code	16
 3174              		.thumb_func
 3176              	fbe_fee:
 3177              	.LFB12:
 828:../Sources/TFC/TFC_CrystalClock.c **** 
 829:../Sources/TFC/TFC_CrystalClock.c **** 
 830:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val)
 831:../Sources/TFC/TFC_CrystalClock.c **** {
 3178              		.loc 1 831 0
 3179              		.cfi_startproc
 3180 0000 80B5     		push	{r7, lr}
 3181              	.LCFI36:
 3182              		.cfi_def_cfa_offset 8
 3183              		.cfi_offset 7, -8
 3184              		.cfi_offset 14, -4
 3185 0002 84B0     		sub	sp, sp, #16
 3186              	.LCFI37:
 3187              		.cfi_def_cfa_offset 24
 3188 0004 00AF     		add	r7, sp, #0
 3189              	.LCFI38:
 3190              		.cfi_def_cfa_register 7
 3191 0006 7860     		str	r0, [r7, #4]
 832:../Sources/TFC/TFC_CrystalClock.c ****   short i, fll_ref_freq;
 833:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 834:../Sources/TFC/TFC_CrystalClock.c **** 
 835:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 836:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3192              		.loc 1 836 0
 3193 0008 494B     		ldr	r3, .L256
 3194 000a 9B79     		ldrb	r3, [r3, #6]
 3195 000c DBB2     		uxtb	r3, r3
 3196 000e 1A1C     		mov	r2, r3
 3197 0010 0C23     		mov	r3, #12
 3198 0012 1340     		and	r3, r2
 3199 0014 9B08     		lsr	r3, r3, #2
 3200 0016 022B     		cmp	r3, #2
 3201 0018 14D1     		bne	.L244
 837:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3202              		.loc 1 837 0 discriminator 1
 3203 001a 454B     		ldr	r3, .L256
 3204 001c 9B79     		ldrb	r3, [r3, #6]
 3205 001e DBB2     		uxtb	r3, r3
 3206 0020 1A1C     		mov	r2, r3
 3207 0022 1023     		mov	r3, #16
 3208 0024 1340     		and	r3, r2
 836:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3209              		.loc 1 836 0 discriminator 1
 3210 0026 0DD1     		bne	.L244
 838:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3211              		.loc 1 838 0
 3212 0028 414B     		ldr	r3, .L256
 3213 002a 9B79     		ldrb	r3, [r3, #6]
 3214 002c DBB2     		uxtb	r3, r3
 3215 002e 1A1C     		mov	r2, r3
 3216 0030 2023     		mov	r3, #32
 3217 0032 1340     		and	r3, r2
 837:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3218              		.loc 1 837 0
 3219 0034 06D1     		bne	.L244
 839:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3220              		.loc 1 839 0
 3221 0036 3E4B     		ldr	r3, .L256
 3222 0038 5B78     		ldrb	r3, [r3, #1]
 3223 003a DBB2     		uxtb	r3, r3
 3224 003c 1A1C     		mov	r2, r3
 3225 003e 0223     		mov	r3, #2
 3226 0040 1340     		and	r3, r2
 836:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3227              		.loc 1 836 0
 3228 0042 01D0     		beq	.L245
 3229              	.L244:
 840:../Sources/TFC/TFC_CrystalClock.c ****   {
 841:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3230              		.loc 1 841 0
 3231 0044 0423     		mov	r3, #4
 3232 0046 6EE0     		b	.L246
 3233              	.L245:
 842:../Sources/TFC/TFC_CrystalClock.c ****   }
 843:../Sources/TFC/TFC_CrystalClock.c ****   
 844:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
 845:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 3234              		.loc 1 845 0
 3235 0048 394B     		ldr	r3, .L256
 3236 004a 5B78     		ldrb	r3, [r3, #1]
 3237 004c DBB2     		uxtb	r3, r3
 3238 004e 1A1C     		mov	r2, r3
 3239 0050 3023     		mov	r3, #48
 3240 0052 1340     		and	r3, r2
 3241 0054 1B09     		lsr	r3, r3, #4
 3242 0056 14D0     		beq	.L247
 846:../Sources/TFC/TFC_CrystalClock.c ****   {
 847:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = (crystal_val / (32 << ((MCG_C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT)));
 3243              		.loc 1 847 0
 3244 0058 354B     		ldr	r3, .L256
 3245 005a 1B78     		ldrb	r3, [r3]
 3246 005c DBB2     		uxtb	r3, r3
 3247 005e 1A1C     		mov	r2, r3
 3248 0060 3823     		mov	r3, #56
 3249 0062 1340     		and	r3, r2
 3250 0064 DB08     		lsr	r3, r3, #3
 3251 0066 2022     		mov	r2, #32
 3252 0068 111C     		mov	r1, r2
 3253 006a 9940     		lsl	r1, r1, r3
 3254 006c 0B1C     		mov	r3, r1
 3255 006e 7868     		ldr	r0, [r7, #4]
 3256 0070 191C     		mov	r1, r3
 3257 0072 FFF7FEFF 		bl	__aeabi_idiv
 3258 0076 031C     		mov	r3, r0
 3259 0078 1A1C     		mov	r2, r3
 3260 007a 3B1C     		mov	r3, r7
 3261 007c 0C33     		add	r3, r3, #12
 3262 007e 1A80     		strh	r2, [r3]
 3263 0080 13E0     		b	.L248
 3264              	.L247:
 848:../Sources/TFC/TFC_CrystalClock.c ****   }
 849:../Sources/TFC/TFC_CrystalClock.c ****   else
 850:../Sources/TFC/TFC_CrystalClock.c ****   {
 851:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT)))
 3265              		.loc 1 851 0
 3266 0082 2B4B     		ldr	r3, .L256
 3267 0084 5B78     		ldrb	r3, [r3, #1]
 3268 0086 DBB2     		uxtb	r3, r3
 3269 0088 1A1C     		mov	r2, r3
 3270 008a 3023     		mov	r3, #48
 3271 008c 1340     		and	r3, r2
 3272 008e 1B09     		lsr	r3, r3, #4
 3273 0090 0122     		mov	r2, #1
 3274 0092 111C     		mov	r1, r2
 3275 0094 9940     		lsl	r1, r1, r3
 3276 0096 0B1C     		mov	r3, r1
 3277 0098 7868     		ldr	r0, [r7, #4]
 3278 009a 191C     		mov	r1, r3
 3279 009c FFF7FEFF 		bl	__aeabi_idiv
 3280 00a0 031C     		mov	r3, r0
 3281 00a2 1A1C     		mov	r2, r3
 3282 00a4 3B1C     		mov	r3, r7
 3283 00a6 0C33     		add	r3, r3, #12
 3284 00a8 1A80     		strh	r2, [r3]
 3285              	.L248:
 852:../Sources/TFC/TFC_CrystalClock.c ****   }
 853:../Sources/TFC/TFC_CrystalClock.c ****   
 854:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 855:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 3286              		.loc 1 855 0
 3287 00aa 3B1C     		mov	r3, r7
 3288 00ac 0C33     		add	r3, r3, #12
 3289 00ae 0022     		mov	r2, #0
 3290 00b0 9B5E     		ldrsh	r3, [r3, r2]
 3291 00b2 181C     		mov	r0, r3
 3292 00b4 FFF7FEFF 		bl	fll_freq
 3293 00b8 031C     		mov	r3, r0
 3294 00ba BB60     		str	r3, [r7, #8]
 856:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 3295              		.loc 1 856 0
 3296 00bc BB68     		ldr	r3, [r7, #8]
 3297 00be 3B2B     		cmp	r3, #59
 3298 00c0 01DC     		bgt	.L249
 3299              		.loc 1 856 0 is_stmt 0 discriminator 1
 3300 00c2 BB68     		ldr	r3, [r7, #8]
 3301 00c4 2FE0     		b	.L246
 3302              	.L249:
 857:../Sources/TFC/TFC_CrystalClock.c ****   
 858:../Sources/TFC/TFC_CrystalClock.c **** // Clear CLKS field to switch CLKS mux to select FLL output
 859:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 3303              		.loc 1 859 0 is_stmt 1
 3304 00c6 1A4B     		ldr	r3, .L256
 3305 00c8 194A     		ldr	r2, .L256
 3306 00ca 1278     		ldrb	r2, [r2]
 3307 00cc D1B2     		uxtb	r1, r2
 3308 00ce 3F22     		mov	r2, #63
 3309 00d0 0A40     		and	r2, r1
 3310 00d2 D2B2     		uxtb	r2, r2
 3311 00d4 1A70     		strb	r2, [r3]
 860:../Sources/TFC/TFC_CrystalClock.c **** 
 861:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is FLL
 862:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3312              		.loc 1 862 0
 3313 00d6 3B1C     		mov	r3, r7
 3314 00d8 0E33     		add	r3, r3, #14
 3315 00da 0022     		mov	r2, #0
 3316 00dc 1A80     		strh	r2, [r3]
 3317 00de 0EE0     		b	.L250
 3318              	.L253:
 863:../Sources/TFC/TFC_CrystalClock.c ****   {
 864:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 3319              		.loc 1 864 0
 3320 00e0 134B     		ldr	r3, .L256
 3321 00e2 9B79     		ldrb	r3, [r3, #6]
 3322 00e4 DBB2     		uxtb	r3, r3
 3323 00e6 1A1C     		mov	r2, r3
 3324 00e8 0C23     		mov	r3, #12
 3325 00ea 1340     		and	r3, r2
 3326 00ec 9B08     		lsr	r3, r3, #2
 3327 00ee 0ED0     		beq	.L255
 3328              	.L251:
 862:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3329              		.loc 1 862 0
 3330 00f0 3B1C     		mov	r3, r7
 3331 00f2 0E33     		add	r3, r3, #14
 3332 00f4 3A1C     		mov	r2, r7
 3333 00f6 0E32     		add	r2, r2, #14
 3334 00f8 1288     		ldrh	r2, [r2]
 3335 00fa 0132     		add	r2, r2, #1
 3336 00fc 1A80     		strh	r2, [r3]
 3337              	.L250:
 862:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3338              		.loc 1 862 0 is_stmt 0 discriminator 1
 3339 00fe 3B1C     		mov	r3, r7
 3340 0100 0E33     		add	r3, r3, #14
 3341 0102 0021     		mov	r1, #0
 3342 0104 5A5E     		ldrsh	r2, [r3, r1]
 3343 0106 0B4B     		ldr	r3, .L256+4
 3344 0108 9A42     		cmp	r2, r3
 3345 010a E9DD     		ble	.L253
 3346 010c 00E0     		b	.L252
 3347              	.L255:
 3348              		.loc 1 864 0 is_stmt 1
 3349 010e C046     		mov	r8, r8
 3350              	.L252:
 865:../Sources/TFC/TFC_CrystalClock.c ****   }
 866:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 3351              		.loc 1 866 0
 3352 0110 074B     		ldr	r3, .L256
 3353 0112 9B79     		ldrb	r3, [r3, #6]
 3354 0114 DBB2     		uxtb	r3, r3
 3355 0116 1A1C     		mov	r2, r3
 3356 0118 0C23     		mov	r3, #12
 3357 011a 1340     		and	r3, r2
 3358 011c 9B08     		lsr	r3, r3, #2
 3359 011e 01D0     		beq	.L254
 3360              		.loc 1 866 0 is_stmt 0 discriminator 1
 3361 0120 1823     		mov	r3, #24
 3362 0122 00E0     		b	.L246
 3363              	.L254:
 867:../Sources/TFC/TFC_CrystalClock.c ****   
 868:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE mode
 869:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 3364              		.loc 1 869 0 is_stmt 1
 3365 0124 BB68     		ldr	r3, [r7, #8]
 3366              	.L246:
 870:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fee
 3367              		.loc 1 870 0
 3368 0126 181C     		mov	r0, r3
 3369 0128 BD46     		mov	sp, r7
 3370 012a 04B0     		add	sp, sp, #16
 3371              		@ sp needed for prologue
 3372 012c 80BD     		pop	{r7, pc}
 3373              	.L257:
 3374 012e C046     		.align	2
 3375              	.L256:
 3376 0130 00400640 		.word	1074151424
 3377 0134 CF070000 		.word	1999
 3378              		.cfi_endproc
 3379              	.LFE12:
 3381              		.section	.text.fee_fbe,"ax",%progbits
 3382              		.align	2
 3383              		.global	fee_fbe
 3384              		.code	16
 3385              		.thumb_func
 3387              	fee_fbe:
 3388              	.LFB13:
 871:../Sources/TFC/TFC_CrystalClock.c **** 
 872:../Sources/TFC/TFC_CrystalClock.c **** 
 873:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val)
 874:../Sources/TFC/TFC_CrystalClock.c **** { 
 3389              		.loc 1 874 0
 3390              		.cfi_startproc
 3391 0000 80B5     		push	{r7, lr}
 3392              	.LCFI39:
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 7, -8
 3395              		.cfi_offset 14, -4
 3396 0002 84B0     		sub	sp, sp, #16
 3397              	.LCFI40:
 3398              		.cfi_def_cfa_offset 24
 3399 0004 00AF     		add	r7, sp, #0
 3400              	.LCFI41:
 3401              		.cfi_def_cfa_register 7
 3402 0006 7860     		str	r0, [r7, #4]
 875:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 876:../Sources/TFC/TFC_CrystalClock.c ****   
 877:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
 878:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3403              		.loc 1 878 0
 3404 0008 274B     		ldr	r3, .L268
 3405 000a 9B79     		ldrb	r3, [r3, #6]
 3406 000c DBB2     		uxtb	r3, r3
 3407 000e 1A1C     		mov	r2, r3
 3408 0010 0C23     		mov	r3, #12
 3409 0012 1340     		and	r3, r2
 3410 0014 9B08     		lsr	r3, r3, #2
 3411 0016 0DD1     		bne	.L259
 879:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3412              		.loc 1 879 0 discriminator 1
 3413 0018 234B     		ldr	r3, .L268
 3414 001a 9B79     		ldrb	r3, [r3, #6]
 3415 001c DBB2     		uxtb	r3, r3
 3416 001e 1A1C     		mov	r2, r3
 3417 0020 1023     		mov	r3, #16
 3418 0022 1340     		and	r3, r2
 878:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3419              		.loc 1 878 0 discriminator 1
 3420 0024 06D1     		bne	.L259
 880:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 3421              		.loc 1 880 0 discriminator 1
 3422 0026 204B     		ldr	r3, .L268
 3423 0028 9B79     		ldrb	r3, [r3, #6]
 3424 002a DBB2     		uxtb	r3, r3
 3425 002c 1A1C     		mov	r2, r3
 3426 002e 2023     		mov	r3, #32
 3427 0030 1340     		and	r3, r2
 878:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3428              		.loc 1 878 0 discriminator 1
 3429 0032 01D0     		beq	.L260
 3430              	.L259:
 881:../Sources/TFC/TFC_CrystalClock.c ****   {
 882:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                       // return error code
 3431              		.loc 1 882 0
 3432 0034 0223     		mov	r3, #2
 3433 0036 32E0     		b	.L261
 3434              	.L260:
 883:../Sources/TFC/TFC_CrystalClock.c ****   }
 884:../Sources/TFC/TFC_CrystalClock.c ****   
 885:../Sources/TFC/TFC_CrystalClock.c **** // Set CLKS field to 2 to switch CLKS mux to select ext ref clock
 886:../Sources/TFC/TFC_CrystalClock.c **** // MCG is current in FEE mode so CLKS field = 0 so can just OR in new value
 887:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // set CLKS to select ext ref clock
 3435              		.loc 1 887 0
 3436 0038 1B4B     		ldr	r3, .L268
 3437 003a 1B4A     		ldr	r2, .L268
 3438 003c 1278     		ldrb	r2, [r2]
 3439 003e D2B2     		uxtb	r2, r2
 3440 0040 8021     		mov	r1, #128
 3441 0042 4942     		neg	r1, r1
 3442 0044 0A43     		orr	r2, r1
 3443 0046 D2B2     		uxtb	r2, r2
 3444 0048 1A70     		strb	r2, [r3]
 888:../Sources/TFC/TFC_CrystalClock.c **** 
 889:../Sources/TFC/TFC_CrystalClock.c **** /// Wait for clock status bits to show clock source is ext ref clk
 890:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3445              		.loc 1 890 0
 3446 004a 3B1C     		mov	r3, r7
 3447 004c 0E33     		add	r3, r3, #14
 3448 004e 0022     		mov	r2, #0
 3449 0050 1A80     		strh	r2, [r3]
 3450 0052 0FE0     		b	.L262
 3451              	.L265:
 891:../Sources/TFC/TFC_CrystalClock.c ****   {
 892:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3452              		.loc 1 892 0
 3453 0054 144B     		ldr	r3, .L268
 3454 0056 9B79     		ldrb	r3, [r3, #6]
 3455 0058 DBB2     		uxtb	r3, r3
 3456 005a 1A1C     		mov	r2, r3
 3457 005c 0C23     		mov	r3, #12
 3458 005e 1340     		and	r3, r2
 3459 0060 9B08     		lsr	r3, r3, #2
 3460 0062 022B     		cmp	r3, #2
 3461 0064 0ED0     		beq	.L267
 3462              	.L263:
 890:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3463              		.loc 1 890 0
 3464 0066 3B1C     		mov	r3, r7
 3465 0068 0E33     		add	r3, r3, #14
 3466 006a 3A1C     		mov	r2, r7
 3467 006c 0E32     		add	r2, r2, #14
 3468 006e 1288     		ldrh	r2, [r2]
 3469 0070 0132     		add	r2, r2, #1
 3470 0072 1A80     		strh	r2, [r3]
 3471              	.L262:
 890:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3472              		.loc 1 890 0 is_stmt 0 discriminator 1
 3473 0074 3B1C     		mov	r3, r7
 3474 0076 0E33     		add	r3, r3, #14
 3475 0078 0021     		mov	r1, #0
 3476 007a 5A5E     		ldrsh	r2, [r3, r1]
 3477 007c 0B4B     		ldr	r3, .L268+4
 3478 007e 9A42     		cmp	r2, r3
 3479 0080 E8DD     		ble	.L265
 3480 0082 00E0     		b	.L264
 3481              	.L267:
 3482              		.loc 1 892 0 is_stmt 1
 3483 0084 C046     		mov	r8, r8
 3484              	.L264:
 893:../Sources/TFC/TFC_CrystalClock.c ****   }
 894:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3485              		.loc 1 894 0
 3486 0086 084B     		ldr	r3, .L268
 3487 0088 9B79     		ldrb	r3, [r3, #6]
 3488 008a DBB2     		uxtb	r3, r3
 3489 008c 1A1C     		mov	r2, r3
 3490 008e 0C23     		mov	r3, #12
 3491 0090 1340     		and	r3, r2
 3492 0092 9B08     		lsr	r3, r3, #2
 3493 0094 022B     		cmp	r3, #2
 3494 0096 01D0     		beq	.L266
 3495              		.loc 1 894 0 is_stmt 0 discriminator 1
 3496 0098 1A23     		mov	r3, #26
 3497 009a 00E0     		b	.L261
 3498              	.L266:
 895:../Sources/TFC/TFC_CrystalClock.c ****   
 896:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode
 897:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;
 3499              		.loc 1 897 0 is_stmt 1
 3500 009c 7B68     		ldr	r3, [r7, #4]
 3501              	.L261:
 898:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbe
 3502              		.loc 1 898 0
 3503 009e 181C     		mov	r0, r3
 3504 00a0 BD46     		mov	sp, r7
 3505 00a2 04B0     		add	sp, sp, #16
 3506              		@ sp needed for prologue
 3507 00a4 80BD     		pop	{r7, pc}
 3508              	.L269:
 3509 00a6 C046     		.align	2
 3510              	.L268:
 3511 00a8 00400640 		.word	1074151424
 3512 00ac CF070000 		.word	1999
 3513              		.cfi_endproc
 3514              	.LFE13:
 3516              		.section	.text.fbe_fbi,"ax",%progbits
 3517              		.align	2
 3518              		.global	fbe_fbi
 3519              		.code	16
 3520              		.thumb_func
 3522              	fbe_fbi:
 3523              	.LFB14:
 899:../Sources/TFC/TFC_CrystalClock.c **** 
 900:../Sources/TFC/TFC_CrystalClock.c **** 
 901:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select)
 902:../Sources/TFC/TFC_CrystalClock.c **** {
 3524              		.loc 1 902 0
 3525              		.cfi_startproc
 3526 0000 80B5     		push	{r7, lr}
 3527              	.LCFI42:
 3528              		.cfi_def_cfa_offset 8
 3529              		.cfi_offset 7, -8
 3530              		.cfi_offset 14, -4
 3531 0002 84B0     		sub	sp, sp, #16
 3532              	.LCFI43:
 3533              		.cfi_def_cfa_offset 24
 3534 0004 00AF     		add	r7, sp, #0
 3535              	.LCFI44:
 3536              		.cfi_def_cfa_register 7
 3537 0006 7860     		str	r0, [r7, #4]
 3538 0008 0A1C     		mov	r2, r1
 3539 000a FB1C     		add	r3, r7, #3
 3540 000c 1A70     		strb	r2, [r3]
 903:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 904:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
 905:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 906:../Sources/TFC/TFC_CrystalClock.c ****   
 907:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 908:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3541              		.loc 1 908 0
 3542 000e 964B     		ldr	r3, .L305
 3543 0010 9B79     		ldrb	r3, [r3, #6]
 3544 0012 DBB2     		uxtb	r3, r3
 3545 0014 1A1C     		mov	r2, r3
 3546 0016 0C23     		mov	r3, #12
 3547 0018 1340     		and	r3, r2
 3548 001a 9B08     		lsr	r3, r3, #2
 3549 001c 022B     		cmp	r3, #2
 3550 001e 14D1     		bne	.L271
 909:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3551              		.loc 1 909 0 discriminator 1
 3552 0020 914B     		ldr	r3, .L305
 3553 0022 9B79     		ldrb	r3, [r3, #6]
 3554 0024 DBB2     		uxtb	r3, r3
 3555 0026 1A1C     		mov	r2, r3
 3556 0028 1023     		mov	r3, #16
 3557 002a 1340     		and	r3, r2
 908:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3558              		.loc 1 908 0 discriminator 1
 3559 002c 0DD1     		bne	.L271
 910:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3560              		.loc 1 910 0
 3561 002e 8E4B     		ldr	r3, .L305
 3562 0030 9B79     		ldrb	r3, [r3, #6]
 3563 0032 DBB2     		uxtb	r3, r3
 3564 0034 1A1C     		mov	r2, r3
 3565 0036 2023     		mov	r3, #32
 3566 0038 1340     		and	r3, r2
 909:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3567              		.loc 1 909 0
 3568 003a 06D1     		bne	.L271
 911:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3569              		.loc 1 911 0
 3570 003c 8A4B     		ldr	r3, .L305
 3571 003e 5B78     		ldrb	r3, [r3, #1]
 3572 0040 DBB2     		uxtb	r3, r3
 3573 0042 1A1C     		mov	r2, r3
 3574 0044 0223     		mov	r3, #2
 3575 0046 1340     		and	r3, r2
 908:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3576              		.loc 1 908 0
 3577 0048 01D0     		beq	.L272
 3578              	.L271:
 912:../Sources/TFC/TFC_CrystalClock.c ****   {
 913:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3579              		.loc 1 913 0
 3580 004a 0423     		mov	r3, #4
 3581 004c 08E1     		b	.L273
 3582              	.L272:
 914:../Sources/TFC/TFC_CrystalClock.c ****   }
 915:../Sources/TFC/TFC_CrystalClock.c **** 
 916:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
 917:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3583              		.loc 1 917 0
 3584 004e FB1C     		add	r3, r7, #3
 3585 0050 1B78     		ldrb	r3, [r3]
 3586 0052 002B     		cmp	r3, #0
 3587 0054 09D1     		bne	.L274
 918:../Sources/TFC/TFC_CrystalClock.c ****   {    
 919:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 3588              		.loc 1 919 0
 3589 0056 7A68     		ldr	r2, [r7, #4]
 3590 0058 844B     		ldr	r3, .L305+4
 3591 005a 9A42     		cmp	r2, r3
 3592 005c 03DD     		ble	.L275
 3593              		.loc 1 919 0 is_stmt 0 discriminator 2
 3594 005e 7A68     		ldr	r2, [r7, #4]
 3595 0060 834B     		ldr	r3, .L305+8
 3596 0062 9A42     		cmp	r2, r3
 3597 0064 0BDD     		ble	.L276
 3598              	.L275:
 3599              		.loc 1 919 0 discriminator 1
 3600 0066 3123     		mov	r3, #49
 3601 0068 FAE0     		b	.L273
 3602              	.L274:
 920:../Sources/TFC/TFC_CrystalClock.c ****   }
 921:../Sources/TFC/TFC_CrystalClock.c ****   else
 922:../Sources/TFC/TFC_CrystalClock.c ****   {
 923:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 3603              		.loc 1 923 0 is_stmt 1
 3604 006a 7A68     		ldr	r2, [r7, #4]
 3605 006c 814B     		ldr	r3, .L305+12
 3606 006e 9A42     		cmp	r2, r3
 3607 0070 03DD     		ble	.L277
 3608              		.loc 1 923 0 is_stmt 0 discriminator 2
 3609 0072 7A68     		ldr	r2, [r7, #4]
 3610 0074 804B     		ldr	r3, .L305+16
 3611 0076 9A42     		cmp	r2, r3
 3612 0078 01DD     		ble	.L276
 3613              	.L277:
 3614              		.loc 1 923 0 discriminator 1
 3615 007a 3223     		mov	r3, #50
 3616 007c F0E0     		b	.L273
 3617              	.L276:
 924:../Sources/TFC/TFC_CrystalClock.c ****   }
 925:../Sources/TFC/TFC_CrystalClock.c ****   
 926:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
 927:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3618              		.loc 1 927 0 is_stmt 1
 3619 007e FB1C     		add	r3, r7, #3
 3620 0080 1B78     		ldrb	r3, [r3]
 3621 0082 002B     		cmp	r3, #0
 3622 0084 08D0     		beq	.L278
 928:../Sources/TFC/TFC_CrystalClock.c ****   {
 929:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 3623              		.loc 1 929 0
 3624 0086 784B     		ldr	r3, .L305
 3625 0088 774A     		ldr	r2, .L305
 3626 008a 5278     		ldrb	r2, [r2, #1]
 3627 008c D2B2     		uxtb	r2, r2
 3628 008e 0121     		mov	r1, #1
 3629 0090 0A43     		orr	r2, r1
 3630 0092 D2B2     		uxtb	r2, r2
 3631 0094 5A70     		strb	r2, [r3, #1]
 3632 0096 07E0     		b	.L279
 3633              	.L278:
 930:../Sources/TFC/TFC_CrystalClock.c ****   }
 931:../Sources/TFC/TFC_CrystalClock.c ****   else
 932:../Sources/TFC/TFC_CrystalClock.c ****   {
 933:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 3634              		.loc 1 933 0
 3635 0098 734B     		ldr	r3, .L305
 3636 009a 734A     		ldr	r2, .L305
 3637 009c 5278     		ldrb	r2, [r2, #1]
 3638 009e D2B2     		uxtb	r2, r2
 3639 00a0 0121     		mov	r1, #1
 3640 00a2 8A43     		bic	r2, r1
 3641 00a4 D2B2     		uxtb	r2, r2
 3642 00a6 5A70     		strb	r2, [r3, #1]
 3643              	.L279:
 934:../Sources/TFC/TFC_CrystalClock.c ****   }
 935:../Sources/TFC/TFC_CrystalClock.c ****   
 936:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
 937:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 3644              		.loc 1 937 0
 3645 00a8 6F4B     		ldr	r3, .L305
 3646 00aa 6F4A     		ldr	r2, .L305
 3647 00ac 5279     		ldrb	r2, [r2, #5]
 3648 00ae D2B2     		uxtb	r2, r2
 3649 00b0 2021     		mov	r1, #32
 3650 00b2 8A43     		bic	r2, r1
 3651 00b4 D2B2     		uxtb	r2, r2
 3652 00b6 5A71     		strb	r2, [r3, #5]
 938:../Sources/TFC/TFC_CrystalClock.c ****   
 939:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
 940:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 3653              		.loc 1 940 0
 3654 00b8 6B4A     		ldr	r2, .L305
 3655 00ba 3B1C     		mov	r3, r7
 3656 00bc 0D33     		add	r3, r3, #13
 3657 00be 1278     		ldrb	r2, [r2]
 3658 00c0 1A70     		strb	r2, [r3]
 941:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK;                    // clear CLKS bits 
 3659              		.loc 1 941 0
 3660 00c2 3B1C     		mov	r3, r7
 3661 00c4 0D33     		add	r3, r3, #13
 3662 00c6 3A1C     		mov	r2, r7
 3663 00c8 0D32     		add	r2, r2, #13
 3664 00ca 1178     		ldrb	r1, [r2]
 3665 00cc 3F22     		mov	r2, #63
 3666 00ce 0A40     		and	r2, r1
 3667 00d0 1A70     		strb	r2, [r3]
 942:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK); // select IRC as MCGOUT and enable IREFS
 3668              		.loc 1 942 0
 3669 00d2 3B1C     		mov	r3, r7
 3670 00d4 0D33     		add	r3, r3, #13
 3671 00d6 3A1C     		mov	r2, r7
 3672 00d8 0D32     		add	r2, r2, #13
 3673 00da 1278     		ldrb	r2, [r2]
 3674 00dc 4421     		mov	r1, #68
 3675 00de 0A43     		orr	r2, r1
 3676 00e0 1A70     		strb	r2, [r3]
 943:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 3677              		.loc 1 943 0
 3678 00e2 614B     		ldr	r3, .L305
 3679 00e4 3A1C     		mov	r2, r7
 3680 00e6 0D32     		add	r2, r2, #13
 3681 00e8 1278     		ldrb	r2, [r2]
 3682 00ea 1A70     		strb	r2, [r3]
 944:../Sources/TFC/TFC_CrystalClock.c ****   
 945:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
 946:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3683              		.loc 1 946 0
 3684 00ec FB1C     		add	r3, r7, #3
 3685 00ee 1B78     		ldrb	r3, [r3]
 3686 00f0 002B     		cmp	r3, #0
 3687 00f2 26D1     		bne	.L280
 947:../Sources/TFC/TFC_CrystalClock.c ****   {
 948:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3688              		.loc 1 948 0
 3689 00f4 3B1C     		mov	r3, r7
 3690 00f6 0E33     		add	r3, r3, #14
 3691 00f8 0022     		mov	r2, #0
 3692 00fa 1A80     		strh	r2, [r3]
 3693 00fc 0DE0     		b	.L281
 3694              	.L284:
 949:../Sources/TFC/TFC_CrystalClock.c ****     {
 950:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 3695              		.loc 1 950 0
 3696 00fe 5A4B     		ldr	r3, .L305
 3697 0100 9B79     		ldrb	r3, [r3, #6]
 3698 0102 DBB2     		uxtb	r3, r3
 3699 0104 1A1C     		mov	r2, r3
 3700 0106 0123     		mov	r3, #1
 3701 0108 1340     		and	r3, r2
 3702 010a 0ED0     		beq	.L301
 3703              	.L282:
 948:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3704              		.loc 1 948 0
 3705 010c 3B1C     		mov	r3, r7
 3706 010e 0E33     		add	r3, r3, #14
 3707 0110 3A1C     		mov	r2, r7
 3708 0112 0E32     		add	r2, r2, #14
 3709 0114 1288     		ldrh	r2, [r2]
 3710 0116 0132     		add	r2, r2, #1
 3711 0118 1A80     		strh	r2, [r3]
 3712              	.L281:
 948:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3713              		.loc 1 948 0 is_stmt 0 discriminator 1
 3714 011a 3B1C     		mov	r3, r7
 3715 011c 0E33     		add	r3, r3, #14
 3716 011e 0021     		mov	r1, #0
 3717 0120 5A5E     		ldrsh	r2, [r3, r1]
 3718 0122 564B     		ldr	r3, .L305+20
 3719 0124 9A42     		cmp	r2, r3
 3720 0126 EADD     		ble	.L284
 3721 0128 00E0     		b	.L283
 3722              	.L301:
 3723              		.loc 1 950 0 is_stmt 1
 3724 012a C046     		mov	r8, r8
 3725              	.L283:
 951:../Sources/TFC/TFC_CrystalClock.c ****     }
 952:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 3726              		.loc 1 952 0
 3727 012c 4E4B     		ldr	r3, .L305
 3728 012e 9B79     		ldrb	r3, [r3, #6]
 3729 0130 DBB2     		uxtb	r3, r3
 3730 0132 1A1C     		mov	r2, r3
 3731 0134 0123     		mov	r3, #1
 3732 0136 1340     		and	r3, r2
 3733 0138 DBB2     		uxtb	r3, r3
 3734 013a 002B     		cmp	r3, #0
 3735 013c 28D0     		beq	.L285
 3736              		.loc 1 952 0 is_stmt 0 discriminator 1
 3737 013e 1323     		mov	r3, #19
 3738 0140 8EE0     		b	.L273
 3739              	.L280:
 953:../Sources/TFC/TFC_CrystalClock.c ****   }
 954:../Sources/TFC/TFC_CrystalClock.c ****   else
 955:../Sources/TFC/TFC_CrystalClock.c ****   {
 956:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3740              		.loc 1 956 0 is_stmt 1
 3741 0142 3B1C     		mov	r3, r7
 3742 0144 0E33     		add	r3, r3, #14
 3743 0146 0022     		mov	r2, #0
 3744 0148 1A80     		strh	r2, [r3]
 3745 014a 0FE0     		b	.L286
 3746              	.L289:
 957:../Sources/TFC/TFC_CrystalClock.c ****     {
 958:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 3747              		.loc 1 958 0
 3748 014c 464B     		ldr	r3, .L305
 3749 014e 9B79     		ldrb	r3, [r3, #6]
 3750 0150 DBB2     		uxtb	r3, r3
 3751 0152 1A1C     		mov	r2, r3
 3752 0154 0123     		mov	r3, #1
 3753 0156 1340     		and	r3, r2
 3754 0158 DBB2     		uxtb	r3, r3
 3755 015a 002B     		cmp	r3, #0
 3756 015c 0ED1     		bne	.L302
 3757              	.L287:
 956:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3758              		.loc 1 956 0
 3759 015e 3B1C     		mov	r3, r7
 3760 0160 0E33     		add	r3, r3, #14
 3761 0162 3A1C     		mov	r2, r7
 3762 0164 0E32     		add	r2, r2, #14
 3763 0166 1288     		ldrh	r2, [r2]
 3764 0168 0132     		add	r2, r2, #1
 3765 016a 1A80     		strh	r2, [r3]
 3766              	.L286:
 956:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3767              		.loc 1 956 0 is_stmt 0 discriminator 1
 3768 016c 3B1C     		mov	r3, r7
 3769 016e 0E33     		add	r3, r3, #14
 3770 0170 0021     		mov	r1, #0
 3771 0172 5A5E     		ldrsh	r2, [r3, r1]
 3772 0174 414B     		ldr	r3, .L305+20
 3773 0176 9A42     		cmp	r2, r3
 3774 0178 E8DD     		ble	.L289
 3775 017a 00E0     		b	.L288
 3776              	.L302:
 3777              		.loc 1 958 0 is_stmt 1
 3778 017c C046     		mov	r8, r8
 3779              	.L288:
 959:../Sources/TFC/TFC_CrystalClock.c ****     }
 960:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 3780              		.loc 1 960 0
 3781 017e 3A4B     		ldr	r3, .L305
 3782 0180 9B79     		ldrb	r3, [r3, #6]
 3783 0182 DBB2     		uxtb	r3, r3
 3784 0184 1A1C     		mov	r2, r3
 3785 0186 0123     		mov	r3, #1
 3786 0188 1340     		and	r3, r2
 3787 018a 01D1     		bne	.L285
 3788              		.loc 1 960 0 is_stmt 0 discriminator 1
 3789 018c 1423     		mov	r3, #20
 3790 018e 67E0     		b	.L273
 3791              	.L285:
 961:../Sources/TFC/TFC_CrystalClock.c ****   }
 962:../Sources/TFC/TFC_CrystalClock.c ****  
 963:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
 964:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3792              		.loc 1 964 0 is_stmt 1
 3793 0190 3B1C     		mov	r3, r7
 3794 0192 0E33     		add	r3, r3, #14
 3795 0194 0022     		mov	r2, #0
 3796 0196 1A80     		strh	r2, [r3]
 3797 0198 0FE0     		b	.L290
 3798              	.L293:
 965:../Sources/TFC/TFC_CrystalClock.c ****   {
 966:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 3799              		.loc 1 966 0
 3800 019a 334B     		ldr	r3, .L305
 3801 019c 9B79     		ldrb	r3, [r3, #6]
 3802 019e DBB2     		uxtb	r3, r3
 3803 01a0 1A1C     		mov	r2, r3
 3804 01a2 0C23     		mov	r3, #12
 3805 01a4 1340     		and	r3, r2
 3806 01a6 9B08     		lsr	r3, r3, #2
 3807 01a8 012B     		cmp	r3, #1
 3808 01aa 0ED0     		beq	.L303
 3809              	.L291:
 964:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3810              		.loc 1 964 0
 3811 01ac 3B1C     		mov	r3, r7
 3812 01ae 0E33     		add	r3, r3, #14
 3813 01b0 3A1C     		mov	r2, r7
 3814 01b2 0E32     		add	r2, r2, #14
 3815 01b4 1288     		ldrh	r2, [r2]
 3816 01b6 0132     		add	r2, r2, #1
 3817 01b8 1A80     		strh	r2, [r3]
 3818              	.L290:
 964:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3819              		.loc 1 964 0 is_stmt 0 discriminator 1
 3820 01ba 3B1C     		mov	r3, r7
 3821 01bc 0E33     		add	r3, r3, #14
 3822 01be 0021     		mov	r1, #0
 3823 01c0 5A5E     		ldrsh	r2, [r3, r1]
 3824 01c2 2E4B     		ldr	r3, .L305+20
 3825 01c4 9A42     		cmp	r2, r3
 3826 01c6 E8DD     		ble	.L293
 3827 01c8 00E0     		b	.L292
 3828              	.L303:
 3829              		.loc 1 966 0 is_stmt 1
 3830 01ca C046     		mov	r8, r8
 3831              	.L292:
 967:../Sources/TFC/TFC_CrystalClock.c ****   }
 968:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 3832              		.loc 1 968 0
 3833 01cc 264B     		ldr	r3, .L305
 3834 01ce 9B79     		ldrb	r3, [r3, #6]
 3835 01d0 DBB2     		uxtb	r3, r3
 3836 01d2 1A1C     		mov	r2, r3
 3837 01d4 0C23     		mov	r3, #12
 3838 01d6 1340     		and	r3, r2
 3839 01d8 9B08     		lsr	r3, r3, #2
 3840 01da 012B     		cmp	r3, #1
 3841 01dc 01D0     		beq	.L294
 3842              		.loc 1 968 0 is_stmt 0 discriminator 1
 3843 01de 1923     		mov	r3, #25
 3844 01e0 3EE0     		b	.L273
 3845              	.L294:
 969:../Sources/TFC/TFC_CrystalClock.c ****   
 970:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to set
 971:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3846              		.loc 1 971 0 is_stmt 1
 3847 01e2 3B1C     		mov	r3, r7
 3848 01e4 0E33     		add	r3, r3, #14
 3849 01e6 0022     		mov	r2, #0
 3850 01e8 1A80     		strh	r2, [r3]
 3851 01ea 0DE0     		b	.L295
 3852              	.L298:
 972:../Sources/TFC/TFC_CrystalClock.c ****   {
 973:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 3853              		.loc 1 973 0
 3854 01ec 1E4B     		ldr	r3, .L305
 3855 01ee 9B79     		ldrb	r3, [r3, #6]
 3856 01f0 DBB2     		uxtb	r3, r3
 3857 01f2 1A1C     		mov	r2, r3
 3858 01f4 1023     		mov	r3, #16
 3859 01f6 1340     		and	r3, r2
 3860 01f8 0ED1     		bne	.L304
 3861              	.L296:
 971:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3862              		.loc 1 971 0
 3863 01fa 3B1C     		mov	r3, r7
 3864 01fc 0E33     		add	r3, r3, #14
 3865 01fe 3A1C     		mov	r2, r7
 3866 0200 0E32     		add	r2, r2, #14
 3867 0202 1288     		ldrh	r2, [r2]
 3868 0204 0132     		add	r2, r2, #1
 3869 0206 1A80     		strh	r2, [r3]
 3870              	.L295:
 971:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3871              		.loc 1 971 0 is_stmt 0 discriminator 1
 3872 0208 3B1C     		mov	r3, r7
 3873 020a 0E33     		add	r3, r3, #14
 3874 020c 0021     		mov	r1, #0
 3875 020e 5A5E     		ldrsh	r2, [r3, r1]
 3876 0210 1A4B     		ldr	r3, .L305+20
 3877 0212 9A42     		cmp	r2, r3
 3878 0214 EADD     		ble	.L298
 3879 0216 00E0     		b	.L297
 3880              	.L304:
 3881              		.loc 1 973 0 is_stmt 1
 3882 0218 C046     		mov	r8, r8
 3883              	.L297:
 974:../Sources/TFC/TFC_CrystalClock.c ****   }
 975:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 3884              		.loc 1 975 0
 3885 021a 134B     		ldr	r3, .L305
 3886 021c 9B79     		ldrb	r3, [r3, #6]
 3887 021e DBB2     		uxtb	r3, r3
 3888 0220 1A1C     		mov	r2, r3
 3889 0222 1023     		mov	r3, #16
 3890 0224 1340     		and	r3, r2
 3891 0226 01D1     		bne	.L299
 3892              		.loc 1 975 0 is_stmt 0 discriminator 1
 3893 0228 1223     		mov	r3, #18
 3894 022a 19E0     		b	.L273
 3895              	.L299:
 976:../Sources/TFC/TFC_CrystalClock.c ****   
 977:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
 978:../Sources/TFC/TFC_CrystalClock.c ****   
 979:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3896              		.loc 1 979 0 is_stmt 1
 3897 022c FB1C     		add	r3, r7, #3
 3898 022e 1B78     		ldrb	r3, [r3]
 3899 0230 002B     		cmp	r3, #0
 3900 0232 14D0     		beq	.L300
 980:../Sources/TFC/TFC_CrystalClock.c ****   {
 981:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 3901              		.loc 1 981 0
 3902 0234 0C4B     		ldr	r3, .L305
 3903 0236 1B7A     		ldrb	r3, [r3, #8]
 3904 0238 DBB2     		uxtb	r3, r3
 3905 023a 1A1C     		mov	r2, r3
 3906 023c 0E23     		mov	r3, #14
 3907 023e 1340     		and	r3, r2
 3908 0240 5B08     		lsr	r3, r3, #1
 3909 0242 0122     		mov	r2, #1
 3910 0244 9A40     		lsl	r2, r2, r3
 3911 0246 3B1C     		mov	r3, r7
 3912 0248 0C33     		add	r3, r3, #12
 3913 024a 1A70     		strb	r2, [r3]
 982:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by FCRDIV
 3914              		.loc 1 982 0
 3915 024c 3B1C     		mov	r3, r7
 3916 024e 0C33     		add	r3, r3, #12
 3917 0250 1B78     		ldrb	r3, [r3]
 3918 0252 7868     		ldr	r0, [r7, #4]
 3919 0254 191C     		mov	r1, r3
 3920 0256 FFF7FEFF 		bl	__aeabi_idiv
 3921 025a 031C     		mov	r3, r0
 3922 025c 00E0     		b	.L273
 3923              	.L300:
 983:../Sources/TFC/TFC_CrystalClock.c ****   }
 984:../Sources/TFC/TFC_CrystalClock.c ****   else
 985:../Sources/TFC/TFC_CrystalClock.c ****   {
 986:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 3924              		.loc 1 986 0
 3925 025e 7B68     		ldr	r3, [r7, #4]
 3926              	.L273:
 987:../Sources/TFC/TFC_CrystalClock.c ****   }
 988:../Sources/TFC/TFC_CrystalClock.c **** } //fbe_fbi
 3927              		.loc 1 988 0
 3928 0260 181C     		mov	r0, r3
 3929 0262 BD46     		mov	sp, r7
 3930 0264 04B0     		add	sp, sp, #16
 3931              		@ sp needed for prologue
 3932 0266 80BD     		pop	{r7, pc}
 3933              	.L306:
 3934              		.align	2
 3935              	.L305:
 3936 0268 00400640 		.word	1074151424
 3937 026c 117A0000 		.word	31249
 3938 0270 97980000 		.word	39063
 3939 0274 BFC62D00 		.word	2999999
 3940 0278 404B4C00 		.word	5000000
 3941 027c CF070000 		.word	1999
 3942              		.cfi_endproc
 3943              	.LFE14:
 3945              		.section	.text.fbi_fbe,"ax",%progbits
 3946              		.align	2
 3947              		.global	fbi_fbe
 3948              		.code	16
 3949              		.thumb_func
 3951              	fbi_fbe:
 3952              	.LFB15:
 989:../Sources/TFC/TFC_CrystalClock.c **** 
 990:../Sources/TFC/TFC_CrystalClock.c **** 
 991:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 992:../Sources/TFC/TFC_CrystalClock.c **** {
 3953              		.loc 1 992 0
 3954              		.cfi_startproc
 3955 0000 80B5     		push	{r7, lr}
 3956              	.LCFI45:
 3957              		.cfi_def_cfa_offset 8
 3958              		.cfi_offset 7, -8
 3959              		.cfi_offset 14, -4
 3960 0002 84B0     		sub	sp, sp, #16
 3961              	.LCFI46:
 3962              		.cfi_def_cfa_offset 24
 3963 0004 00AF     		add	r7, sp, #0
 3964              	.LCFI47:
 3965              		.cfi_def_cfa_register 7
 3966 0006 7860     		str	r0, [r7, #4]
 3967 0008 FB1C     		add	r3, r7, #3
 3968 000a 1970     		strb	r1, [r3]
 3969 000c BB1C     		add	r3, r7, #2
 3970 000e 1A70     		strb	r2, [r3]
 993:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 994:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 995:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 996:../Sources/TFC/TFC_CrystalClock.c ****   
 997:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
 998:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 3971              		.loc 1 998 0
 3972 0010 B84B     		ldr	r3, .L343
 3973 0012 9B79     		ldrb	r3, [r3, #6]
 3974 0014 DBB2     		uxtb	r3, r3
 3975 0016 1A1C     		mov	r2, r3
 3976 0018 0C23     		mov	r3, #12
 3977 001a 1340     		and	r3, r2
 3978 001c 9B08     		lsr	r3, r3, #2
 3979 001e 012B     		cmp	r3, #1
 3980 0020 14D1     		bne	.L308
 999:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 3981              		.loc 1 999 0 discriminator 1
 3982 0022 B44B     		ldr	r3, .L343
 3983 0024 9B79     		ldrb	r3, [r3, #6]
 3984 0026 DBB2     		uxtb	r3, r3
 3985 0028 1A1C     		mov	r2, r3
 3986 002a 1023     		mov	r3, #16
 3987 002c 1340     		and	r3, r2
 998:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 3988              		.loc 1 998 0 discriminator 1
 3989 002e 0DD0     		beq	.L308
1000:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3990              		.loc 1 1000 0
 3991 0030 B04B     		ldr	r3, .L343
 3992 0032 9B79     		ldrb	r3, [r3, #6]
 3993 0034 DBB2     		uxtb	r3, r3
 3994 0036 1A1C     		mov	r2, r3
 3995 0038 2023     		mov	r3, #32
 3996 003a 1340     		and	r3, r2
 999:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 3997              		.loc 1 999 0
 3998 003c 06D1     		bne	.L308
1001:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 3999              		.loc 1 1001 0
 4000 003e AD4B     		ldr	r3, .L343
 4001 0040 5B78     		ldrb	r3, [r3, #1]
 4002 0042 DBB2     		uxtb	r3, r3
 4003 0044 1A1C     		mov	r2, r3
 4004 0046 0223     		mov	r3, #2
 4005 0048 1340     		and	r3, r2
 998:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4006              		.loc 1 998 0
 4007 004a 01D0     		beq	.L309
 4008              	.L308:
1002:../Sources/TFC/TFC_CrystalClock.c ****   {  
1003:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4009              		.loc 1 1003 0
 4010 004c 0323     		mov	r3, #3
 4011 004e 4DE1     		b	.L310
 4012              	.L309:
1004:../Sources/TFC/TFC_CrystalClock.c ****   }
1005:../Sources/TFC/TFC_CrystalClock.c ****  
1006:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1007:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4013              		.loc 1 1007 0
 4014 0050 7A68     		ldr	r2, [r7, #4]
 4015 0052 A94B     		ldr	r3, .L343+4
 4016 0054 9A42     		cmp	r2, r3
 4017 0056 01DD     		ble	.L311
 4018              		.loc 1 1007 0 is_stmt 0 discriminator 1
 4019 0058 2123     		mov	r3, #33
 4020 005a 47E1     		b	.L310
 4021              	.L311:
1008:../Sources/TFC/TFC_CrystalClock.c ****   
1009:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1010:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4022              		.loc 1 1010 0 is_stmt 1
 4023 005c BB1C     		add	r3, r7, #2
 4024 005e 1B78     		ldrb	r3, [r3]
 4025 0060 002B     		cmp	r3, #0
 4026 0062 11D0     		beq	.L312
1011:../Sources/TFC/TFC_CrystalClock.c ****   {
1012:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4027              		.loc 1 1012 0
 4028 0064 7A68     		ldr	r2, [r7, #4]
 4029 0066 A54B     		ldr	r3, .L343+8
 4030 0068 9A42     		cmp	r2, r3
 4031 006a 0BDD     		ble	.L313
 4032              		.loc 1 1012 0 is_stmt 0 discriminator 1
 4033 006c 7A68     		ldr	r2, [r7, #4]
 4034 006e A44B     		ldr	r3, .L343+12
 4035 0070 9A42     		cmp	r2, r3
 4036 0072 03DD     		ble	.L314
1013:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4037              		.loc 1 1013 0 is_stmt 1
 4038 0074 7A68     		ldr	r2, [r7, #4]
 4039 0076 A34B     		ldr	r3, .L343+16
 4040 0078 9A42     		cmp	r2, r3
 4041 007a 03DD     		ble	.L313
 4042              	.L314:
 4043              		.loc 1 1013 0 is_stmt 0 discriminator 1
 4044 007c 7A68     		ldr	r2, [r7, #4]
 4045 007e A24B     		ldr	r3, .L343+20
 4046 0080 9A42     		cmp	r2, r3
 4047 0082 01DD     		ble	.L312
 4048              	.L313:
1014:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4049              		.loc 1 1014 0 is_stmt 1
 4050 0084 2223     		mov	r3, #34
 4051 0086 31E1     		b	.L310
 4052              	.L312:
1015:../Sources/TFC/TFC_CrystalClock.c ****   }
1016:../Sources/TFC/TFC_CrystalClock.c **** 
1017:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1018:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4053              		.loc 1 1018 0
 4054 0088 FB1C     		add	r3, r7, #3
 4055 008a 1B78     		ldrb	r3, [r3]
 4056 008c 002B     		cmp	r3, #0
 4057 008e 02D0     		beq	.L315
1019:../Sources/TFC/TFC_CrystalClock.c ****   {
1020:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4058              		.loc 1 1020 0
 4059 0090 FB1C     		add	r3, r7, #3
 4060 0092 0122     		mov	r2, #1
 4061 0094 1A70     		strb	r2, [r3]
 4062              	.L315:
1021:../Sources/TFC/TFC_CrystalClock.c ****   }
1022:../Sources/TFC/TFC_CrystalClock.c **** 
1023:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1024:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1025:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1026:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4063              		.loc 1 1026 0
 4064 0096 974A     		ldr	r2, .L343
 4065 0098 3B1C     		mov	r3, r7
 4066 009a 0F33     		add	r3, r3, #15
 4067 009c 5278     		ldrb	r2, [r2, #1]
 4068 009e 1A70     		strb	r2, [r3]
1027:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4069              		.loc 1 1027 0
 4070 00a0 3B1C     		mov	r3, r7
 4071 00a2 0F33     		add	r3, r3, #15
 4072 00a4 3A1C     		mov	r2, r7
 4073 00a6 0F32     		add	r2, r2, #15
 4074 00a8 1278     		ldrb	r2, [r2]
 4075 00aa 3C21     		mov	r1, #60
 4076 00ac 8A43     		bic	r2, r1
 4077 00ae 1A70     		strb	r2, [r3]
1028:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4078              		.loc 1 1028 0
 4079 00b0 7A68     		ldr	r2, [r7, #4]
 4080 00b2 934B     		ldr	r3, .L343+12
 4081 00b4 9A42     		cmp	r2, r3
 4082 00b6 11DC     		bgt	.L316
1029:../Sources/TFC/TFC_CrystalClock.c ****   {
1030:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4083              		.loc 1 1030 0
 4084 00b8 FB1C     		add	r3, r7, #3
 4085 00ba 1B78     		ldrb	r3, [r3]
 4086 00bc DB00     		lsl	r3, r3, #3
 4087 00be DAB2     		uxtb	r2, r3
 4088 00c0 BB1C     		add	r3, r7, #2
 4089 00c2 1B78     		ldrb	r3, [r3]
 4090 00c4 9B00     		lsl	r3, r3, #2
 4091 00c6 DBB2     		uxtb	r3, r3
 4092 00c8 1343     		orr	r3, r2
 4093 00ca D9B2     		uxtb	r1, r3
 4094 00cc 3B1C     		mov	r3, r7
 4095 00ce 0F33     		add	r3, r3, #15
 4096 00d0 3A1C     		mov	r2, r7
 4097 00d2 0F32     		add	r2, r2, #15
 4098 00d4 1278     		ldrb	r2, [r2]
 4099 00d6 0A43     		orr	r2, r1
 4100 00d8 1A70     		strb	r2, [r3]
 4101 00da 2CE0     		b	.L317
 4102              	.L316:
1031:../Sources/TFC/TFC_CrystalClock.c ****   }
1032:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4103              		.loc 1 1032 0
 4104 00dc 7A68     		ldr	r2, [r7, #4]
 4105 00de 8B4B     		ldr	r3, .L343+24
 4106 00e0 9A42     		cmp	r2, r3
 4107 00e2 14DC     		bgt	.L318
1033:../Sources/TFC/TFC_CrystalClock.c ****   {
1034:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4108              		.loc 1 1034 0
 4109 00e4 FB1C     		add	r3, r7, #3
 4110 00e6 1B78     		ldrb	r3, [r3]
 4111 00e8 DB00     		lsl	r3, r3, #3
 4112 00ea DAB2     		uxtb	r2, r3
 4113 00ec BB1C     		add	r3, r7, #2
 4114 00ee 1B78     		ldrb	r3, [r3]
 4115 00f0 9B00     		lsl	r3, r3, #2
 4116 00f2 DBB2     		uxtb	r3, r3
 4117 00f4 1343     		orr	r3, r2
 4118 00f6 DAB2     		uxtb	r2, r3
 4119 00f8 3B1C     		mov	r3, r7
 4120 00fa 0F33     		add	r3, r3, #15
 4121 00fc 1B78     		ldrb	r3, [r3]
 4122 00fe 1343     		orr	r3, r2
 4123 0100 DAB2     		uxtb	r2, r3
 4124 0102 3B1C     		mov	r3, r7
 4125 0104 0F33     		add	r3, r3, #15
 4126 0106 1021     		mov	r1, #16
 4127 0108 0A43     		orr	r2, r1
 4128 010a 1A70     		strb	r2, [r3]
 4129 010c 13E0     		b	.L317
 4130              	.L318:
1035:../Sources/TFC/TFC_CrystalClock.c ****   }
1036:../Sources/TFC/TFC_CrystalClock.c ****   else
1037:../Sources/TFC/TFC_CrystalClock.c ****   {
1038:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4131              		.loc 1 1038 0
 4132 010e FB1C     		add	r3, r7, #3
 4133 0110 1B78     		ldrb	r3, [r3]
 4134 0112 DB00     		lsl	r3, r3, #3
 4135 0114 DAB2     		uxtb	r2, r3
 4136 0116 BB1C     		add	r3, r7, #2
 4137 0118 1B78     		ldrb	r3, [r3]
 4138 011a 9B00     		lsl	r3, r3, #2
 4139 011c DBB2     		uxtb	r3, r3
 4140 011e 1343     		orr	r3, r2
 4141 0120 DAB2     		uxtb	r2, r3
 4142 0122 3B1C     		mov	r3, r7
 4143 0124 0F33     		add	r3, r3, #15
 4144 0126 1B78     		ldrb	r3, [r3]
 4145 0128 1343     		orr	r3, r2
 4146 012a DAB2     		uxtb	r2, r3
 4147 012c 3B1C     		mov	r3, r7
 4148 012e 0F33     		add	r3, r3, #15
 4149 0130 2021     		mov	r1, #32
 4150 0132 0A43     		orr	r2, r1
 4151 0134 1A70     		strb	r2, [r3]
 4152              	.L317:
1039:../Sources/TFC/TFC_CrystalClock.c ****   }
1040:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4153              		.loc 1 1040 0
 4154 0136 6F4B     		ldr	r3, .L343
 4155 0138 3A1C     		mov	r2, r7
 4156 013a 0F32     		add	r2, r2, #15
 4157 013c 1278     		ldrb	r2, [r2]
 4158 013e 5A70     		strb	r2, [r3, #1]
1041:../Sources/TFC/TFC_CrystalClock.c **** 
1042:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1043:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1044:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4159              		.loc 1 1044 0
 4160 0140 7A68     		ldr	r2, [r7, #4]
 4161 0142 734B     		ldr	r3, .L343+28
 4162 0144 9A42     		cmp	r2, r3
 4163 0146 04DC     		bgt	.L319
 4164              		.loc 1 1044 0 is_stmt 0 discriminator 1
 4165 0148 3B1C     		mov	r3, r7
 4166 014a 0E33     		add	r3, r3, #14
 4167 014c 0022     		mov	r2, #0
 4168 014e 1A70     		strb	r2, [r3]
 4169 0150 27E0     		b	.L320
 4170              	.L319:
1045:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4171              		.loc 1 1045 0 is_stmt 1
 4172 0152 7A68     		ldr	r2, [r7, #4]
 4173 0154 6F4B     		ldr	r3, .L343+32
 4174 0156 9A42     		cmp	r2, r3
 4175 0158 04DC     		bgt	.L321
 4176              		.loc 1 1045 0 is_stmt 0 discriminator 1
 4177 015a 3B1C     		mov	r3, r7
 4178 015c 0E33     		add	r3, r3, #14
 4179 015e 0122     		mov	r2, #1
 4180 0160 1A70     		strb	r2, [r3]
 4181 0162 1EE0     		b	.L320
 4182              	.L321:
1046:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4183              		.loc 1 1046 0 is_stmt 1
 4184 0164 7A68     		ldr	r2, [r7, #4]
 4185 0166 6C4B     		ldr	r3, .L343+36
 4186 0168 9A42     		cmp	r2, r3
 4187 016a 04DC     		bgt	.L322
 4188              		.loc 1 1046 0 is_stmt 0 discriminator 1
 4189 016c 3B1C     		mov	r3, r7
 4190 016e 0E33     		add	r3, r3, #14
 4191 0170 0222     		mov	r2, #2
 4192 0172 1A70     		strb	r2, [r3]
 4193 0174 15E0     		b	.L320
 4194              	.L322:
1047:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4195              		.loc 1 1047 0 is_stmt 1
 4196 0176 7A68     		ldr	r2, [r7, #4]
 4197 0178 684B     		ldr	r3, .L343+40
 4198 017a 9A42     		cmp	r2, r3
 4199 017c 04DC     		bgt	.L323
 4200              		.loc 1 1047 0 is_stmt 0 discriminator 1
 4201 017e 3B1C     		mov	r3, r7
 4202 0180 0E33     		add	r3, r3, #14
 4203 0182 0322     		mov	r2, #3
 4204 0184 1A70     		strb	r2, [r3]
 4205 0186 0CE0     		b	.L320
 4206              	.L323:
1048:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4207              		.loc 1 1048 0 is_stmt 1
 4208 0188 7A68     		ldr	r2, [r7, #4]
 4209 018a 654B     		ldr	r3, .L343+44
 4210 018c 9A42     		cmp	r2, r3
 4211 018e 04DC     		bgt	.L324
 4212              		.loc 1 1048 0 is_stmt 0 discriminator 1
 4213 0190 3B1C     		mov	r3, r7
 4214 0192 0E33     		add	r3, r3, #14
 4215 0194 0422     		mov	r2, #4
 4216 0196 1A70     		strb	r2, [r3]
 4217 0198 03E0     		b	.L320
 4218              	.L324:
1049:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4219              		.loc 1 1049 0 is_stmt 1
 4220 019a 3B1C     		mov	r3, r7
 4221 019c 0E33     		add	r3, r3, #14
 4222 019e 0522     		mov	r2, #5
 4223 01a0 1A70     		strb	r2, [r3]
 4224              	.L320:
1050:../Sources/TFC/TFC_CrystalClock.c ****   
1051:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1052:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1053:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1054:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 4225              		.loc 1 1054 0
 4226 01a2 544A     		ldr	r2, .L343
 4227 01a4 3B1C     		mov	r3, r7
 4228 01a6 0F33     		add	r3, r3, #15
 4229 01a8 1278     		ldrb	r2, [r2]
 4230 01aa 1A70     		strb	r2, [r3]
1055:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 4231              		.loc 1 1055 0
 4232 01ac 3B1C     		mov	r3, r7
 4233 01ae 0F33     		add	r3, r3, #15
 4234 01b0 3A1C     		mov	r2, r7
 4235 01b2 0F32     		add	r2, r2, #15
 4236 01b4 1178     		ldrb	r1, [r2]
 4237 01b6 0322     		mov	r2, #3
 4238 01b8 0A40     		and	r2, r1
 4239 01ba 1A70     		strb	r2, [r3]
1056:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 4240              		.loc 1 1056 0
 4241 01bc 3B1C     		mov	r3, r7
 4242 01be 0E33     		add	r3, r3, #14
 4243 01c0 1B78     		ldrb	r3, [r3]
 4244 01c2 DB00     		lsl	r3, r3, #3
 4245 01c4 DAB2     		uxtb	r2, r3
 4246 01c6 3823     		mov	r3, #56
 4247 01c8 1340     		and	r3, r2
 4248 01ca DAB2     		uxtb	r2, r3
 4249 01cc 3B1C     		mov	r3, r7
 4250 01ce 0F33     		add	r3, r3, #15
 4251 01d0 1B78     		ldrb	r3, [r3]
 4252 01d2 1343     		orr	r3, r2
 4253 01d4 DAB2     		uxtb	r2, r3
 4254 01d6 3B1C     		mov	r3, r7
 4255 01d8 0F33     		add	r3, r3, #15
 4256 01da 8021     		mov	r1, #128
 4257 01dc 4942     		neg	r1, r1
 4258 01de 0A43     		orr	r2, r1
 4259 01e0 1A70     		strb	r2, [r3]
1057:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 4260              		.loc 1 1057 0
 4261 01e2 444B     		ldr	r3, .L343
 4262 01e4 3A1C     		mov	r2, r7
 4263 01e6 0F32     		add	r2, r2, #15
 4264 01e8 1278     		ldrb	r2, [r2]
 4265 01ea 1A70     		strb	r2, [r3]
1058:../Sources/TFC/TFC_CrystalClock.c **** 
1059:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1060:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4266              		.loc 1 1060 0
 4267 01ec BB1C     		add	r3, r7, #2
 4268 01ee 1B78     		ldrb	r3, [r3]
 4269 01f0 002B     		cmp	r3, #0
 4270 01f2 24D0     		beq	.L325
1061:../Sources/TFC/TFC_CrystalClock.c ****   {
1062:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4271              		.loc 1 1062 0
 4272 01f4 3B1C     		mov	r3, r7
 4273 01f6 0C33     		add	r3, r3, #12
 4274 01f8 0022     		mov	r2, #0
 4275 01fa 1A80     		strh	r2, [r3]
 4276 01fc 0DE0     		b	.L326
 4277              	.L329:
1063:../Sources/TFC/TFC_CrystalClock.c ****     {
1064:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 4278              		.loc 1 1064 0
 4279 01fe 3D4B     		ldr	r3, .L343
 4280 0200 9B79     		ldrb	r3, [r3, #6]
 4281 0202 DBB2     		uxtb	r3, r3
 4282 0204 1A1C     		mov	r2, r3
 4283 0206 0223     		mov	r3, #2
 4284 0208 1340     		and	r3, r2
 4285 020a 0ED1     		bne	.L340
 4286              	.L327:
1062:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4287              		.loc 1 1062 0
 4288 020c 3B1C     		mov	r3, r7
 4289 020e 0C33     		add	r3, r3, #12
 4290 0210 3A1C     		mov	r2, r7
 4291 0212 0C32     		add	r2, r2, #12
 4292 0214 1288     		ldrh	r2, [r2]
 4293 0216 0132     		add	r2, r2, #1
 4294 0218 1A80     		strh	r2, [r3]
 4295              	.L326:
1062:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4296              		.loc 1 1062 0 is_stmt 0 discriminator 1
 4297 021a 3B1C     		mov	r3, r7
 4298 021c 0C33     		add	r3, r3, #12
 4299 021e 0021     		mov	r1, #0
 4300 0220 5A5E     		ldrsh	r2, [r3, r1]
 4301 0222 404B     		ldr	r3, .L343+48
 4302 0224 9A42     		cmp	r2, r3
 4303 0226 EADD     		ble	.L329
 4304 0228 00E0     		b	.L328
 4305              	.L340:
 4306              		.loc 1 1064 0 is_stmt 1
 4307 022a C046     		mov	r8, r8
 4308              	.L328:
1065:../Sources/TFC/TFC_CrystalClock.c ****     }
1066:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 4309              		.loc 1 1066 0
 4310 022c 314B     		ldr	r3, .L343
 4311 022e 9B79     		ldrb	r3, [r3, #6]
 4312 0230 DBB2     		uxtb	r3, r3
 4313 0232 1A1C     		mov	r2, r3
 4314 0234 0223     		mov	r3, #2
 4315 0236 1340     		and	r3, r2
 4316 0238 01D1     		bne	.L325
 4317              		.loc 1 1066 0 is_stmt 0 discriminator 1
 4318 023a 2323     		mov	r3, #35
 4319 023c 56E0     		b	.L310
 4320              	.L325:
1067:../Sources/TFC/TFC_CrystalClock.c ****   }
1068:../Sources/TFC/TFC_CrystalClock.c **** 
1069:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1070:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4321              		.loc 1 1070 0 is_stmt 1
 4322 023e 3B1C     		mov	r3, r7
 4323 0240 0C33     		add	r3, r3, #12
 4324 0242 0022     		mov	r2, #0
 4325 0244 1A80     		strh	r2, [r3]
 4326 0246 0DE0     		b	.L330
 4327              	.L333:
1071:../Sources/TFC/TFC_CrystalClock.c ****   {
1072:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 4328              		.loc 1 1072 0
 4329 0248 2A4B     		ldr	r3, .L343
 4330 024a 9B79     		ldrb	r3, [r3, #6]
 4331 024c DBB2     		uxtb	r3, r3
 4332 024e 1A1C     		mov	r2, r3
 4333 0250 1023     		mov	r3, #16
 4334 0252 1340     		and	r3, r2
 4335 0254 0ED0     		beq	.L341
 4336              	.L331:
1070:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4337              		.loc 1 1070 0
 4338 0256 3B1C     		mov	r3, r7
 4339 0258 0C33     		add	r3, r3, #12
 4340 025a 3A1C     		mov	r2, r7
 4341 025c 0C32     		add	r2, r2, #12
 4342 025e 1288     		ldrh	r2, [r2]
 4343 0260 0132     		add	r2, r2, #1
 4344 0262 1A80     		strh	r2, [r3]
 4345              	.L330:
1070:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4346              		.loc 1 1070 0 is_stmt 0 discriminator 1
 4347 0264 3B1C     		mov	r3, r7
 4348 0266 0C33     		add	r3, r3, #12
 4349 0268 0021     		mov	r1, #0
 4350 026a 5A5E     		ldrsh	r2, [r3, r1]
 4351 026c 2E4B     		ldr	r3, .L343+52
 4352 026e 9A42     		cmp	r2, r3
 4353 0270 EADD     		ble	.L333
 4354 0272 00E0     		b	.L332
 4355              	.L341:
 4356              		.loc 1 1072 0 is_stmt 1
 4357 0274 C046     		mov	r8, r8
 4358              	.L332:
1073:../Sources/TFC/TFC_CrystalClock.c ****   }
1074:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 4359              		.loc 1 1074 0
 4360 0276 1F4B     		ldr	r3, .L343
 4361 0278 9B79     		ldrb	r3, [r3, #6]
 4362 027a DBB2     		uxtb	r3, r3
 4363 027c 1A1C     		mov	r2, r3
 4364 027e 1023     		mov	r3, #16
 4365 0280 1340     		and	r3, r2
 4366 0282 01D0     		beq	.L334
 4367              		.loc 1 1074 0 is_stmt 0 discriminator 1
 4368 0284 1123     		mov	r3, #17
 4369 0286 31E0     		b	.L310
 4370              	.L334:
1075:../Sources/TFC/TFC_CrystalClock.c ****   
1076:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1077:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4371              		.loc 1 1077 0 is_stmt 1
 4372 0288 3B1C     		mov	r3, r7
 4373 028a 0C33     		add	r3, r3, #12
 4374 028c 0022     		mov	r2, #0
 4375 028e 1A80     		strh	r2, [r3]
 4376 0290 0FE0     		b	.L335
 4377              	.L338:
1078:../Sources/TFC/TFC_CrystalClock.c ****   {
1079:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 4378              		.loc 1 1079 0
 4379 0292 184B     		ldr	r3, .L343
 4380 0294 9B79     		ldrb	r3, [r3, #6]
 4381 0296 DBB2     		uxtb	r3, r3
 4382 0298 1A1C     		mov	r2, r3
 4383 029a 0C23     		mov	r3, #12
 4384 029c 1340     		and	r3, r2
 4385 029e 9B08     		lsr	r3, r3, #2
 4386 02a0 022B     		cmp	r3, #2
 4387 02a2 0ED0     		beq	.L342
 4388              	.L336:
1077:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4389              		.loc 1 1077 0
 4390 02a4 3B1C     		mov	r3, r7
 4391 02a6 0C33     		add	r3, r3, #12
 4392 02a8 3A1C     		mov	r2, r7
 4393 02aa 0C32     		add	r2, r2, #12
 4394 02ac 1288     		ldrh	r2, [r2]
 4395 02ae 0132     		add	r2, r2, #1
 4396 02b0 1A80     		strh	r2, [r3]
 4397              	.L335:
1077:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4398              		.loc 1 1077 0 is_stmt 0 discriminator 1
 4399 02b2 3B1C     		mov	r3, r7
 4400 02b4 0C33     		add	r3, r3, #12
 4401 02b6 0021     		mov	r1, #0
 4402 02b8 5A5E     		ldrsh	r2, [r3, r1]
 4403 02ba 1B4B     		ldr	r3, .L343+52
 4404 02bc 9A42     		cmp	r2, r3
 4405 02be E8DD     		ble	.L338
 4406 02c0 00E0     		b	.L337
 4407              	.L342:
 4408              		.loc 1 1079 0 is_stmt 1
 4409 02c2 C046     		mov	r8, r8
 4410              	.L337:
1080:../Sources/TFC/TFC_CrystalClock.c ****   }
1081:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 4411              		.loc 1 1081 0
 4412 02c4 0B4B     		ldr	r3, .L343
 4413 02c6 9B79     		ldrb	r3, [r3, #6]
 4414 02c8 DBB2     		uxtb	r3, r3
 4415 02ca 1A1C     		mov	r2, r3
 4416 02cc 0C23     		mov	r3, #12
 4417 02ce 1340     		and	r3, r2
 4418 02d0 9B08     		lsr	r3, r3, #2
 4419 02d2 022B     		cmp	r3, #2
 4420 02d4 01D0     		beq	.L339
 4421              		.loc 1 1081 0 is_stmt 0 discriminator 1
 4422 02d6 1A23     		mov	r3, #26
 4423 02d8 08E0     		b	.L310
 4424              	.L339:
1082:../Sources/TFC/TFC_CrystalClock.c ****  
1083:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1084:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1085:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1086:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 4425              		.loc 1 1086 0 is_stmt 1
 4426 02da 064B     		ldr	r3, .L343
 4427 02dc 054A     		ldr	r2, .L343
 4428 02de 5279     		ldrb	r2, [r2, #5]
 4429 02e0 D2B2     		uxtb	r2, r2
 4430 02e2 2021     		mov	r1, #32
 4431 02e4 0A43     		orr	r2, r1
 4432 02e6 D2B2     		uxtb	r2, r2
 4433 02e8 5A71     		strb	r2, [r3, #5]
1087:../Sources/TFC/TFC_CrystalClock.c ****   
1088:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 4434              		.loc 1 1088 0
 4435 02ea 7B68     		ldr	r3, [r7, #4]
 4436              	.L310:
1089:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fbe
 4437              		.loc 1 1089 0
 4438 02ec 181C     		mov	r0, r3
 4439 02ee BD46     		mov	sp, r7
 4440 02f0 04B0     		add	sp, sp, #16
 4441              		@ sp needed for prologue
 4442 02f2 80BD     		pop	{r7, pc}
 4443              	.L344:
 4444              		.align	2
 4445              	.L343:
 4446 02f4 00400640 		.word	1074151424
 4447 02f8 80F0FA02 		.word	50000000
 4448 02fc 2F750000 		.word	29999
 4449 0300 409C0000 		.word	40000
 4450 0304 BFC62D00 		.word	2999999
 4451 0308 0048E801 		.word	32000000
 4452 030c 00127A00 		.word	8000000
 4453 0310 D0121300 		.word	1250000
 4454 0314 A0252600 		.word	2500000
 4455 0318 404B4C00 		.word	5000000
 4456 031c 80969800 		.word	10000000
 4457 0320 002D3101 		.word	20000000
 4458 0324 0F270000 		.word	9999
 4459 0328 CF070000 		.word	1999
 4460              		.cfi_endproc
 4461              	.LFE15:
 4463              		.section	.text.fbi_blpi,"ax",%progbits
 4464              		.align	2
 4465              		.global	fbi_blpi
 4466              		.code	16
 4467              		.thumb_func
 4469              	fbi_blpi:
 4470              	.LFB16:
1090:../Sources/TFC/TFC_CrystalClock.c **** 
1091:../Sources/TFC/TFC_CrystalClock.c **** 
1092:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1093:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbi_blpi
1094:../Sources/TFC/TFC_CrystalClock.c ****  *
1095:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBI to BLPI mode
1096:../Sources/TFC/TFC_CrystalClock.c ****  *
1097:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBI mode to BLPI mode. This is
1098:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1099:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1100:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. 
1101:../Sources/TFC/TFC_CrystalClock.c ****  *
1102:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1103:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1104:../Sources/TFC/TFC_CrystalClock.c ****  *
1105:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x13
1106:../Sources/TFC/TFC_CrystalClock.c ****  */
1107:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select)
1108:../Sources/TFC/TFC_CrystalClock.c **** {
 4471              		.loc 1 1108 0
 4472              		.cfi_startproc
 4473 0000 80B5     		push	{r7, lr}
 4474              	.LCFI48:
 4475              		.cfi_def_cfa_offset 8
 4476              		.cfi_offset 7, -8
 4477              		.cfi_offset 14, -4
 4478 0002 84B0     		sub	sp, sp, #16
 4479              	.LCFI49:
 4480              		.cfi_def_cfa_offset 24
 4481 0004 00AF     		add	r7, sp, #0
 4482              	.LCFI50:
 4483              		.cfi_def_cfa_register 7
 4484 0006 7860     		str	r0, [r7, #4]
 4485 0008 0A1C     		mov	r2, r1
 4486 000a FB1C     		add	r3, r7, #3
 4487 000c 1A70     		strb	r2, [r3]
1109:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1110:../Sources/TFC/TFC_CrystalClock.c ****   
1111:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1112:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4488              		.loc 1 1112 0
 4489 000e 234B     		ldr	r3, .L350
 4490 0010 9B79     		ldrb	r3, [r3, #6]
 4491 0012 DBB2     		uxtb	r3, r3
 4492 0014 1A1C     		mov	r2, r3
 4493 0016 0C23     		mov	r3, #12
 4494 0018 1340     		and	r3, r2
 4495 001a 9B08     		lsr	r3, r3, #2
 4496 001c 012B     		cmp	r3, #1
 4497 001e 14D1     		bne	.L346
1113:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4498              		.loc 1 1113 0 discriminator 1
 4499 0020 1E4B     		ldr	r3, .L350
 4500 0022 9B79     		ldrb	r3, [r3, #6]
 4501 0024 DBB2     		uxtb	r3, r3
 4502 0026 1A1C     		mov	r2, r3
 4503 0028 1023     		mov	r3, #16
 4504 002a 1340     		and	r3, r2
1112:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4505              		.loc 1 1112 0 discriminator 1
 4506 002c 0DD0     		beq	.L346
1114:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4507              		.loc 1 1114 0
 4508 002e 1B4B     		ldr	r3, .L350
 4509 0030 9B79     		ldrb	r3, [r3, #6]
 4510 0032 DBB2     		uxtb	r3, r3
 4511 0034 1A1C     		mov	r2, r3
 4512 0036 2023     		mov	r3, #32
 4513 0038 1340     		and	r3, r2
1113:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4514              		.loc 1 1113 0
 4515 003a 06D1     		bne	.L346
1115:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4516              		.loc 1 1115 0
 4517 003c 174B     		ldr	r3, .L350
 4518 003e 5B78     		ldrb	r3, [r3, #1]
 4519 0040 DBB2     		uxtb	r3, r3
 4520 0042 1A1C     		mov	r2, r3
 4521 0044 0223     		mov	r3, #2
 4522 0046 1340     		and	r3, r2
1112:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4523              		.loc 1 1112 0
 4524 0048 01D0     		beq	.L347
 4525              	.L346:
1116:../Sources/TFC/TFC_CrystalClock.c ****   {  
1117:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4526              		.loc 1 1117 0
 4527 004a 0323     		mov	r3, #3
 4528 004c 21E0     		b	.L348
 4529              	.L347:
1118:../Sources/TFC/TFC_CrystalClock.c ****   }
1119:../Sources/TFC/TFC_CrystalClock.c **** 
1120:../Sources/TFC/TFC_CrystalClock.c **** // Set LP bit to disable the FLL and enter BLPI
1121:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 4530              		.loc 1 1121 0
 4531 004e 134B     		ldr	r3, .L350
 4532 0050 124A     		ldr	r2, .L350
 4533 0052 5278     		ldrb	r2, [r2, #1]
 4534 0054 D2B2     		uxtb	r2, r2
 4535 0056 0221     		mov	r1, #2
 4536 0058 0A43     		orr	r2, r1
 4537 005a D2B2     		uxtb	r2, r2
 4538 005c 5A70     		strb	r2, [r3, #1]
1122:../Sources/TFC/TFC_CrystalClock.c ****   
1123:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPI
1124:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4539              		.loc 1 1124 0
 4540 005e FB1C     		add	r3, r7, #3
 4541 0060 1B78     		ldrb	r3, [r3]
 4542 0062 002B     		cmp	r3, #0
 4543 0064 14D0     		beq	.L349
1125:../Sources/TFC/TFC_CrystalClock.c ****   {
1126:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4544              		.loc 1 1126 0
 4545 0066 0D4B     		ldr	r3, .L350
 4546 0068 1B7A     		ldrb	r3, [r3, #8]
 4547 006a DBB2     		uxtb	r3, r3
 4548 006c 1A1C     		mov	r2, r3
 4549 006e 0E23     		mov	r3, #14
 4550 0070 1340     		and	r3, r2
 4551 0072 5B08     		lsr	r3, r3, #1
 4552 0074 0122     		mov	r2, #1
 4553 0076 9A40     		lsl	r2, r2, r3
 4554 0078 3B1C     		mov	r3, r7
 4555 007a 0F33     		add	r3, r3, #15
 4556 007c 1A70     		strb	r2, [r3]
1127:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4557              		.loc 1 1127 0
 4558 007e 3B1C     		mov	r3, r7
 4559 0080 0F33     		add	r3, r3, #15
 4560 0082 1B78     		ldrb	r3, [r3]
 4561 0084 7868     		ldr	r0, [r7, #4]
 4562 0086 191C     		mov	r1, r3
 4563 0088 FFF7FEFF 		bl	__aeabi_idiv
 4564 008c 031C     		mov	r3, r0
 4565 008e 00E0     		b	.L348
 4566              	.L349:
1128:../Sources/TFC/TFC_CrystalClock.c ****   }
1129:../Sources/TFC/TFC_CrystalClock.c ****   else
1130:../Sources/TFC/TFC_CrystalClock.c ****   {
1131:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4567              		.loc 1 1131 0
 4568 0090 7B68     		ldr	r3, [r7, #4]
 4569              	.L348:
1132:../Sources/TFC/TFC_CrystalClock.c ****   }   
1133:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_blpi
 4570              		.loc 1 1133 0
 4571 0092 181C     		mov	r0, r3
 4572 0094 BD46     		mov	sp, r7
 4573 0096 04B0     		add	sp, sp, #16
 4574              		@ sp needed for prologue
 4575 0098 80BD     		pop	{r7, pc}
 4576              	.L351:
 4577 009a C046     		.align	2
 4578              	.L350:
 4579 009c 00400640 		.word	1074151424
 4580              		.cfi_endproc
 4581              	.LFE16:
 4583              		.section	.text.blpi_fbi,"ax",%progbits
 4584              		.align	2
 4585              		.global	blpi_fbi
 4586              		.code	16
 4587              		.thumb_func
 4589              	blpi_fbi:
 4590              	.LFB17:
1134:../Sources/TFC/TFC_CrystalClock.c **** 
1135:../Sources/TFC/TFC_CrystalClock.c **** 
1136:../Sources/TFC/TFC_CrystalClock.c **** 
1137:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1138:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : blpi_fbi
1139:../Sources/TFC/TFC_CrystalClock.c ****  *
1140:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: BLPI to FBI mode
1141:../Sources/TFC/TFC_CrystalClock.c ****  *
1142:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from BLPI mode to FBI mode. This is
1143:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by clearing the MCG_C2[LP] bit. There is no status bit to 
1144:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1145:../Sources/TFC/TFC_CrystalClock.c ****  * in BLPI mode. 
1146:../Sources/TFC/TFC_CrystalClock.c ****  *
1147:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1148:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1149:../Sources/TFC/TFC_CrystalClock.c ****  *
1150:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x15
1151:../Sources/TFC/TFC_CrystalClock.c ****  */
1152:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select)
1153:../Sources/TFC/TFC_CrystalClock.c **** {
 4591              		.loc 1 1153 0
 4592              		.cfi_startproc
 4593 0000 80B5     		push	{r7, lr}
 4594              	.LCFI51:
 4595              		.cfi_def_cfa_offset 8
 4596              		.cfi_offset 7, -8
 4597              		.cfi_offset 14, -4
 4598 0002 84B0     		sub	sp, sp, #16
 4599              	.LCFI52:
 4600              		.cfi_def_cfa_offset 24
 4601 0004 00AF     		add	r7, sp, #0
 4602              	.LCFI53:
 4603              		.cfi_def_cfa_register 7
 4604 0006 7860     		str	r0, [r7, #4]
 4605 0008 0A1C     		mov	r2, r1
 4606 000a FB1C     		add	r3, r7, #3
 4607 000c 1A70     		strb	r2, [r3]
1154:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1155:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1156:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4608              		.loc 1 1156 0
 4609 000e 234B     		ldr	r3, .L357
 4610 0010 9B79     		ldrb	r3, [r3, #6]
 4611 0012 DBB2     		uxtb	r3, r3
 4612 0014 1A1C     		mov	r2, r3
 4613 0016 0C23     		mov	r3, #12
 4614 0018 1340     		and	r3, r2
 4615 001a 9B08     		lsr	r3, r3, #2
 4616 001c 012B     		cmp	r3, #1
 4617 001e 14D1     		bne	.L353
1157:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4618              		.loc 1 1157 0 discriminator 1
 4619 0020 1E4B     		ldr	r3, .L357
 4620 0022 9B79     		ldrb	r3, [r3, #6]
 4621 0024 DBB2     		uxtb	r3, r3
 4622 0026 1A1C     		mov	r2, r3
 4623 0028 1023     		mov	r3, #16
 4624 002a 1340     		and	r3, r2
1156:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4625              		.loc 1 1156 0 discriminator 1
 4626 002c 0DD0     		beq	.L353
1158:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4627              		.loc 1 1158 0
 4628 002e 1B4B     		ldr	r3, .L357
 4629 0030 9B79     		ldrb	r3, [r3, #6]
 4630 0032 DBB2     		uxtb	r3, r3
 4631 0034 1A1C     		mov	r2, r3
 4632 0036 2023     		mov	r3, #32
 4633 0038 1340     		and	r3, r2
1157:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4634              		.loc 1 1157 0
 4635 003a 06D1     		bne	.L353
1159:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check LP bit is set
 4636              		.loc 1 1159 0
 4637 003c 174B     		ldr	r3, .L357
 4638 003e 5B78     		ldrb	r3, [r3, #1]
 4639 0040 DBB2     		uxtb	r3, r3
 4640 0042 1A1C     		mov	r2, r3
 4641 0044 0223     		mov	r3, #2
 4642 0046 1340     		and	r3, r2
1156:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4643              		.loc 1 1156 0
 4644 0048 01D1     		bne	.L354
 4645              	.L353:
1160:../Sources/TFC/TFC_CrystalClock.c ****   {
1161:../Sources/TFC/TFC_CrystalClock.c ****     return 0x5;                                                       // MCG not in correct mode re
 4646              		.loc 1 1161 0
 4647 004a 0523     		mov	r3, #5
 4648 004c 21E0     		b	.L355
 4649              	.L354:
1162:../Sources/TFC/TFC_CrystalClock.c ****   }
1163:../Sources/TFC/TFC_CrystalClock.c **** 
1164:../Sources/TFC/TFC_CrystalClock.c **** // Clear LP bit to enable the FLL and enter FBI mode   
1165:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 4650              		.loc 1 1165 0
 4651 004e 134B     		ldr	r3, .L357
 4652 0050 124A     		ldr	r2, .L357
 4653 0052 5278     		ldrb	r2, [r2, #1]
 4654 0054 D2B2     		uxtb	r2, r2
 4655 0056 0221     		mov	r1, #2
 4656 0058 8A43     		bic	r2, r1
 4657 005a D2B2     		uxtb	r2, r2
 4658 005c 5A70     		strb	r2, [r3, #1]
1166:../Sources/TFC/TFC_CrystalClock.c ****   
1167:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1168:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4659              		.loc 1 1168 0
 4660 005e FB1C     		add	r3, r7, #3
 4661 0060 1B78     		ldrb	r3, [r3]
 4662 0062 002B     		cmp	r3, #0
 4663 0064 14D0     		beq	.L356
1169:../Sources/TFC/TFC_CrystalClock.c ****   {
1170:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4664              		.loc 1 1170 0
 4665 0066 0D4B     		ldr	r3, .L357
 4666 0068 1B7A     		ldrb	r3, [r3, #8]
 4667 006a DBB2     		uxtb	r3, r3
 4668 006c 1A1C     		mov	r2, r3
 4669 006e 0E23     		mov	r3, #14
 4670 0070 1340     		and	r3, r2
 4671 0072 5B08     		lsr	r3, r3, #1
 4672 0074 0122     		mov	r2, #1
 4673 0076 9A40     		lsl	r2, r2, r3
 4674 0078 3B1C     		mov	r3, r7
 4675 007a 0F33     		add	r3, r3, #15
 4676 007c 1A70     		strb	r2, [r3]
1171:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4677              		.loc 1 1171 0
 4678 007e 3B1C     		mov	r3, r7
 4679 0080 0F33     		add	r3, r3, #15
 4680 0082 1B78     		ldrb	r3, [r3]
 4681 0084 7868     		ldr	r0, [r7, #4]
 4682 0086 191C     		mov	r1, r3
 4683 0088 FFF7FEFF 		bl	__aeabi_idiv
 4684 008c 031C     		mov	r3, r0
 4685 008e 00E0     		b	.L355
 4686              	.L356:
1172:../Sources/TFC/TFC_CrystalClock.c ****   }
1173:../Sources/TFC/TFC_CrystalClock.c ****   else
1174:../Sources/TFC/TFC_CrystalClock.c ****   {
1175:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4687              		.loc 1 1175 0
 4688 0090 7B68     		ldr	r3, [r7, #4]
 4689              	.L355:
1176:../Sources/TFC/TFC_CrystalClock.c ****   }
1177:../Sources/TFC/TFC_CrystalClock.c **** } // blpi_fbi
 4690              		.loc 1 1177 0
 4691 0092 181C     		mov	r0, r3
 4692 0094 BD46     		mov	sp, r7
 4693 0096 04B0     		add	sp, sp, #16
 4694              		@ sp needed for prologue
 4695 0098 80BD     		pop	{r7, pc}
 4696              	.L358:
 4697 009a C046     		.align	2
 4698              	.L357:
 4699 009c 00400640 		.word	1074151424
 4700              		.cfi_endproc
 4701              	.LFE17:
 4703              		.section	.text.fbi_fee,"ax",%progbits
 4704              		.align	2
 4705              		.global	fbi_fee
 4706              		.code	16
 4707              		.thumb_func
 4709              	fbi_fee:
 4710              	.LFB18:
1178:../Sources/TFC/TFC_CrystalClock.c **** 
1179:../Sources/TFC/TFC_CrystalClock.c **** 
1180:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1181:../Sources/TFC/TFC_CrystalClock.c **** {
 4711              		.loc 1 1181 0
 4712              		.cfi_startproc
 4713 0000 80B5     		push	{r7, lr}
 4714              	.LCFI54:
 4715              		.cfi_def_cfa_offset 8
 4716              		.cfi_offset 7, -8
 4717              		.cfi_offset 14, -4
 4718 0002 86B0     		sub	sp, sp, #24
 4719              	.LCFI55:
 4720              		.cfi_def_cfa_offset 32
 4721 0004 00AF     		add	r7, sp, #0
 4722              	.LCFI56:
 4723              		.cfi_def_cfa_register 7
 4724 0006 7860     		str	r0, [r7, #4]
 4725 0008 FB1C     		add	r3, r7, #3
 4726 000a 1970     		strb	r1, [r3]
 4727 000c BB1C     		add	r3, r7, #2
 4728 000e 1A70     		strb	r2, [r3]
1182:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1183:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1184:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1185:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq;
1186:../Sources/TFC/TFC_CrystalClock.c **** 
1187:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1188:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4729              		.loc 1 1188 0
 4730 0010 C04B     		ldr	r3, .L398
 4731 0012 9B79     		ldrb	r3, [r3, #6]
 4732 0014 DBB2     		uxtb	r3, r3
 4733 0016 1A1C     		mov	r2, r3
 4734 0018 0C23     		mov	r3, #12
 4735 001a 1340     		and	r3, r2
 4736 001c 9B08     		lsr	r3, r3, #2
 4737 001e 012B     		cmp	r3, #1
 4738 0020 14D1     		bne	.L360
1189:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4739              		.loc 1 1189 0 discriminator 1
 4740 0022 BC4B     		ldr	r3, .L398
 4741 0024 9B79     		ldrb	r3, [r3, #6]
 4742 0026 DBB2     		uxtb	r3, r3
 4743 0028 1A1C     		mov	r2, r3
 4744 002a 1023     		mov	r3, #16
 4745 002c 1340     		and	r3, r2
1188:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4746              		.loc 1 1188 0 discriminator 1
 4747 002e 0DD0     		beq	.L360
1190:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4748              		.loc 1 1190 0
 4749 0030 B84B     		ldr	r3, .L398
 4750 0032 9B79     		ldrb	r3, [r3, #6]
 4751 0034 DBB2     		uxtb	r3, r3
 4752 0036 1A1C     		mov	r2, r3
 4753 0038 2023     		mov	r3, #32
 4754 003a 1340     		and	r3, r2
1189:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4755              		.loc 1 1189 0
 4756 003c 06D1     		bne	.L360
1191:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4757              		.loc 1 1191 0
 4758 003e B54B     		ldr	r3, .L398
 4759 0040 5B78     		ldrb	r3, [r3, #1]
 4760 0042 DBB2     		uxtb	r3, r3
 4761 0044 1A1C     		mov	r2, r3
 4762 0046 0223     		mov	r3, #2
 4763 0048 1340     		and	r3, r2
1188:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4764              		.loc 1 1188 0
 4765 004a 01D0     		beq	.L361
 4766              	.L360:
1192:../Sources/TFC/TFC_CrystalClock.c ****   {  
1193:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4767              		.loc 1 1193 0
 4768 004c 0323     		mov	r3, #3
 4769 004e 91E1     		b	.L362
 4770              	.L361:
1194:../Sources/TFC/TFC_CrystalClock.c ****   }
1195:../Sources/TFC/TFC_CrystalClock.c ****   
1196:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1197:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4771              		.loc 1 1197 0
 4772 0050 7A68     		ldr	r2, [r7, #4]
 4773 0052 B14B     		ldr	r3, .L398+4
 4774 0054 9A42     		cmp	r2, r3
 4775 0056 01DD     		ble	.L363
 4776              		.loc 1 1197 0 is_stmt 0 discriminator 1
 4777 0058 2123     		mov	r3, #33
 4778 005a 8BE1     		b	.L362
 4779              	.L363:
1198:../Sources/TFC/TFC_CrystalClock.c ****   
1199:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1200:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4780              		.loc 1 1200 0 is_stmt 1
 4781 005c BB1C     		add	r3, r7, #2
 4782 005e 1B78     		ldrb	r3, [r3]
 4783 0060 002B     		cmp	r3, #0
 4784 0062 11D0     		beq	.L364
1201:../Sources/TFC/TFC_CrystalClock.c ****   {
1202:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4785              		.loc 1 1202 0
 4786 0064 7A68     		ldr	r2, [r7, #4]
 4787 0066 AD4B     		ldr	r3, .L398+8
 4788 0068 9A42     		cmp	r2, r3
 4789 006a 0BDD     		ble	.L365
 4790              		.loc 1 1202 0 is_stmt 0 discriminator 1
 4791 006c 7A68     		ldr	r2, [r7, #4]
 4792 006e AC4B     		ldr	r3, .L398+12
 4793 0070 9A42     		cmp	r2, r3
 4794 0072 03DD     		ble	.L366
1203:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4795              		.loc 1 1203 0 is_stmt 1
 4796 0074 7A68     		ldr	r2, [r7, #4]
 4797 0076 AB4B     		ldr	r3, .L398+16
 4798 0078 9A42     		cmp	r2, r3
 4799 007a 03DD     		ble	.L365
 4800              	.L366:
 4801              		.loc 1 1203 0 is_stmt 0 discriminator 1
 4802 007c 7A68     		ldr	r2, [r7, #4]
 4803 007e AA4B     		ldr	r3, .L398+20
 4804 0080 9A42     		cmp	r2, r3
 4805 0082 01DD     		ble	.L364
 4806              	.L365:
1204:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4807              		.loc 1 1204 0 is_stmt 1
 4808 0084 2223     		mov	r3, #34
 4809 0086 75E1     		b	.L362
 4810              	.L364:
1205:../Sources/TFC/TFC_CrystalClock.c ****   }
1206:../Sources/TFC/TFC_CrystalClock.c **** 
1207:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1208:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4811              		.loc 1 1208 0
 4812 0088 FB1C     		add	r3, r7, #3
 4813 008a 1B78     		ldrb	r3, [r3]
 4814 008c 002B     		cmp	r3, #0
 4815 008e 02D0     		beq	.L367
1209:../Sources/TFC/TFC_CrystalClock.c ****   {
1210:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4816              		.loc 1 1210 0
 4817 0090 FB1C     		add	r3, r7, #3
 4818 0092 0122     		mov	r2, #1
 4819 0094 1A70     		strb	r2, [r3]
 4820              	.L367:
1211:../Sources/TFC/TFC_CrystalClock.c ****   }
1212:../Sources/TFC/TFC_CrystalClock.c **** 
1213:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1214:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1215:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1216:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4821              		.loc 1 1216 0
 4822 0096 9F4A     		ldr	r2, .L398
 4823 0098 3B1C     		mov	r3, r7
 4824 009a 1733     		add	r3, r3, #23
 4825 009c 5278     		ldrb	r2, [r2, #1]
 4826 009e 1A70     		strb	r2, [r3]
1217:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4827              		.loc 1 1217 0
 4828 00a0 3B1C     		mov	r3, r7
 4829 00a2 1733     		add	r3, r3, #23
 4830 00a4 3A1C     		mov	r2, r7
 4831 00a6 1732     		add	r2, r2, #23
 4832 00a8 1278     		ldrb	r2, [r2]
 4833 00aa 3C21     		mov	r1, #60
 4834 00ac 8A43     		bic	r2, r1
 4835 00ae 1A70     		strb	r2, [r3]
1218:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4836              		.loc 1 1218 0
 4837 00b0 7A68     		ldr	r2, [r7, #4]
 4838 00b2 9B4B     		ldr	r3, .L398+12
 4839 00b4 9A42     		cmp	r2, r3
 4840 00b6 11DC     		bgt	.L368
1219:../Sources/TFC/TFC_CrystalClock.c ****   {
1220:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4841              		.loc 1 1220 0
 4842 00b8 FB1C     		add	r3, r7, #3
 4843 00ba 1B78     		ldrb	r3, [r3]
 4844 00bc DB00     		lsl	r3, r3, #3
 4845 00be DAB2     		uxtb	r2, r3
 4846 00c0 BB1C     		add	r3, r7, #2
 4847 00c2 1B78     		ldrb	r3, [r3]
 4848 00c4 9B00     		lsl	r3, r3, #2
 4849 00c6 DBB2     		uxtb	r3, r3
 4850 00c8 1343     		orr	r3, r2
 4851 00ca D9B2     		uxtb	r1, r3
 4852 00cc 3B1C     		mov	r3, r7
 4853 00ce 1733     		add	r3, r3, #23
 4854 00d0 3A1C     		mov	r2, r7
 4855 00d2 1732     		add	r2, r2, #23
 4856 00d4 1278     		ldrb	r2, [r2]
 4857 00d6 0A43     		orr	r2, r1
 4858 00d8 1A70     		strb	r2, [r3]
 4859 00da 2CE0     		b	.L369
 4860              	.L368:
1221:../Sources/TFC/TFC_CrystalClock.c ****   }
1222:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4861              		.loc 1 1222 0
 4862 00dc 7A68     		ldr	r2, [r7, #4]
 4863 00de 934B     		ldr	r3, .L398+24
 4864 00e0 9A42     		cmp	r2, r3
 4865 00e2 14DC     		bgt	.L370
1223:../Sources/TFC/TFC_CrystalClock.c ****   {
1224:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4866              		.loc 1 1224 0
 4867 00e4 FB1C     		add	r3, r7, #3
 4868 00e6 1B78     		ldrb	r3, [r3]
 4869 00e8 DB00     		lsl	r3, r3, #3
 4870 00ea DAB2     		uxtb	r2, r3
 4871 00ec BB1C     		add	r3, r7, #2
 4872 00ee 1B78     		ldrb	r3, [r3]
 4873 00f0 9B00     		lsl	r3, r3, #2
 4874 00f2 DBB2     		uxtb	r3, r3
 4875 00f4 1343     		orr	r3, r2
 4876 00f6 DAB2     		uxtb	r2, r3
 4877 00f8 3B1C     		mov	r3, r7
 4878 00fa 1733     		add	r3, r3, #23
 4879 00fc 1B78     		ldrb	r3, [r3]
 4880 00fe 1343     		orr	r3, r2
 4881 0100 DAB2     		uxtb	r2, r3
 4882 0102 3B1C     		mov	r3, r7
 4883 0104 1733     		add	r3, r3, #23
 4884 0106 1021     		mov	r1, #16
 4885 0108 0A43     		orr	r2, r1
 4886 010a 1A70     		strb	r2, [r3]
 4887 010c 13E0     		b	.L369
 4888              	.L370:
1225:../Sources/TFC/TFC_CrystalClock.c ****   }
1226:../Sources/TFC/TFC_CrystalClock.c ****   else
1227:../Sources/TFC/TFC_CrystalClock.c ****   {
1228:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4889              		.loc 1 1228 0
 4890 010e FB1C     		add	r3, r7, #3
 4891 0110 1B78     		ldrb	r3, [r3]
 4892 0112 DB00     		lsl	r3, r3, #3
 4893 0114 DAB2     		uxtb	r2, r3
 4894 0116 BB1C     		add	r3, r7, #2
 4895 0118 1B78     		ldrb	r3, [r3]
 4896 011a 9B00     		lsl	r3, r3, #2
 4897 011c DBB2     		uxtb	r3, r3
 4898 011e 1343     		orr	r3, r2
 4899 0120 DAB2     		uxtb	r2, r3
 4900 0122 3B1C     		mov	r3, r7
 4901 0124 1733     		add	r3, r3, #23
 4902 0126 1B78     		ldrb	r3, [r3]
 4903 0128 1343     		orr	r3, r2
 4904 012a DAB2     		uxtb	r2, r3
 4905 012c 3B1C     		mov	r3, r7
 4906 012e 1733     		add	r3, r3, #23
 4907 0130 2021     		mov	r1, #32
 4908 0132 0A43     		orr	r2, r1
 4909 0134 1A70     		strb	r2, [r3]
 4910              	.L369:
1229:../Sources/TFC/TFC_CrystalClock.c ****   }
1230:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4911              		.loc 1 1230 0
 4912 0136 774B     		ldr	r3, .L398
 4913 0138 3A1C     		mov	r2, r7
 4914 013a 1732     		add	r2, r2, #23
 4915 013c 1278     		ldrb	r2, [r2]
 4916 013e 5A70     		strb	r2, [r3, #1]
1231:../Sources/TFC/TFC_CrystalClock.c **** 
1232:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1233:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1234:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4917              		.loc 1 1234 0
 4918 0140 7A68     		ldr	r2, [r7, #4]
 4919 0142 7B4B     		ldr	r3, .L398+28
 4920 0144 9A42     		cmp	r2, r3
 4921 0146 04DC     		bgt	.L371
 4922              		.loc 1 1234 0 is_stmt 0 discriminator 1
 4923 0148 3B1C     		mov	r3, r7
 4924 014a 1633     		add	r3, r3, #22
 4925 014c 0022     		mov	r2, #0
 4926 014e 1A70     		strb	r2, [r3]
 4927 0150 27E0     		b	.L372
 4928              	.L371:
1235:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4929              		.loc 1 1235 0 is_stmt 1
 4930 0152 7A68     		ldr	r2, [r7, #4]
 4931 0154 774B     		ldr	r3, .L398+32
 4932 0156 9A42     		cmp	r2, r3
 4933 0158 04DC     		bgt	.L373
 4934              		.loc 1 1235 0 is_stmt 0 discriminator 1
 4935 015a 3B1C     		mov	r3, r7
 4936 015c 1633     		add	r3, r3, #22
 4937 015e 0122     		mov	r2, #1
 4938 0160 1A70     		strb	r2, [r3]
 4939 0162 1EE0     		b	.L372
 4940              	.L373:
1236:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4941              		.loc 1 1236 0 is_stmt 1
 4942 0164 7A68     		ldr	r2, [r7, #4]
 4943 0166 744B     		ldr	r3, .L398+36
 4944 0168 9A42     		cmp	r2, r3
 4945 016a 04DC     		bgt	.L374
 4946              		.loc 1 1236 0 is_stmt 0 discriminator 1
 4947 016c 3B1C     		mov	r3, r7
 4948 016e 1633     		add	r3, r3, #22
 4949 0170 0222     		mov	r2, #2
 4950 0172 1A70     		strb	r2, [r3]
 4951 0174 15E0     		b	.L372
 4952              	.L374:
1237:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4953              		.loc 1 1237 0 is_stmt 1
 4954 0176 7A68     		ldr	r2, [r7, #4]
 4955 0178 704B     		ldr	r3, .L398+40
 4956 017a 9A42     		cmp	r2, r3
 4957 017c 04DC     		bgt	.L375
 4958              		.loc 1 1237 0 is_stmt 0 discriminator 1
 4959 017e 3B1C     		mov	r3, r7
 4960 0180 1633     		add	r3, r3, #22
 4961 0182 0322     		mov	r2, #3
 4962 0184 1A70     		strb	r2, [r3]
 4963 0186 0CE0     		b	.L372
 4964              	.L375:
1238:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4965              		.loc 1 1238 0 is_stmt 1
 4966 0188 7A68     		ldr	r2, [r7, #4]
 4967 018a 6D4B     		ldr	r3, .L398+44
 4968 018c 9A42     		cmp	r2, r3
 4969 018e 04DC     		bgt	.L376
 4970              		.loc 1 1238 0 is_stmt 0 discriminator 1
 4971 0190 3B1C     		mov	r3, r7
 4972 0192 1633     		add	r3, r3, #22
 4973 0194 0422     		mov	r2, #4
 4974 0196 1A70     		strb	r2, [r3]
 4975 0198 03E0     		b	.L372
 4976              	.L376:
1239:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4977              		.loc 1 1239 0 is_stmt 1
 4978 019a 3B1C     		mov	r3, r7
 4979 019c 1633     		add	r3, r3, #22
 4980 019e 0522     		mov	r2, #5
 4981 01a0 1A70     		strb	r2, [r3]
 4982              	.L372:
1240:../Sources/TFC/TFC_CrystalClock.c **** // The FLL ref clk divide value depends on FRDIV and the RANGE value
1241:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 4983              		.loc 1 1241 0
 4984 01a2 5C4B     		ldr	r3, .L398
 4985 01a4 5B78     		ldrb	r3, [r3, #1]
 4986 01a6 DBB2     		uxtb	r3, r3
 4987 01a8 1A1C     		mov	r2, r3
 4988 01aa 3023     		mov	r3, #48
 4989 01ac 1340     		and	r3, r2
 4990 01ae 1B09     		lsr	r3, r3, #4
 4991 01b0 0DD0     		beq	.L377
1242:../Sources/TFC/TFC_CrystalClock.c ****   {
1243:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 4992              		.loc 1 1243 0
 4993 01b2 3B1C     		mov	r3, r7
 4994 01b4 1633     		add	r3, r3, #22
 4995 01b6 1B78     		ldrb	r3, [r3]
 4996 01b8 2022     		mov	r2, #32
 4997 01ba 111C     		mov	r1, r2
 4998 01bc 9940     		lsl	r1, r1, r3
 4999 01be 0B1C     		mov	r3, r1
 5000 01c0 7868     		ldr	r0, [r7, #4]
 5001 01c2 191C     		mov	r1, r3
 5002 01c4 FFF7FEFF 		bl	__aeabi_idiv
 5003 01c8 031C     		mov	r3, r0
 5004 01ca 3B61     		str	r3, [r7, #16]
 5005 01cc 0CE0     		b	.L378
 5006              	.L377:
1244:../Sources/TFC/TFC_CrystalClock.c ****   }
1245:../Sources/TFC/TFC_CrystalClock.c ****   else
1246:../Sources/TFC/TFC_CrystalClock.c ****   {
1247:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 5007              		.loc 1 1247 0
 5008 01ce 3B1C     		mov	r3, r7
 5009 01d0 1633     		add	r3, r3, #22
 5010 01d2 1B78     		ldrb	r3, [r3]
 5011 01d4 0122     		mov	r2, #1
 5012 01d6 111C     		mov	r1, r2
 5013 01d8 9940     		lsl	r1, r1, r3
 5014 01da 0B1C     		mov	r3, r1
 5015 01dc 7868     		ldr	r0, [r7, #4]
 5016 01de 191C     		mov	r1, r3
 5017 01e0 FFF7FEFF 		bl	__aeabi_idiv
 5018 01e4 031C     		mov	r3, r0
 5019 01e6 3B61     		str	r3, [r7, #16]
 5020              	.L378:
1248:../Sources/TFC/TFC_CrystalClock.c ****   }
1249:../Sources/TFC/TFC_CrystalClock.c ****   
1250:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1251:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 5021              		.loc 1 1251 0
 5022 01e8 3B69     		ldr	r3, [r7, #16]
 5023 01ea 181C     		mov	r0, r3
 5024 01ec FFF7FEFF 		bl	fll_freq
 5025 01f0 031C     		mov	r3, r0
 5026 01f2 FB60     		str	r3, [r7, #12]
1252:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5027              		.loc 1 1252 0
 5028 01f4 FB68     		ldr	r3, [r7, #12]
 5029 01f6 3B2B     		cmp	r3, #59
 5030 01f8 01DC     		bgt	.L379
 5031              		.loc 1 1252 0 is_stmt 0 discriminator 1
 5032 01fa FB68     		ldr	r3, [r7, #12]
 5033 01fc BAE0     		b	.L362
 5034              	.L379:
1253:../Sources/TFC/TFC_CrystalClock.c ****   
1254:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1255:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1256:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=?, IREFSTEN=?
1257:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5035              		.loc 1 1257 0 is_stmt 1
 5036 01fe 454A     		ldr	r2, .L398
 5037 0200 3B1C     		mov	r3, r7
 5038 0202 1733     		add	r3, r3, #23
 5039 0204 1278     		ldrb	r2, [r2]
 5040 0206 1A70     		strb	r2, [r3]
1258:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear CLKS, FRDIV and
 5041              		.loc 1 1258 0
 5042 0208 3B1C     		mov	r3, r7
 5043 020a 1733     		add	r3, r3, #23
 5044 020c 3A1C     		mov	r2, r7
 5045 020e 1732     		add	r2, r2, #23
 5046 0210 1178     		ldrb	r1, [r2]
 5047 0212 0322     		mov	r2, #3
 5048 0214 0A40     		and	r2, r1
 5049 0216 1A70     		strb	r2, [r3]
1259:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 5050              		.loc 1 1259 0
 5051 0218 3B1C     		mov	r3, r7
 5052 021a 1633     		add	r3, r3, #22
 5053 021c 1B78     		ldrb	r3, [r3]
 5054 021e DB00     		lsl	r3, r3, #3
 5055 0220 DAB2     		uxtb	r2, r3
 5056 0222 3823     		mov	r3, #56
 5057 0224 1340     		and	r3, r2
 5058 0226 D9B2     		uxtb	r1, r3
 5059 0228 3B1C     		mov	r3, r7
 5060 022a 1733     		add	r3, r3, #23
 5061 022c 3A1C     		mov	r2, r7
 5062 022e 1732     		add	r2, r2, #23
 5063 0230 1278     		ldrb	r2, [r2]
 5064 0232 0A43     		orr	r2, r1
 5065 0234 1A70     		strb	r2, [r3]
1260:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 5066              		.loc 1 1260 0
 5067 0236 374B     		ldr	r3, .L398
 5068 0238 3A1C     		mov	r2, r7
 5069 023a 1732     		add	r2, r2, #23
 5070 023c 1278     		ldrb	r2, [r2]
 5071 023e 1A70     		strb	r2, [r3]
1261:../Sources/TFC/TFC_CrystalClock.c **** 
1262:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1263:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 5072              		.loc 1 1263 0
 5073 0240 BB1C     		add	r3, r7, #2
 5074 0242 1B78     		ldrb	r3, [r3]
 5075 0244 002B     		cmp	r3, #0
 5076 0246 24D0     		beq	.L380
1264:../Sources/TFC/TFC_CrystalClock.c ****   {
1265:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5077              		.loc 1 1265 0
 5078 0248 3B1C     		mov	r3, r7
 5079 024a 1433     		add	r3, r3, #20
 5080 024c 0022     		mov	r2, #0
 5081 024e 1A80     		strh	r2, [r3]
 5082 0250 0DE0     		b	.L381
 5083              	.L384:
1266:../Sources/TFC/TFC_CrystalClock.c ****     {
1267:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 5084              		.loc 1 1267 0
 5085 0252 304B     		ldr	r3, .L398
 5086 0254 9B79     		ldrb	r3, [r3, #6]
 5087 0256 DBB2     		uxtb	r3, r3
 5088 0258 1A1C     		mov	r2, r3
 5089 025a 0223     		mov	r3, #2
 5090 025c 1340     		and	r3, r2
 5091 025e 0ED1     		bne	.L395
 5092              	.L382:
1265:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5093              		.loc 1 1265 0
 5094 0260 3B1C     		mov	r3, r7
 5095 0262 1433     		add	r3, r3, #20
 5096 0264 3A1C     		mov	r2, r7
 5097 0266 1432     		add	r2, r2, #20
 5098 0268 1288     		ldrh	r2, [r2]
 5099 026a 0132     		add	r2, r2, #1
 5100 026c 1A80     		strh	r2, [r3]
 5101              	.L381:
1265:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5102              		.loc 1 1265 0 is_stmt 0 discriminator 1
 5103 026e 3B1C     		mov	r3, r7
 5104 0270 1433     		add	r3, r3, #20
 5105 0272 0021     		mov	r1, #0
 5106 0274 5A5E     		ldrsh	r2, [r3, r1]
 5107 0276 334B     		ldr	r3, .L398+48
 5108 0278 9A42     		cmp	r2, r3
 5109 027a EADD     		ble	.L384
 5110 027c 00E0     		b	.L383
 5111              	.L395:
 5112              		.loc 1 1267 0 is_stmt 1
 5113 027e C046     		mov	r8, r8
 5114              	.L383:
1268:../Sources/TFC/TFC_CrystalClock.c ****     }
1269:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 5115              		.loc 1 1269 0
 5116 0280 244B     		ldr	r3, .L398
 5117 0282 9B79     		ldrb	r3, [r3, #6]
 5118 0284 DBB2     		uxtb	r3, r3
 5119 0286 1A1C     		mov	r2, r3
 5120 0288 0223     		mov	r3, #2
 5121 028a 1340     		and	r3, r2
 5122 028c 01D1     		bne	.L380
 5123              		.loc 1 1269 0 is_stmt 0 discriminator 1
 5124 028e 2323     		mov	r3, #35
 5125 0290 70E0     		b	.L362
 5126              	.L380:
1270:../Sources/TFC/TFC_CrystalClock.c ****   }
1271:../Sources/TFC/TFC_CrystalClock.c **** 
1272:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1273:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5127              		.loc 1 1273 0 is_stmt 1
 5128 0292 3B1C     		mov	r3, r7
 5129 0294 1433     		add	r3, r3, #20
 5130 0296 0022     		mov	r2, #0
 5131 0298 1A80     		strh	r2, [r3]
 5132 029a 0DE0     		b	.L385
 5133              	.L388:
1274:../Sources/TFC/TFC_CrystalClock.c ****   {
1275:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 5134              		.loc 1 1275 0
 5135 029c 1D4B     		ldr	r3, .L398
 5136 029e 9B79     		ldrb	r3, [r3, #6]
 5137 02a0 DBB2     		uxtb	r3, r3
 5138 02a2 1A1C     		mov	r2, r3
 5139 02a4 1023     		mov	r3, #16
 5140 02a6 1340     		and	r3, r2
 5141 02a8 0ED0     		beq	.L396
 5142              	.L386:
1273:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5143              		.loc 1 1273 0
 5144 02aa 3B1C     		mov	r3, r7
 5145 02ac 1433     		add	r3, r3, #20
 5146 02ae 3A1C     		mov	r2, r7
 5147 02b0 1432     		add	r2, r2, #20
 5148 02b2 1288     		ldrh	r2, [r2]
 5149 02b4 0132     		add	r2, r2, #1
 5150 02b6 1A80     		strh	r2, [r3]
 5151              	.L385:
1273:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5152              		.loc 1 1273 0 is_stmt 0 discriminator 1
 5153 02b8 3B1C     		mov	r3, r7
 5154 02ba 1433     		add	r3, r3, #20
 5155 02bc 0021     		mov	r1, #0
 5156 02be 5A5E     		ldrsh	r2, [r3, r1]
 5157 02c0 214B     		ldr	r3, .L398+52
 5158 02c2 9A42     		cmp	r2, r3
 5159 02c4 EADD     		ble	.L388
 5160 02c6 00E0     		b	.L387
 5161              	.L396:
 5162              		.loc 1 1275 0 is_stmt 1
 5163 02c8 C046     		mov	r8, r8
 5164              	.L387:
1276:../Sources/TFC/TFC_CrystalClock.c ****   }
1277:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 5165              		.loc 1 1277 0
 5166 02ca 124B     		ldr	r3, .L398
 5167 02cc 9B79     		ldrb	r3, [r3, #6]
 5168 02ce DBB2     		uxtb	r3, r3
 5169 02d0 1A1C     		mov	r2, r3
 5170 02d2 1023     		mov	r3, #16
 5171 02d4 1340     		and	r3, r2
 5172 02d6 01D0     		beq	.L389
 5173              		.loc 1 1277 0 is_stmt 0 discriminator 1
 5174 02d8 1123     		mov	r3, #17
 5175 02da 4BE0     		b	.L362
 5176              	.L389:
1278:../Sources/TFC/TFC_CrystalClock.c ****   
1279:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1280:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5177              		.loc 1 1280 0 is_stmt 1
 5178 02dc 3B1C     		mov	r3, r7
 5179 02de 1433     		add	r3, r3, #20
 5180 02e0 0022     		mov	r2, #0
 5181 02e2 1A80     		strh	r2, [r3]
 5182 02e4 0EE0     		b	.L390
 5183              	.L393:
1281:../Sources/TFC/TFC_CrystalClock.c ****   {
1282:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5184              		.loc 1 1282 0
 5185 02e6 0B4B     		ldr	r3, .L398
 5186 02e8 9B79     		ldrb	r3, [r3, #6]
 5187 02ea DBB2     		uxtb	r3, r3
 5188 02ec 1A1C     		mov	r2, r3
 5189 02ee 0C23     		mov	r3, #12
 5190 02f0 1340     		and	r3, r2
 5191 02f2 9B08     		lsr	r3, r3, #2
 5192 02f4 2AD0     		beq	.L397
 5193              	.L391:
1280:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5194              		.loc 1 1280 0
 5195 02f6 3B1C     		mov	r3, r7
 5196 02f8 1433     		add	r3, r3, #20
 5197 02fa 3A1C     		mov	r2, r7
 5198 02fc 1432     		add	r2, r2, #20
 5199 02fe 1288     		ldrh	r2, [r2]
 5200 0300 0132     		add	r2, r2, #1
 5201 0302 1A80     		strh	r2, [r3]
 5202              	.L390:
1280:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5203              		.loc 1 1280 0 is_stmt 0 discriminator 1
 5204 0304 3B1C     		mov	r3, r7
 5205 0306 1433     		add	r3, r3, #20
 5206 0308 0021     		mov	r1, #0
 5207 030a 5A5E     		ldrsh	r2, [r3, r1]
 5208 030c 0E4B     		ldr	r3, .L398+52
 5209 030e 9A42     		cmp	r2, r3
 5210 0310 E9DD     		ble	.L393
 5211 0312 1CE0     		b	.L392
 5212              	.L399:
 5213              		.align	2
 5214              	.L398:
 5215 0314 00400640 		.word	1074151424
 5216 0318 80F0FA02 		.word	50000000
 5217 031c 2F750000 		.word	29999
 5218 0320 409C0000 		.word	40000
 5219 0324 BFC62D00 		.word	2999999
 5220 0328 0048E801 		.word	32000000
 5221 032c 00127A00 		.word	8000000
 5222 0330 D0121300 		.word	1250000
 5223 0334 A0252600 		.word	2500000
 5224 0338 404B4C00 		.word	5000000
 5225 033c 80969800 		.word	10000000
 5226 0340 002D3101 		.word	20000000
 5227 0344 0F270000 		.word	9999
 5228 0348 CF070000 		.word	1999
 5229              	.L397:
 5230              		.loc 1 1282 0 is_stmt 1
 5231 034c C046     		mov	r8, r8
 5232              	.L392:
1283:../Sources/TFC/TFC_CrystalClock.c ****   }
1284:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLLK is reall
 5233              		.loc 1 1284 0
 5234 034e 0B4B     		ldr	r3, .L400
 5235 0350 9B79     		ldrb	r3, [r3, #6]
 5236 0352 DBB2     		uxtb	r3, r3
 5237 0354 1A1C     		mov	r2, r3
 5238 0356 0C23     		mov	r3, #12
 5239 0358 1340     		and	r3, r2
 5240 035a 9B08     		lsr	r3, r3, #2
 5241 035c 01D0     		beq	.L394
 5242              		.loc 1 1284 0 is_stmt 0 discriminator 1
 5243 035e 1823     		mov	r3, #24
 5244 0360 08E0     		b	.L362
 5245              	.L394:
1285:../Sources/TFC/TFC_CrystalClock.c ****  
1286:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE  
1287:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1288:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1289:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor MUST be disabled when returning to a non-external clock mode (FEI, FBI and BLP
1290:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 5246              		.loc 1 1290 0 is_stmt 1
 5247 0362 064B     		ldr	r3, .L400
 5248 0364 054A     		ldr	r2, .L400
 5249 0366 5279     		ldrb	r2, [r2, #5]
 5250 0368 D2B2     		uxtb	r2, r2
 5251 036a 2021     		mov	r1, #32
 5252 036c 0A43     		orr	r2, r1
 5253 036e D2B2     		uxtb	r2, r2
 5254 0370 5A71     		strb	r2, [r3, #5]
1291:../Sources/TFC/TFC_CrystalClock.c ****   
1292:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 5255              		.loc 1 1292 0
 5256 0372 FB68     		ldr	r3, [r7, #12]
 5257              	.L362:
1293:../Sources/TFC/TFC_CrystalClock.c **** } //fbi_fee
 5258              		.loc 1 1293 0
 5259 0374 181C     		mov	r0, r3
 5260 0376 BD46     		mov	sp, r7
 5261 0378 06B0     		add	sp, sp, #24
 5262              		@ sp needed for prologue
 5263 037a 80BD     		pop	{r7, pc}
 5264              	.L401:
 5265              		.align	2
 5266              	.L400:
 5267 037c 00400640 		.word	1074151424
 5268              		.cfi_endproc
 5269              	.LFE18:
 5271              		.section	.text.fee_fbi,"ax",%progbits
 5272              		.align	2
 5273              		.global	fee_fbi
 5274              		.code	16
 5275              		.thumb_func
 5277              	fee_fbi:
 5278              	.LFB19:
1294:../Sources/TFC/TFC_CrystalClock.c **** 
1295:../Sources/TFC/TFC_CrystalClock.c **** 
1296:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select)
1297:../Sources/TFC/TFC_CrystalClock.c **** { 
 5279              		.loc 1 1297 0
 5280              		.cfi_startproc
 5281 0000 80B5     		push	{r7, lr}
 5282              	.LCFI57:
 5283              		.cfi_def_cfa_offset 8
 5284              		.cfi_offset 7, -8
 5285              		.cfi_offset 14, -4
 5286 0002 84B0     		sub	sp, sp, #16
 5287              	.LCFI58:
 5288              		.cfi_def_cfa_offset 24
 5289 0004 00AF     		add	r7, sp, #0
 5290              	.LCFI59:
 5291              		.cfi_def_cfa_register 7
 5292 0006 7860     		str	r0, [r7, #4]
 5293 0008 0A1C     		mov	r2, r1
 5294 000a FB1C     		add	r3, r7, #3
 5295 000c 1A70     		strb	r2, [r3]
1298:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1299:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1300:../Sources/TFC/TFC_CrystalClock.c ****   
1301:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1302:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5296              		.loc 1 1302 0
 5297 000e 894B     		ldr	r3, .L437
 5298 0010 9B79     		ldrb	r3, [r3, #6]
 5299 0012 DBB2     		uxtb	r3, r3
 5300 0014 1A1C     		mov	r2, r3
 5301 0016 0C23     		mov	r3, #12
 5302 0018 1340     		and	r3, r2
 5303 001a 9B08     		lsr	r3, r3, #2
 5304 001c 0DD1     		bne	.L403
1303:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 5305              		.loc 1 1303 0 discriminator 1
 5306 001e 854B     		ldr	r3, .L437
 5307 0020 9B79     		ldrb	r3, [r3, #6]
 5308 0022 DBB2     		uxtb	r3, r3
 5309 0024 1A1C     		mov	r2, r3
 5310 0026 1023     		mov	r3, #16
 5311 0028 1340     		and	r3, r2
1302:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5312              		.loc 1 1302 0 discriminator 1
 5313 002a 06D1     		bne	.L403
1304:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 5314              		.loc 1 1304 0 discriminator 1
 5315 002c 814B     		ldr	r3, .L437
 5316 002e 9B79     		ldrb	r3, [r3, #6]
 5317 0030 DBB2     		uxtb	r3, r3
 5318 0032 1A1C     		mov	r2, r3
 5319 0034 2023     		mov	r3, #32
 5320 0036 1340     		and	r3, r2
1302:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5321              		.loc 1 1302 0 discriminator 1
 5322 0038 01D0     		beq	.L404
 5323              	.L403:
1305:../Sources/TFC/TFC_CrystalClock.c ****   {
1306:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 5324              		.loc 1 1306 0
 5325 003a 0223     		mov	r3, #2
 5326 003c F6E0     		b	.L405
 5327              	.L404:
1307:../Sources/TFC/TFC_CrystalClock.c ****   }
1308:../Sources/TFC/TFC_CrystalClock.c ****   
1309:../Sources/TFC/TFC_CrystalClock.c ****   // Check that the irc frequency matches the selected IRC 
1310:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5328              		.loc 1 1310 0
 5329 003e FB1C     		add	r3, r7, #3
 5330 0040 1B78     		ldrb	r3, [r3]
 5331 0042 002B     		cmp	r3, #0
 5332 0044 09D1     		bne	.L406
1311:../Sources/TFC/TFC_CrystalClock.c ****   {    
1312:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5333              		.loc 1 1312 0
 5334 0046 7A68     		ldr	r2, [r7, #4]
 5335 0048 7B4B     		ldr	r3, .L437+4
 5336 004a 9A42     		cmp	r2, r3
 5337 004c 03DD     		ble	.L407
 5338              		.loc 1 1312 0 is_stmt 0 discriminator 2
 5339 004e 7A68     		ldr	r2, [r7, #4]
 5340 0050 7A4B     		ldr	r3, .L437+8
 5341 0052 9A42     		cmp	r2, r3
 5342 0054 0BDD     		ble	.L408
 5343              	.L407:
 5344              		.loc 1 1312 0 discriminator 1
 5345 0056 3123     		mov	r3, #49
 5346 0058 E8E0     		b	.L405
 5347              	.L406:
1313:../Sources/TFC/TFC_CrystalClock.c ****   }
1314:../Sources/TFC/TFC_CrystalClock.c ****   else
1315:../Sources/TFC/TFC_CrystalClock.c ****   {
1316:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 5348              		.loc 1 1316 0 is_stmt 1
 5349 005a 7A68     		ldr	r2, [r7, #4]
 5350 005c 784B     		ldr	r3, .L437+12
 5351 005e 9A42     		cmp	r2, r3
 5352 0060 03DD     		ble	.L409
 5353              		.loc 1 1316 0 is_stmt 0 discriminator 2
 5354 0062 7A68     		ldr	r2, [r7, #4]
 5355 0064 774B     		ldr	r3, .L437+16
 5356 0066 9A42     		cmp	r2, r3
 5357 0068 01DD     		ble	.L408
 5358              	.L409:
 5359              		.loc 1 1316 0 discriminator 1
 5360 006a 3223     		mov	r3, #50
 5361 006c DEE0     		b	.L405
 5362              	.L408:
1317:../Sources/TFC/TFC_CrystalClock.c ****   }
1318:../Sources/TFC/TFC_CrystalClock.c ****   
1319:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
1320:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5363              		.loc 1 1320 0 is_stmt 1
 5364 006e FB1C     		add	r3, r7, #3
 5365 0070 1B78     		ldrb	r3, [r3]
 5366 0072 002B     		cmp	r3, #0
 5367 0074 08D0     		beq	.L410
1321:../Sources/TFC/TFC_CrystalClock.c ****   {
1322:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 5368              		.loc 1 1322 0
 5369 0076 6F4B     		ldr	r3, .L437
 5370 0078 6E4A     		ldr	r2, .L437
 5371 007a 5278     		ldrb	r2, [r2, #1]
 5372 007c D2B2     		uxtb	r2, r2
 5373 007e 0121     		mov	r1, #1
 5374 0080 0A43     		orr	r2, r1
 5375 0082 D2B2     		uxtb	r2, r2
 5376 0084 5A70     		strb	r2, [r3, #1]
 5377 0086 07E0     		b	.L411
 5378              	.L410:
1323:../Sources/TFC/TFC_CrystalClock.c ****   }
1324:../Sources/TFC/TFC_CrystalClock.c ****   else
1325:../Sources/TFC/TFC_CrystalClock.c ****   {
1326:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 5379              		.loc 1 1326 0
 5380 0088 6A4B     		ldr	r3, .L437
 5381 008a 6A4A     		ldr	r2, .L437
 5382 008c 5278     		ldrb	r2, [r2, #1]
 5383 008e D2B2     		uxtb	r2, r2
 5384 0090 0121     		mov	r1, #1
 5385 0092 8A43     		bic	r2, r1
 5386 0094 D2B2     		uxtb	r2, r2
 5387 0096 5A70     		strb	r2, [r3, #1]
 5388              	.L411:
1327:../Sources/TFC/TFC_CrystalClock.c ****   }
1328:../Sources/TFC/TFC_CrystalClock.c ****   
1329:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
1330:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 5389              		.loc 1 1330 0
 5390 0098 664B     		ldr	r3, .L437
 5391 009a 664A     		ldr	r2, .L437
 5392 009c 5279     		ldrb	r2, [r2, #5]
 5393 009e D2B2     		uxtb	r2, r2
 5394 00a0 2021     		mov	r1, #32
 5395 00a2 8A43     		bic	r2, r1
 5396 00a4 D2B2     		uxtb	r2, r2
 5397 00a6 5A71     		strb	r2, [r3, #5]
1331:../Sources/TFC/TFC_CrystalClock.c ****   
1332:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
1333:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK; // set IREFS and select IRC as MCGOUT
 5398              		.loc 1 1333 0
 5399 00a8 624B     		ldr	r3, .L437
 5400 00aa 624A     		ldr	r2, .L437
 5401 00ac 1278     		ldrb	r2, [r2]
 5402 00ae D2B2     		uxtb	r2, r2
 5403 00b0 4421     		mov	r1, #68
 5404 00b2 0A43     		orr	r2, r1
 5405 00b4 D2B2     		uxtb	r2, r2
 5406 00b6 1A70     		strb	r2, [r3]
1334:../Sources/TFC/TFC_CrystalClock.c ****  
1335:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1336:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5407              		.loc 1 1336 0
 5408 00b8 FB1C     		add	r3, r7, #3
 5409 00ba 1B78     		ldrb	r3, [r3]
 5410 00bc 002B     		cmp	r3, #0
 5411 00be 26D1     		bne	.L412
1337:../Sources/TFC/TFC_CrystalClock.c ****   {
1338:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5412              		.loc 1 1338 0
 5413 00c0 3B1C     		mov	r3, r7
 5414 00c2 0E33     		add	r3, r3, #14
 5415 00c4 0022     		mov	r2, #0
 5416 00c6 1A80     		strh	r2, [r3]
 5417 00c8 0DE0     		b	.L413
 5418              	.L416:
1339:../Sources/TFC/TFC_CrystalClock.c ****     {
1340:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 5419              		.loc 1 1340 0
 5420 00ca 5A4B     		ldr	r3, .L437
 5421 00cc 9B79     		ldrb	r3, [r3, #6]
 5422 00ce DBB2     		uxtb	r3, r3
 5423 00d0 1A1C     		mov	r2, r3
 5424 00d2 0123     		mov	r3, #1
 5425 00d4 1340     		and	r3, r2
 5426 00d6 0ED0     		beq	.L433
 5427              	.L414:
1338:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5428              		.loc 1 1338 0
 5429 00d8 3B1C     		mov	r3, r7
 5430 00da 0E33     		add	r3, r3, #14
 5431 00dc 3A1C     		mov	r2, r7
 5432 00de 0E32     		add	r2, r2, #14
 5433 00e0 1288     		ldrh	r2, [r2]
 5434 00e2 0132     		add	r2, r2, #1
 5435 00e4 1A80     		strh	r2, [r3]
 5436              	.L413:
1338:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5437              		.loc 1 1338 0 is_stmt 0 discriminator 1
 5438 00e6 3B1C     		mov	r3, r7
 5439 00e8 0E33     		add	r3, r3, #14
 5440 00ea 0021     		mov	r1, #0
 5441 00ec 5A5E     		ldrsh	r2, [r3, r1]
 5442 00ee 564B     		ldr	r3, .L437+20
 5443 00f0 9A42     		cmp	r2, r3
 5444 00f2 EADD     		ble	.L416
 5445 00f4 00E0     		b	.L415
 5446              	.L433:
 5447              		.loc 1 1340 0 is_stmt 1
 5448 00f6 C046     		mov	r8, r8
 5449              	.L415:
1341:../Sources/TFC/TFC_CrystalClock.c ****     }
1342:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 5450              		.loc 1 1342 0
 5451 00f8 4E4B     		ldr	r3, .L437
 5452 00fa 9B79     		ldrb	r3, [r3, #6]
 5453 00fc DBB2     		uxtb	r3, r3
 5454 00fe 1A1C     		mov	r2, r3
 5455 0100 0123     		mov	r3, #1
 5456 0102 1340     		and	r3, r2
 5457 0104 DBB2     		uxtb	r3, r3
 5458 0106 002B     		cmp	r3, #0
 5459 0108 28D0     		beq	.L417
 5460              		.loc 1 1342 0 is_stmt 0 discriminator 1
 5461 010a 1323     		mov	r3, #19
 5462 010c 8EE0     		b	.L405
 5463              	.L412:
1343:../Sources/TFC/TFC_CrystalClock.c ****   }
1344:../Sources/TFC/TFC_CrystalClock.c ****   else
1345:../Sources/TFC/TFC_CrystalClock.c ****   {
1346:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5464              		.loc 1 1346 0 is_stmt 1
 5465 010e 3B1C     		mov	r3, r7
 5466 0110 0E33     		add	r3, r3, #14
 5467 0112 0022     		mov	r2, #0
 5468 0114 1A80     		strh	r2, [r3]
 5469 0116 0FE0     		b	.L418
 5470              	.L421:
1347:../Sources/TFC/TFC_CrystalClock.c ****     {
1348:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 5471              		.loc 1 1348 0
 5472 0118 464B     		ldr	r3, .L437
 5473 011a 9B79     		ldrb	r3, [r3, #6]
 5474 011c DBB2     		uxtb	r3, r3
 5475 011e 1A1C     		mov	r2, r3
 5476 0120 0123     		mov	r3, #1
 5477 0122 1340     		and	r3, r2
 5478 0124 DBB2     		uxtb	r3, r3
 5479 0126 002B     		cmp	r3, #0
 5480 0128 0ED1     		bne	.L434
 5481              	.L419:
1346:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5482              		.loc 1 1346 0
 5483 012a 3B1C     		mov	r3, r7
 5484 012c 0E33     		add	r3, r3, #14
 5485 012e 3A1C     		mov	r2, r7
 5486 0130 0E32     		add	r2, r2, #14
 5487 0132 1288     		ldrh	r2, [r2]
 5488 0134 0132     		add	r2, r2, #1
 5489 0136 1A80     		strh	r2, [r3]
 5490              	.L418:
1346:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5491              		.loc 1 1346 0 is_stmt 0 discriminator 1
 5492 0138 3B1C     		mov	r3, r7
 5493 013a 0E33     		add	r3, r3, #14
 5494 013c 0021     		mov	r1, #0
 5495 013e 5A5E     		ldrsh	r2, [r3, r1]
 5496 0140 414B     		ldr	r3, .L437+20
 5497 0142 9A42     		cmp	r2, r3
 5498 0144 E8DD     		ble	.L421
 5499 0146 00E0     		b	.L420
 5500              	.L434:
 5501              		.loc 1 1348 0 is_stmt 1
 5502 0148 C046     		mov	r8, r8
 5503              	.L420:
1349:../Sources/TFC/TFC_CrystalClock.c ****     }
1350:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 5504              		.loc 1 1350 0
 5505 014a 3A4B     		ldr	r3, .L437
 5506 014c 9B79     		ldrb	r3, [r3, #6]
 5507 014e DBB2     		uxtb	r3, r3
 5508 0150 1A1C     		mov	r2, r3
 5509 0152 0123     		mov	r3, #1
 5510 0154 1340     		and	r3, r2
 5511 0156 01D1     		bne	.L417
 5512              		.loc 1 1350 0 is_stmt 0 discriminator 1
 5513 0158 1423     		mov	r3, #20
 5514 015a 67E0     		b	.L405
 5515              	.L417:
1351:../Sources/TFC/TFC_CrystalClock.c ****   }
1352:../Sources/TFC/TFC_CrystalClock.c ****   
1353:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1354:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5516              		.loc 1 1354 0 is_stmt 1
 5517 015c 3B1C     		mov	r3, r7
 5518 015e 0E33     		add	r3, r3, #14
 5519 0160 0022     		mov	r2, #0
 5520 0162 1A80     		strh	r2, [r3]
 5521 0164 0FE0     		b	.L422
 5522              	.L425:
1355:../Sources/TFC/TFC_CrystalClock.c ****   {
1356:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 5523              		.loc 1 1356 0
 5524 0166 334B     		ldr	r3, .L437
 5525 0168 9B79     		ldrb	r3, [r3, #6]
 5526 016a DBB2     		uxtb	r3, r3
 5527 016c 1A1C     		mov	r2, r3
 5528 016e 0C23     		mov	r3, #12
 5529 0170 1340     		and	r3, r2
 5530 0172 9B08     		lsr	r3, r3, #2
 5531 0174 012B     		cmp	r3, #1
 5532 0176 0ED0     		beq	.L435
 5533              	.L423:
1354:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5534              		.loc 1 1354 0
 5535 0178 3B1C     		mov	r3, r7
 5536 017a 0E33     		add	r3, r3, #14
 5537 017c 3A1C     		mov	r2, r7
 5538 017e 0E32     		add	r2, r2, #14
 5539 0180 1288     		ldrh	r2, [r2]
 5540 0182 0132     		add	r2, r2, #1
 5541 0184 1A80     		strh	r2, [r3]
 5542              	.L422:
1354:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5543              		.loc 1 1354 0 is_stmt 0 discriminator 1
 5544 0186 3B1C     		mov	r3, r7
 5545 0188 0E33     		add	r3, r3, #14
 5546 018a 0021     		mov	r1, #0
 5547 018c 5A5E     		ldrsh	r2, [r3, r1]
 5548 018e 2E4B     		ldr	r3, .L437+20
 5549 0190 9A42     		cmp	r2, r3
 5550 0192 E8DD     		ble	.L425
 5551 0194 00E0     		b	.L424
 5552              	.L435:
 5553              		.loc 1 1356 0 is_stmt 1
 5554 0196 C046     		mov	r8, r8
 5555              	.L424:
1357:../Sources/TFC/TFC_CrystalClock.c ****   }
1358:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 5556              		.loc 1 1358 0
 5557 0198 264B     		ldr	r3, .L437
 5558 019a 9B79     		ldrb	r3, [r3, #6]
 5559 019c DBB2     		uxtb	r3, r3
 5560 019e 1A1C     		mov	r2, r3
 5561 01a0 0C23     		mov	r3, #12
 5562 01a2 1340     		and	r3, r2
 5563 01a4 9B08     		lsr	r3, r3, #2
 5564 01a6 012B     		cmp	r3, #1
 5565 01a8 01D0     		beq	.L426
 5566              		.loc 1 1358 0 is_stmt 0 discriminator 1
 5567 01aa 1923     		mov	r3, #25
 5568 01ac 3EE0     		b	.L405
 5569              	.L426:
1359:../Sources/TFC/TFC_CrystalClock.c ****   
1360:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
1361:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5570              		.loc 1 1361 0 is_stmt 1
 5571 01ae 3B1C     		mov	r3, r7
 5572 01b0 0E33     		add	r3, r3, #14
 5573 01b2 0022     		mov	r2, #0
 5574 01b4 1A80     		strh	r2, [r3]
 5575 01b6 0DE0     		b	.L427
 5576              	.L430:
1362:../Sources/TFC/TFC_CrystalClock.c ****   {
1363:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 5577              		.loc 1 1363 0
 5578 01b8 1E4B     		ldr	r3, .L437
 5579 01ba 9B79     		ldrb	r3, [r3, #6]
 5580 01bc DBB2     		uxtb	r3, r3
 5581 01be 1A1C     		mov	r2, r3
 5582 01c0 1023     		mov	r3, #16
 5583 01c2 1340     		and	r3, r2
 5584 01c4 0ED1     		bne	.L436
 5585              	.L428:
1361:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5586              		.loc 1 1361 0
 5587 01c6 3B1C     		mov	r3, r7
 5588 01c8 0E33     		add	r3, r3, #14
 5589 01ca 3A1C     		mov	r2, r7
 5590 01cc 0E32     		add	r2, r2, #14
 5591 01ce 1288     		ldrh	r2, [r2]
 5592 01d0 0132     		add	r2, r2, #1
 5593 01d2 1A80     		strh	r2, [r3]
 5594              	.L427:
1361:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5595              		.loc 1 1361 0 is_stmt 0 discriminator 1
 5596 01d4 3B1C     		mov	r3, r7
 5597 01d6 0E33     		add	r3, r3, #14
 5598 01d8 0021     		mov	r1, #0
 5599 01da 5A5E     		ldrsh	r2, [r3, r1]
 5600 01dc 1A4B     		ldr	r3, .L437+20
 5601 01de 9A42     		cmp	r2, r3
 5602 01e0 EADD     		ble	.L430
 5603 01e2 00E0     		b	.L429
 5604              	.L436:
 5605              		.loc 1 1363 0 is_stmt 1
 5606 01e4 C046     		mov	r8, r8
 5607              	.L429:
1364:../Sources/TFC/TFC_CrystalClock.c ****   }
1365:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5608              		.loc 1 1365 0
 5609 01e6 134B     		ldr	r3, .L437
 5610 01e8 9B79     		ldrb	r3, [r3, #6]
 5611 01ea DBB2     		uxtb	r3, r3
 5612 01ec 1A1C     		mov	r2, r3
 5613 01ee 1023     		mov	r3, #16
 5614 01f0 1340     		and	r3, r2
 5615 01f2 01D1     		bne	.L431
 5616              		.loc 1 1365 0 is_stmt 0 discriminator 1
 5617 01f4 1223     		mov	r3, #18
 5618 01f6 19E0     		b	.L405
 5619              	.L431:
1366:../Sources/TFC/TFC_CrystalClock.c ****   
1367:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1368:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5620              		.loc 1 1368 0 is_stmt 1
 5621 01f8 FB1C     		add	r3, r7, #3
 5622 01fa 1B78     		ldrb	r3, [r3]
 5623 01fc 002B     		cmp	r3, #0
 5624 01fe 14D0     		beq	.L432
1369:../Sources/TFC/TFC_CrystalClock.c ****   {
1370:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 5625              		.loc 1 1370 0
 5626 0200 0C4B     		ldr	r3, .L437
 5627 0202 1B7A     		ldrb	r3, [r3, #8]
 5628 0204 DBB2     		uxtb	r3, r3
 5629 0206 1A1C     		mov	r2, r3
 5630 0208 0E23     		mov	r3, #14
 5631 020a 1340     		and	r3, r2
 5632 020c 5B08     		lsr	r3, r3, #1
 5633 020e 0122     		mov	r2, #1
 5634 0210 9A40     		lsl	r2, r2, r3
 5635 0212 3B1C     		mov	r3, r7
 5636 0214 0D33     		add	r3, r3, #13
 5637 0216 1A70     		strb	r2, [r3]
1371:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 5638              		.loc 1 1371 0
 5639 0218 3B1C     		mov	r3, r7
 5640 021a 0D33     		add	r3, r3, #13
 5641 021c 1B78     		ldrb	r3, [r3]
 5642 021e 7868     		ldr	r0, [r7, #4]
 5643 0220 191C     		mov	r1, r3
 5644 0222 FFF7FEFF 		bl	__aeabi_idiv
 5645 0226 031C     		mov	r3, r0
 5646 0228 00E0     		b	.L405
 5647              	.L432:
1372:../Sources/TFC/TFC_CrystalClock.c ****   }
1373:../Sources/TFC/TFC_CrystalClock.c ****   else
1374:../Sources/TFC/TFC_CrystalClock.c ****   {
1375:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 5648              		.loc 1 1375 0
 5649 022a 7B68     		ldr	r3, [r7, #4]
 5650              	.L405:
1376:../Sources/TFC/TFC_CrystalClock.c ****   }
1377:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbi 
 5651              		.loc 1 1377 0
 5652 022c 181C     		mov	r0, r3
 5653 022e BD46     		mov	sp, r7
 5654 0230 04B0     		add	sp, sp, #16
 5655              		@ sp needed for prologue
 5656 0232 80BD     		pop	{r7, pc}
 5657              	.L438:
 5658              		.align	2
 5659              	.L437:
 5660 0234 00400640 		.word	1074151424
 5661 0238 117A0000 		.word	31249
 5662 023c 97980000 		.word	39063
 5663 0240 BFC62D00 		.word	2999999
 5664 0244 404B4C00 		.word	5000000
 5665 0248 CF070000 		.word	1999
 5666              		.cfi_endproc
 5667              	.LFE19:
 5669              		.section	.text.fbi_fei,"ax",%progbits
 5670              		.align	2
 5671              		.global	fbi_fei
 5672              		.code	16
 5673              		.thumb_func
 5675              	fbi_fei:
 5676              	.LFB20:
1378:../Sources/TFC/TFC_CrystalClock.c **** 
1379:../Sources/TFC/TFC_CrystalClock.c **** 
1380:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq)
1381:../Sources/TFC/TFC_CrystalClock.c **** {
 5677              		.loc 1 1381 0
 5678              		.cfi_startproc
 5679 0000 80B5     		push	{r7, lr}
 5680              	.LCFI60:
 5681              		.cfi_def_cfa_offset 8
 5682              		.cfi_offset 7, -8
 5683              		.cfi_offset 14, -4
 5684 0002 86B0     		sub	sp, sp, #24
 5685              	.LCFI61:
 5686              		.cfi_def_cfa_offset 32
 5687 0004 00AF     		add	r7, sp, #0
 5688              	.LCFI62:
 5689              		.cfi_def_cfa_register 7
 5690 0006 7860     		str	r0, [r7, #4]
1382:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1383:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1384:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1385:../Sources/TFC/TFC_CrystalClock.c **** 
1386:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1387:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5691              		.loc 1 1387 0
 5692 0008 524B     		ldr	r3, .L458
 5693 000a 9B79     		ldrb	r3, [r3, #6]
 5694 000c DBB2     		uxtb	r3, r3
 5695 000e 1A1C     		mov	r2, r3
 5696 0010 0C23     		mov	r3, #12
 5697 0012 1340     		and	r3, r2
 5698 0014 9B08     		lsr	r3, r3, #2
 5699 0016 012B     		cmp	r3, #1
 5700 0018 14D1     		bne	.L440
1388:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5701              		.loc 1 1388 0 discriminator 1
 5702 001a 4E4B     		ldr	r3, .L458
 5703 001c 9B79     		ldrb	r3, [r3, #6]
 5704 001e DBB2     		uxtb	r3, r3
 5705 0020 1A1C     		mov	r2, r3
 5706 0022 1023     		mov	r3, #16
 5707 0024 1340     		and	r3, r2
1387:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5708              		.loc 1 1387 0 discriminator 1
 5709 0026 0DD0     		beq	.L440
1389:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 5710              		.loc 1 1389 0
 5711 0028 4A4B     		ldr	r3, .L458
 5712 002a 9B79     		ldrb	r3, [r3, #6]
 5713 002c DBB2     		uxtb	r3, r3
 5714 002e 1A1C     		mov	r2, r3
 5715 0030 2023     		mov	r3, #32
 5716 0032 1340     		and	r3, r2
1388:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5717              		.loc 1 1388 0
 5718 0034 06D1     		bne	.L440
1390:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 5719              		.loc 1 1390 0
 5720 0036 474B     		ldr	r3, .L458
 5721 0038 5B78     		ldrb	r3, [r3, #1]
 5722 003a DBB2     		uxtb	r3, r3
 5723 003c 1A1C     		mov	r2, r3
 5724 003e 0223     		mov	r3, #2
 5725 0040 1340     		and	r3, r2
1387:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5726              		.loc 1 1387 0
 5727 0042 01D0     		beq	.L441
 5728              	.L440:
1391:../Sources/TFC/TFC_CrystalClock.c ****   {  
1392:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 5729              		.loc 1 1392 0
 5730 0044 0323     		mov	r3, #3
 5731 0046 81E0     		b	.L442
 5732              	.L441:
1393:../Sources/TFC/TFC_CrystalClock.c ****   }
1394:../Sources/TFC/TFC_CrystalClock.c **** 
1395:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1396:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 5733              		.loc 1 1396 0
 5734 0048 7A68     		ldr	r2, [r7, #4]
 5735 004a 434B     		ldr	r3, .L458+4
 5736 004c 9A42     		cmp	r2, r3
 5737 004e 03DD     		ble	.L443
 5738              		.loc 1 1396 0 is_stmt 0 discriminator 1
 5739 0050 7A68     		ldr	r2, [r7, #4]
 5740 0052 424B     		ldr	r3, .L458+8
 5741 0054 9A42     		cmp	r2, r3
 5742 0056 01DD     		ble	.L444
 5743              	.L443:
1397:../Sources/TFC/TFC_CrystalClock.c ****   {
1398:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 5744              		.loc 1 1398 0 is_stmt 1
 5745 0058 3123     		mov	r3, #49
 5746 005a 77E0     		b	.L442
 5747              	.L444:
1399:../Sources/TFC/TFC_CrystalClock.c ****   }
1400:../Sources/TFC/TFC_CrystalClock.c **** 
1401:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1402:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 5748              		.loc 1 1402 0
 5749 005c 7B68     		ldr	r3, [r7, #4]
 5750 005e 181C     		mov	r0, r3
 5751 0060 FFF7FEFF 		bl	fll_freq
 5752 0064 031C     		mov	r3, r0
 5753 0066 3B61     		str	r3, [r7, #16]
1403:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5754              		.loc 1 1403 0
 5755 0068 3B69     		ldr	r3, [r7, #16]
 5756 006a 3B2B     		cmp	r3, #59
 5757 006c 01DC     		bgt	.L445
 5758              		.loc 1 1403 0 is_stmt 0 discriminator 1
 5759 006e 3B69     		ldr	r3, [r7, #16]
 5760 0070 6CE0     		b	.L442
 5761              	.L445:
1404:../Sources/TFC/TFC_CrystalClock.c ****   
1405:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the FLL output as MCGOUT  
1406:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5762              		.loc 1 1406 0 is_stmt 1
 5763 0072 384A     		ldr	r2, .L458
 5764 0074 3B1C     		mov	r3, r7
 5765 0076 0F33     		add	r3, r3, #15
 5766 0078 1278     		ldrb	r2, [r2]
 5767 007a 1A70     		strb	r2, [r3]
1407:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS field
 5768              		.loc 1 1407 0
 5769 007c 3B1C     		mov	r3, r7
 5770 007e 0F33     		add	r3, r3, #15
 5771 0080 3A1C     		mov	r2, r7
 5772 0082 0F32     		add	r2, r2, #15
 5773 0084 1178     		ldrb	r1, [r2]
 5774 0086 3F22     		mov	r2, #63
 5775 0088 0A40     		and	r2, r1
 5776 008a 1A70     		strb	r2, [r3]
1408:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(0); // select FLL as MCGOUT
 5777              		.loc 1 1408 0
 5778 008c 3B1C     		mov	r3, r7
 5779 008e 0F33     		add	r3, r3, #15
 5780 0090 3A1C     		mov	r2, r7
 5781 0092 0F32     		add	r2, r2, #15
 5782 0094 1278     		ldrb	r2, [r2]
 5783 0096 1A70     		strb	r2, [r3]
1409:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // make sure IRC is FLL reference
 5784              		.loc 1 1409 0
 5785 0098 3B1C     		mov	r3, r7
 5786 009a 0F33     		add	r3, r3, #15
 5787 009c 3A1C     		mov	r2, r7
 5788 009e 0F32     		add	r2, r2, #15
 5789 00a0 1278     		ldrb	r2, [r2]
 5790 00a2 0421     		mov	r1, #4
 5791 00a4 0A43     		orr	r2, r1
 5792 00a6 1A70     		strb	r2, [r3]
1410:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 5793              		.loc 1 1410 0
 5794 00a8 2A4B     		ldr	r3, .L458
 5795 00aa 3A1C     		mov	r2, r7
 5796 00ac 0F32     		add	r2, r2, #15
 5797 00ae 1278     		ldrb	r2, [r2]
 5798 00b0 1A70     		strb	r2, [r3]
1411:../Sources/TFC/TFC_CrystalClock.c ****   
1412:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1413:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5799              		.loc 1 1413 0
 5800 00b2 3B1C     		mov	r3, r7
 5801 00b4 1633     		add	r3, r3, #22
 5802 00b6 0022     		mov	r2, #0
 5803 00b8 1A80     		strh	r2, [r3]
 5804 00ba 0DE0     		b	.L446
 5805              	.L449:
1414:../Sources/TFC/TFC_CrystalClock.c ****   {
1415:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST clears before loop finishes
 5806              		.loc 1 1415 0
 5807 00bc 254B     		ldr	r3, .L458
 5808 00be 9B79     		ldrb	r3, [r3, #6]
 5809 00c0 DBB2     		uxtb	r3, r3
 5810 00c2 1A1C     		mov	r2, r3
 5811 00c4 1023     		mov	r3, #16
 5812 00c6 1340     		and	r3, r2
 5813 00c8 0ED1     		bne	.L456
 5814              	.L447:
1413:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5815              		.loc 1 1413 0
 5816 00ca 3B1C     		mov	r3, r7
 5817 00cc 1633     		add	r3, r3, #22
 5818 00ce 3A1C     		mov	r2, r7
 5819 00d0 1632     		add	r2, r2, #22
 5820 00d2 1288     		ldrh	r2, [r2]
 5821 00d4 0132     		add	r2, r2, #1
 5822 00d6 1A80     		strh	r2, [r3]
 5823              	.L446:
1413:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5824              		.loc 1 1413 0 is_stmt 0 discriminator 1
 5825 00d8 3B1C     		mov	r3, r7
 5826 00da 1633     		add	r3, r3, #22
 5827 00dc 0021     		mov	r1, #0
 5828 00de 5A5E     		ldrsh	r2, [r3, r1]
 5829 00e0 1F4B     		ldr	r3, .L458+12
 5830 00e2 9A42     		cmp	r2, r3
 5831 00e4 EADD     		ble	.L449
 5832 00e6 00E0     		b	.L448
 5833              	.L456:
 5834              		.loc 1 1415 0 is_stmt 1
 5835 00e8 C046     		mov	r8, r8
 5836              	.L448:
1416:../Sources/TFC/TFC_CrystalClock.c ****   }
1417:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5837              		.loc 1 1417 0
 5838 00ea 1A4B     		ldr	r3, .L458
 5839 00ec 9B79     		ldrb	r3, [r3, #6]
 5840 00ee DBB2     		uxtb	r3, r3
 5841 00f0 1A1C     		mov	r2, r3
 5842 00f2 1023     		mov	r3, #16
 5843 00f4 1340     		and	r3, r2
 5844 00f6 01D1     		bne	.L450
 5845              		.loc 1 1417 0 is_stmt 0 discriminator 1
 5846 00f8 1223     		mov	r3, #18
 5847 00fa 27E0     		b	.L442
 5848              	.L450:
1418:../Sources/TFC/TFC_CrystalClock.c ****   
1419:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1420:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5849              		.loc 1 1420 0 is_stmt 1
 5850 00fc 3B1C     		mov	r3, r7
 5851 00fe 1633     		add	r3, r3, #22
 5852 0100 0022     		mov	r2, #0
 5853 0102 1A80     		strh	r2, [r3]
 5854 0104 0EE0     		b	.L451
 5855              	.L454:
1421:../Sources/TFC/TFC_CrystalClock.c ****   {
1422:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5856              		.loc 1 1422 0
 5857 0106 134B     		ldr	r3, .L458
 5858 0108 9B79     		ldrb	r3, [r3, #6]
 5859 010a DBB2     		uxtb	r3, r3
 5860 010c 1A1C     		mov	r2, r3
 5861 010e 0C23     		mov	r3, #12
 5862 0110 1340     		and	r3, r2
 5863 0112 9B08     		lsr	r3, r3, #2
 5864 0114 0ED0     		beq	.L457
 5865              	.L452:
1420:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5866              		.loc 1 1420 0
 5867 0116 3B1C     		mov	r3, r7
 5868 0118 1633     		add	r3, r3, #22
 5869 011a 3A1C     		mov	r2, r7
 5870 011c 1632     		add	r2, r2, #22
 5871 011e 1288     		ldrh	r2, [r2]
 5872 0120 0132     		add	r2, r2, #1
 5873 0122 1A80     		strh	r2, [r3]
 5874              	.L451:
1420:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5875              		.loc 1 1420 0 is_stmt 0 discriminator 1
 5876 0124 3B1C     		mov	r3, r7
 5877 0126 1633     		add	r3, r3, #22
 5878 0128 0021     		mov	r1, #0
 5879 012a 5A5E     		ldrsh	r2, [r3, r1]
 5880 012c 0C4B     		ldr	r3, .L458+12
 5881 012e 9A42     		cmp	r2, r3
 5882 0130 E9DD     		ble	.L454
 5883 0132 00E0     		b	.L453
 5884              	.L457:
 5885              		.loc 1 1422 0 is_stmt 1
 5886 0134 C046     		mov	r8, r8
 5887              	.L453:
1423:../Sources/TFC/TFC_CrystalClock.c ****   }
1424:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 5888              		.loc 1 1424 0
 5889 0136 074B     		ldr	r3, .L458
 5890 0138 9B79     		ldrb	r3, [r3, #6]
 5891 013a DBB2     		uxtb	r3, r3
 5892 013c 1A1C     		mov	r2, r3
 5893 013e 0C23     		mov	r3, #12
 5894 0140 1340     		and	r3, r2
 5895 0142 9B08     		lsr	r3, r3, #2
 5896 0144 01D0     		beq	.L455
 5897              		.loc 1 1424 0 is_stmt 0 discriminator 1
 5898 0146 1823     		mov	r3, #24
 5899 0148 00E0     		b	.L442
 5900              	.L455:
1425:../Sources/TFC/TFC_CrystalClock.c **** 
1426:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
1427:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 5901              		.loc 1 1427 0 is_stmt 1
 5902 014a 3B69     		ldr	r3, [r7, #16]
 5903              	.L442:
1428:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fei
 5904              		.loc 1 1428 0
 5905 014c 181C     		mov	r0, r3
 5906 014e BD46     		mov	sp, r7
 5907 0150 06B0     		add	sp, sp, #24
 5908              		@ sp needed for prologue
 5909 0152 80BD     		pop	{r7, pc}
 5910              	.L459:
 5911              		.align	2
 5912              	.L458:
 5913 0154 00400640 		.word	1074151424
 5914 0158 117A0000 		.word	31249
 5915 015c 97980000 		.word	39063
 5916 0160 CF070000 		.word	1999
 5917              		.cfi_endproc
 5918              	.LFE20:
 5920              		.section	.text.fei_fbi,"ax",%progbits
 5921              		.align	2
 5922              		.global	fei_fbi
 5923              		.code	16
 5924              		.thumb_func
 5926              	fei_fbi:
 5927              	.LFB21:
1429:../Sources/TFC/TFC_CrystalClock.c **** 
1430:../Sources/TFC/TFC_CrystalClock.c **** 
1431:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select)
1432:../Sources/TFC/TFC_CrystalClock.c **** {
 5928              		.loc 1 1432 0
 5929              		.cfi_startproc
 5930 0000 80B5     		push	{r7, lr}
 5931              	.LCFI63:
 5932              		.cfi_def_cfa_offset 8
 5933              		.cfi_offset 7, -8
 5934              		.cfi_offset 14, -4
 5935 0002 84B0     		sub	sp, sp, #16
 5936              	.LCFI64:
 5937              		.cfi_def_cfa_offset 24
 5938 0004 00AF     		add	r7, sp, #0
 5939              	.LCFI65:
 5940              		.cfi_def_cfa_register 7
 5941 0006 7860     		str	r0, [r7, #4]
 5942 0008 0A1C     		mov	r2, r1
 5943 000a FB1C     		add	r3, r7, #3
 5944 000c 1A70     		strb	r2, [r3]
1433:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1434:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1435:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1436:../Sources/TFC/TFC_CrystalClock.c ****   
1437:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEI mode
1438:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5945              		.loc 1 1438 0
 5946 000e 7C4B     		ldr	r3, .L489
 5947 0010 9B79     		ldrb	r3, [r3, #6]
 5948 0012 DBB2     		uxtb	r3, r3
 5949 0014 1A1C     		mov	r2, r3
 5950 0016 0C23     		mov	r3, #12
 5951 0018 1340     		and	r3, r2
 5952 001a 9B08     		lsr	r3, r3, #2
 5953 001c 0DD1     		bne	.L461
1439:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5954              		.loc 1 1439 0 discriminator 1
 5955 001e 784B     		ldr	r3, .L489
 5956 0020 9B79     		ldrb	r3, [r3, #6]
 5957 0022 DBB2     		uxtb	r3, r3
 5958 0024 1A1C     		mov	r2, r3
 5959 0026 1023     		mov	r3, #16
 5960 0028 1340     		and	r3, r2
1438:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5961              		.loc 1 1438 0 discriminator 1
 5962 002a 06D0     		beq	.L461
1440:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 5963              		.loc 1 1440 0 discriminator 1
 5964 002c 744B     		ldr	r3, .L489
 5965 002e 9B79     		ldrb	r3, [r3, #6]
 5966 0030 DBB2     		uxtb	r3, r3
 5967 0032 1A1C     		mov	r2, r3
 5968 0034 2023     		mov	r3, #32
 5969 0036 1340     		and	r3, r2
1438:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5970              		.loc 1 1438 0 discriminator 1
 5971 0038 01D0     		beq	.L462
 5972              	.L461:
1441:../Sources/TFC/TFC_CrystalClock.c ****   {
1442:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                       // return error code
 5973              		.loc 1 1442 0
 5974 003a 0123     		mov	r3, #1
 5975 003c DBE0     		b	.L463
 5976              	.L462:
1443:../Sources/TFC/TFC_CrystalClock.c ****   } 
1444:../Sources/TFC/TFC_CrystalClock.c **** 
1445:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
1446:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5977              		.loc 1 1446 0
 5978 003e FB1C     		add	r3, r7, #3
 5979 0040 1B78     		ldrb	r3, [r3]
 5980 0042 002B     		cmp	r3, #0
 5981 0044 09D1     		bne	.L464
1447:../Sources/TFC/TFC_CrystalClock.c ****   {    
1448:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5982              		.loc 1 1448 0
 5983 0046 7A68     		ldr	r2, [r7, #4]
 5984 0048 6E4B     		ldr	r3, .L489+4
 5985 004a 9A42     		cmp	r2, r3
 5986 004c 03DD     		ble	.L465
 5987              		.loc 1 1448 0 is_stmt 0 discriminator 2
 5988 004e 7A68     		ldr	r2, [r7, #4]
 5989 0050 6D4B     		ldr	r3, .L489+8
 5990 0052 9A42     		cmp	r2, r3
 5991 0054 0BDD     		ble	.L466
 5992              	.L465:
 5993              		.loc 1 1448 0 discriminator 1
 5994 0056 3123     		mov	r3, #49
 5995 0058 CDE0     		b	.L463
 5996              	.L464:
1449:../Sources/TFC/TFC_CrystalClock.c ****   }
1450:../Sources/TFC/TFC_CrystalClock.c ****   else
1451:../Sources/TFC/TFC_CrystalClock.c ****   {
1452:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 5997              		.loc 1 1452 0 is_stmt 1
 5998 005a 7A68     		ldr	r2, [r7, #4]
 5999 005c 6B4B     		ldr	r3, .L489+12
 6000 005e 9A42     		cmp	r2, r3
 6001 0060 03DD     		ble	.L467
 6002              		.loc 1 1452 0 is_stmt 0 discriminator 2
 6003 0062 7A68     		ldr	r2, [r7, #4]
 6004 0064 6A4B     		ldr	r3, .L489+16
 6005 0066 9A42     		cmp	r2, r3
 6006 0068 01DD     		ble	.L466
 6007              	.L467:
 6008              		.loc 1 1452 0 discriminator 1
 6009 006a 3223     		mov	r3, #50
 6010 006c C3E0     		b	.L463
 6011              	.L466:
1453:../Sources/TFC/TFC_CrystalClock.c ****   }
1454:../Sources/TFC/TFC_CrystalClock.c ****   
1455:../Sources/TFC/TFC_CrystalClock.c **** // Select the desired IRC
1456:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6012              		.loc 1 1456 0 is_stmt 1
 6013 006e FB1C     		add	r3, r7, #3
 6014 0070 1B78     		ldrb	r3, [r3]
 6015 0072 002B     		cmp	r3, #0
 6016 0074 08D0     		beq	.L468
1457:../Sources/TFC/TFC_CrystalClock.c ****   {
1458:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRCS
 6017              		.loc 1 1458 0
 6018 0076 624B     		ldr	r3, .L489
 6019 0078 614A     		ldr	r2, .L489
 6020 007a 5278     		ldrb	r2, [r2, #1]
 6021 007c D2B2     		uxtb	r2, r2
 6022 007e 0121     		mov	r1, #1
 6023 0080 0A43     		orr	r2, r1
 6024 0082 D2B2     		uxtb	r2, r2
 6025 0084 5A70     		strb	r2, [r3, #1]
 6026 0086 07E0     		b	.L469
 6027              	.L468:
1459:../Sources/TFC/TFC_CrystalClock.c ****   }
1460:../Sources/TFC/TFC_CrystalClock.c ****   else
1461:../Sources/TFC/TFC_CrystalClock.c ****   {
1462:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRCS
 6028              		.loc 1 1462 0
 6029 0088 5D4B     		ldr	r3, .L489
 6030 008a 5D4A     		ldr	r2, .L489
 6031 008c 5278     		ldrb	r2, [r2, #1]
 6032 008e D2B2     		uxtb	r2, r2
 6033 0090 0121     		mov	r1, #1
 6034 0092 8A43     		bic	r2, r1
 6035 0094 D2B2     		uxtb	r2, r2
 6036 0096 5A70     		strb	r2, [r3, #1]
 6037              	.L469:
1463:../Sources/TFC/TFC_CrystalClock.c ****   }
1464:../Sources/TFC/TFC_CrystalClock.c ****   
1465:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the IRC as the MCGOUT
1466:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6038              		.loc 1 1466 0
 6039 0098 594A     		ldr	r2, .L489
 6040 009a 3B1C     		mov	r3, r7
 6041 009c 0D33     		add	r3, r3, #13
 6042 009e 1278     		ldrb	r2, [r2]
 6043 00a0 1A70     		strb	r2, [r3]
1467:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS
 6044              		.loc 1 1467 0
 6045 00a2 3B1C     		mov	r3, r7
 6046 00a4 0D33     		add	r3, r3, #13
 6047 00a6 3A1C     		mov	r2, r7
 6048 00a8 0D32     		add	r2, r2, #13
 6049 00aa 1178     		ldrb	r1, [r2]
 6050 00ac 3F22     		mov	r2, #63
 6051 00ae 0A40     		and	r2, r1
 6052 00b0 1A70     		strb	r2, [r3]
1468:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(1); // select IRC as the MCG clock sourse
 6053              		.loc 1 1468 0
 6054 00b2 3B1C     		mov	r3, r7
 6055 00b4 0D33     		add	r3, r3, #13
 6056 00b6 3A1C     		mov	r2, r7
 6057 00b8 0D32     		add	r2, r2, #13
 6058 00ba 1278     		ldrb	r2, [r2]
 6059 00bc 4021     		mov	r1, #64
 6060 00be 0A43     		orr	r2, r1
 6061 00c0 1A70     		strb	r2, [r3]
1469:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6062              		.loc 1 1469 0
 6063 00c2 4F4B     		ldr	r3, .L489
 6064 00c4 3A1C     		mov	r2, r7
 6065 00c6 0D32     		add	r2, r2, #13
 6066 00c8 1278     		ldrb	r2, [r2]
 6067 00ca 1A70     		strb	r2, [r3]
1470:../Sources/TFC/TFC_CrystalClock.c **** 
1471:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1472:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 6068              		.loc 1 1472 0
 6069 00cc FB1C     		add	r3, r7, #3
 6070 00ce 1B78     		ldrb	r3, [r3]
 6071 00d0 002B     		cmp	r3, #0
 6072 00d2 26D1     		bne	.L470
1473:../Sources/TFC/TFC_CrystalClock.c ****   {
1474:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6073              		.loc 1 1474 0
 6074 00d4 3B1C     		mov	r3, r7
 6075 00d6 0E33     		add	r3, r3, #14
 6076 00d8 0022     		mov	r2, #0
 6077 00da 1A80     		strh	r2, [r3]
 6078 00dc 0DE0     		b	.L471
 6079              	.L474:
1475:../Sources/TFC/TFC_CrystalClock.c ****     {
1476:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 6080              		.loc 1 1476 0
 6081 00de 484B     		ldr	r3, .L489
 6082 00e0 9B79     		ldrb	r3, [r3, #6]
 6083 00e2 DBB2     		uxtb	r3, r3
 6084 00e4 1A1C     		mov	r2, r3
 6085 00e6 0123     		mov	r3, #1
 6086 00e8 1340     		and	r3, r2
 6087 00ea 0ED0     		beq	.L486
 6088              	.L472:
1474:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6089              		.loc 1 1474 0
 6090 00ec 3B1C     		mov	r3, r7
 6091 00ee 0E33     		add	r3, r3, #14
 6092 00f0 3A1C     		mov	r2, r7
 6093 00f2 0E32     		add	r2, r2, #14
 6094 00f4 1288     		ldrh	r2, [r2]
 6095 00f6 0132     		add	r2, r2, #1
 6096 00f8 1A80     		strh	r2, [r3]
 6097              	.L471:
1474:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6098              		.loc 1 1474 0 is_stmt 0 discriminator 1
 6099 00fa 3B1C     		mov	r3, r7
 6100 00fc 0E33     		add	r3, r3, #14
 6101 00fe 0021     		mov	r1, #0
 6102 0100 5A5E     		ldrsh	r2, [r3, r1]
 6103 0102 444B     		ldr	r3, .L489+20
 6104 0104 9A42     		cmp	r2, r3
 6105 0106 EADD     		ble	.L474
 6106 0108 00E0     		b	.L473
 6107              	.L486:
 6108              		.loc 1 1476 0 is_stmt 1
 6109 010a C046     		mov	r8, r8
 6110              	.L473:
1477:../Sources/TFC/TFC_CrystalClock.c ****     }
1478:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 6111              		.loc 1 1478 0
 6112 010c 3C4B     		ldr	r3, .L489
 6113 010e 9B79     		ldrb	r3, [r3, #6]
 6114 0110 DBB2     		uxtb	r3, r3
 6115 0112 1A1C     		mov	r2, r3
 6116 0114 0123     		mov	r3, #1
 6117 0116 1340     		and	r3, r2
 6118 0118 DBB2     		uxtb	r3, r3
 6119 011a 002B     		cmp	r3, #0
 6120 011c 28D0     		beq	.L475
 6121              		.loc 1 1478 0 is_stmt 0 discriminator 1
 6122 011e 1323     		mov	r3, #19
 6123 0120 69E0     		b	.L463
 6124              	.L470:
1479:../Sources/TFC/TFC_CrystalClock.c ****   }
1480:../Sources/TFC/TFC_CrystalClock.c ****   else
1481:../Sources/TFC/TFC_CrystalClock.c ****   {
1482:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6125              		.loc 1 1482 0 is_stmt 1
 6126 0122 3B1C     		mov	r3, r7
 6127 0124 0E33     		add	r3, r3, #14
 6128 0126 0022     		mov	r2, #0
 6129 0128 1A80     		strh	r2, [r3]
 6130 012a 0FE0     		b	.L476
 6131              	.L479:
1483:../Sources/TFC/TFC_CrystalClock.c ****     {
1484:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 6132              		.loc 1 1484 0
 6133 012c 344B     		ldr	r3, .L489
 6134 012e 9B79     		ldrb	r3, [r3, #6]
 6135 0130 DBB2     		uxtb	r3, r3
 6136 0132 1A1C     		mov	r2, r3
 6137 0134 0123     		mov	r3, #1
 6138 0136 1340     		and	r3, r2
 6139 0138 DBB2     		uxtb	r3, r3
 6140 013a 002B     		cmp	r3, #0
 6141 013c 0ED1     		bne	.L487
 6142              	.L477:
1482:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6143              		.loc 1 1482 0
 6144 013e 3B1C     		mov	r3, r7
 6145 0140 0E33     		add	r3, r3, #14
 6146 0142 3A1C     		mov	r2, r7
 6147 0144 0E32     		add	r2, r2, #14
 6148 0146 1288     		ldrh	r2, [r2]
 6149 0148 0132     		add	r2, r2, #1
 6150 014a 1A80     		strh	r2, [r3]
 6151              	.L476:
1482:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6152              		.loc 1 1482 0 is_stmt 0 discriminator 1
 6153 014c 3B1C     		mov	r3, r7
 6154 014e 0E33     		add	r3, r3, #14
 6155 0150 0021     		mov	r1, #0
 6156 0152 5A5E     		ldrsh	r2, [r3, r1]
 6157 0154 2F4B     		ldr	r3, .L489+20
 6158 0156 9A42     		cmp	r2, r3
 6159 0158 E8DD     		ble	.L479
 6160 015a 00E0     		b	.L478
 6161              	.L487:
 6162              		.loc 1 1484 0 is_stmt 1
 6163 015c C046     		mov	r8, r8
 6164              	.L478:
1485:../Sources/TFC/TFC_CrystalClock.c ****     }
1486:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 6165              		.loc 1 1486 0
 6166 015e 284B     		ldr	r3, .L489
 6167 0160 9B79     		ldrb	r3, [r3, #6]
 6168 0162 DBB2     		uxtb	r3, r3
 6169 0164 1A1C     		mov	r2, r3
 6170 0166 0123     		mov	r3, #1
 6171 0168 1340     		and	r3, r2
 6172 016a 01D1     		bne	.L475
 6173              		.loc 1 1486 0 is_stmt 0 discriminator 1
 6174 016c 1423     		mov	r3, #20
 6175 016e 42E0     		b	.L463
 6176              	.L475:
1487:../Sources/TFC/TFC_CrystalClock.c ****   }
1488:../Sources/TFC/TFC_CrystalClock.c ****   
1489:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1490:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6177              		.loc 1 1490 0 is_stmt 1
 6178 0170 3B1C     		mov	r3, r7
 6179 0172 0E33     		add	r3, r3, #14
 6180 0174 0022     		mov	r2, #0
 6181 0176 1A80     		strh	r2, [r3]
 6182 0178 0FE0     		b	.L480
 6183              	.L483:
1491:../Sources/TFC/TFC_CrystalClock.c ****   {
1492:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 6184              		.loc 1 1492 0
 6185 017a 214B     		ldr	r3, .L489
 6186 017c 9B79     		ldrb	r3, [r3, #6]
 6187 017e DBB2     		uxtb	r3, r3
 6188 0180 1A1C     		mov	r2, r3
 6189 0182 0C23     		mov	r3, #12
 6190 0184 1340     		and	r3, r2
 6191 0186 9B08     		lsr	r3, r3, #2
 6192 0188 012B     		cmp	r3, #1
 6193 018a 0ED0     		beq	.L488
 6194              	.L481:
1490:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6195              		.loc 1 1490 0
 6196 018c 3B1C     		mov	r3, r7
 6197 018e 0E33     		add	r3, r3, #14
 6198 0190 3A1C     		mov	r2, r7
 6199 0192 0E32     		add	r2, r2, #14
 6200 0194 1288     		ldrh	r2, [r2]
 6201 0196 0132     		add	r2, r2, #1
 6202 0198 1A80     		strh	r2, [r3]
 6203              	.L480:
1490:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6204              		.loc 1 1490 0 is_stmt 0 discriminator 1
 6205 019a 3B1C     		mov	r3, r7
 6206 019c 0E33     		add	r3, r3, #14
 6207 019e 0021     		mov	r1, #0
 6208 01a0 5A5E     		ldrsh	r2, [r3, r1]
 6209 01a2 1C4B     		ldr	r3, .L489+20
 6210 01a4 9A42     		cmp	r2, r3
 6211 01a6 E8DD     		ble	.L483
 6212 01a8 00E0     		b	.L482
 6213              	.L488:
 6214              		.loc 1 1492 0 is_stmt 1
 6215 01aa C046     		mov	r8, r8
 6216              	.L482:
1493:../Sources/TFC/TFC_CrystalClock.c ****   }
1494:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 6217              		.loc 1 1494 0
 6218 01ac 144B     		ldr	r3, .L489
 6219 01ae 9B79     		ldrb	r3, [r3, #6]
 6220 01b0 DBB2     		uxtb	r3, r3
 6221 01b2 1A1C     		mov	r2, r3
 6222 01b4 0C23     		mov	r3, #12
 6223 01b6 1340     		and	r3, r2
 6224 01b8 9B08     		lsr	r3, r3, #2
 6225 01ba 012B     		cmp	r3, #1
 6226 01bc 01D0     		beq	.L484
 6227              		.loc 1 1494 0 is_stmt 0 discriminator 1
 6228 01be 1923     		mov	r3, #25
 6229 01c0 19E0     		b	.L463
 6230              	.L484:
1495:../Sources/TFC/TFC_CrystalClock.c ****   
1496:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1497:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6231              		.loc 1 1497 0 is_stmt 1
 6232 01c2 FB1C     		add	r3, r7, #3
 6233 01c4 1B78     		ldrb	r3, [r3]
 6234 01c6 002B     		cmp	r3, #0
 6235 01c8 14D0     		beq	.L485
1498:../Sources/TFC/TFC_CrystalClock.c ****   {
1499:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 6236              		.loc 1 1499 0
 6237 01ca 0D4B     		ldr	r3, .L489
 6238 01cc 1B7A     		ldrb	r3, [r3, #8]
 6239 01ce DBB2     		uxtb	r3, r3
 6240 01d0 1A1C     		mov	r2, r3
 6241 01d2 0E23     		mov	r3, #14
 6242 01d4 1340     		and	r3, r2
 6243 01d6 5B08     		lsr	r3, r3, #1
 6244 01d8 0122     		mov	r2, #1
 6245 01da 9A40     		lsl	r2, r2, r3
 6246 01dc 3B1C     		mov	r3, r7
 6247 01de 0C33     		add	r3, r3, #12
 6248 01e0 1A70     		strb	r2, [r3]
1500:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 6249              		.loc 1 1500 0
 6250 01e2 3B1C     		mov	r3, r7
 6251 01e4 0C33     		add	r3, r3, #12
 6252 01e6 1B78     		ldrb	r3, [r3]
 6253 01e8 7868     		ldr	r0, [r7, #4]
 6254 01ea 191C     		mov	r1, r3
 6255 01ec FFF7FEFF 		bl	__aeabi_idiv
 6256 01f0 031C     		mov	r3, r0
 6257 01f2 00E0     		b	.L463
 6258              	.L485:
1501:../Sources/TFC/TFC_CrystalClock.c ****   }
1502:../Sources/TFC/TFC_CrystalClock.c ****   else
1503:../Sources/TFC/TFC_CrystalClock.c ****   {
1504:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 6259              		.loc 1 1504 0
 6260 01f4 7B68     		ldr	r3, [r7, #4]
 6261              	.L463:
1505:../Sources/TFC/TFC_CrystalClock.c ****   }   
1506:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbi
 6262              		.loc 1 1506 0
 6263 01f6 181C     		mov	r0, r3
 6264 01f8 BD46     		mov	sp, r7
 6265 01fa 04B0     		add	sp, sp, #16
 6266              		@ sp needed for prologue
 6267 01fc 80BD     		pop	{r7, pc}
 6268              	.L490:
 6269 01fe C046     		.align	2
 6270              	.L489:
 6271 0200 00400640 		.word	1074151424
 6272 0204 117A0000 		.word	31249
 6273 0208 97980000 		.word	39063
 6274 020c BFC62D00 		.word	2999999
 6275 0210 404B4C00 		.word	5000000
 6276 0214 CF070000 		.word	1999
 6277              		.cfi_endproc
 6278              	.LFE21:
 6280              		.section	.text.fei_fee,"ax",%progbits
 6281              		.align	2
 6282              		.global	fei_fee
 6283              		.code	16
 6284              		.thumb_func
 6286              	fei_fee:
 6287              	.LFB22:
1507:../Sources/TFC/TFC_CrystalClock.c **** 
1508:../Sources/TFC/TFC_CrystalClock.c **** 
1509:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1510:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fee
1511:../Sources/TFC/TFC_CrystalClock.c ****  *
1512:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FEE mode
1513:../Sources/TFC/TFC_CrystalClock.c ****  *
1514:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FEE mode. This is
1515:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1516:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1517:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
1518:../Sources/TFC/TFC_CrystalClock.c ****  *
1519:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
1520:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
1521:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
1522:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
1523:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
1524:../Sources/TFC/TFC_CrystalClock.c ****  *
1525:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
1526:../Sources/TFC/TFC_CrystalClock.c ****  */
1527:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1528:../Sources/TFC/TFC_CrystalClock.c **** {
 6288              		.loc 1 1528 0
 6289              		.cfi_startproc
 6290 0000 80B5     		push	{r7, lr}
 6291              	.LCFI66:
 6292              		.cfi_def_cfa_offset 8
 6293              		.cfi_offset 7, -8
 6294              		.cfi_offset 14, -4
 6295 0002 86B0     		sub	sp, sp, #24
 6296              	.LCFI67:
 6297              		.cfi_def_cfa_offset 32
 6298 0004 00AF     		add	r7, sp, #0
 6299              	.LCFI68:
 6300              		.cfi_def_cfa_register 7
 6301 0006 7860     		str	r0, [r7, #4]
 6302 0008 FB1C     		add	r3, r7, #3
 6303 000a 1970     		strb	r1, [r3]
 6304 000c BB1C     		add	r3, r7, #2
 6305 000e 1A70     		strb	r2, [r3]
1529:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1530:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1531:../Sources/TFC/TFC_CrystalClock.c ****  // short i;
1532:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq, i;
1533:../Sources/TFC/TFC_CrystalClock.c ****   
1534:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
1535:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6306              		.loc 1 1535 0
 6307 0010 AC4B     		ldr	r3, .L524
 6308 0012 9B79     		ldrb	r3, [r3, #6]
 6309 0014 DBB2     		uxtb	r3, r3
 6310 0016 1A1C     		mov	r2, r3
 6311 0018 0C23     		mov	r3, #12
 6312 001a 1340     		and	r3, r2
 6313 001c 9B08     		lsr	r3, r3, #2
 6314 001e 0DD1     		bne	.L492
1536:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 6315              		.loc 1 1536 0 discriminator 1
 6316 0020 A84B     		ldr	r3, .L524
 6317 0022 9B79     		ldrb	r3, [r3, #6]
 6318 0024 DBB2     		uxtb	r3, r3
 6319 0026 1A1C     		mov	r2, r3
 6320 0028 1023     		mov	r3, #16
 6321 002a 1340     		and	r3, r2
1535:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6322              		.loc 1 1535 0 discriminator 1
 6323 002c 06D0     		beq	.L492
1537:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 6324              		.loc 1 1537 0 discriminator 1
 6325 002e A54B     		ldr	r3, .L524
 6326 0030 9B79     		ldrb	r3, [r3, #6]
 6327 0032 DBB2     		uxtb	r3, r3
 6328 0034 1A1C     		mov	r2, r3
 6329 0036 2023     		mov	r3, #32
 6330 0038 1340     		and	r3, r2
1535:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6331              		.loc 1 1535 0 discriminator 1
 6332 003a 01D0     		beq	.L493
 6333              	.L492:
1538:../Sources/TFC/TFC_CrystalClock.c ****   {
1539:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 6334              		.loc 1 1539 0
 6335 003c 0123     		mov	r3, #1
 6336 003e 3CE1     		b	.L494
 6337              	.L493:
1540:../Sources/TFC/TFC_CrystalClock.c ****   }
1541:../Sources/TFC/TFC_CrystalClock.c **** 
1542:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1543:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 6338              		.loc 1 1543 0
 6339 0040 7A68     		ldr	r2, [r7, #4]
 6340 0042 A14B     		ldr	r3, .L524+4
 6341 0044 9A42     		cmp	r2, r3
 6342 0046 01DD     		ble	.L495
 6343              		.loc 1 1543 0 is_stmt 0 discriminator 1
 6344 0048 2123     		mov	r3, #33
 6345 004a 36E1     		b	.L494
 6346              	.L495:
1544:../Sources/TFC/TFC_CrystalClock.c ****   
1545:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1546:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6347              		.loc 1 1546 0 is_stmt 1
 6348 004c BB1C     		add	r3, r7, #2
 6349 004e 1B78     		ldrb	r3, [r3]
 6350 0050 002B     		cmp	r3, #0
 6351 0052 11D0     		beq	.L496
1547:../Sources/TFC/TFC_CrystalClock.c ****   {
1548:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 6352              		.loc 1 1548 0
 6353 0054 7A68     		ldr	r2, [r7, #4]
 6354 0056 9D4B     		ldr	r3, .L524+8
 6355 0058 9A42     		cmp	r2, r3
 6356 005a 0BDD     		ble	.L497
 6357              		.loc 1 1548 0 is_stmt 0 discriminator 1
 6358 005c 7A68     		ldr	r2, [r7, #4]
 6359 005e 9C4B     		ldr	r3, .L524+12
 6360 0060 9A42     		cmp	r2, r3
 6361 0062 03DD     		ble	.L498
1549:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 6362              		.loc 1 1549 0 is_stmt 1
 6363 0064 7A68     		ldr	r2, [r7, #4]
 6364 0066 9B4B     		ldr	r3, .L524+16
 6365 0068 9A42     		cmp	r2, r3
 6366 006a 03DD     		ble	.L497
 6367              	.L498:
 6368              		.loc 1 1549 0 is_stmt 0 discriminator 1
 6369 006c 7A68     		ldr	r2, [r7, #4]
 6370 006e 9A4B     		ldr	r3, .L524+20
 6371 0070 9A42     		cmp	r2, r3
 6372 0072 01DD     		ble	.L496
 6373              	.L497:
1550:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 6374              		.loc 1 1550 0 is_stmt 1
 6375 0074 2223     		mov	r3, #34
 6376 0076 20E1     		b	.L494
 6377              	.L496:
1551:../Sources/TFC/TFC_CrystalClock.c ****   }
1552:../Sources/TFC/TFC_CrystalClock.c **** 
1553:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1554:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 6378              		.loc 1 1554 0
 6379 0078 FB1C     		add	r3, r7, #3
 6380 007a 1B78     		ldrb	r3, [r3]
 6381 007c 002B     		cmp	r3, #0
 6382 007e 02D0     		beq	.L499
1555:../Sources/TFC/TFC_CrystalClock.c ****   {
1556:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 6383              		.loc 1 1556 0
 6384 0080 FB1C     		add	r3, r7, #3
 6385 0082 0122     		mov	r2, #1
 6386 0084 1A70     		strb	r2, [r3]
 6387              	.L499:
1557:../Sources/TFC/TFC_CrystalClock.c ****   }
1558:../Sources/TFC/TFC_CrystalClock.c **** 
1559:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1560:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1561:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1562:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 6388              		.loc 1 1562 0
 6389 0086 8F4A     		ldr	r2, .L524
 6390 0088 3B1C     		mov	r3, r7
 6391 008a 1633     		add	r3, r3, #22
 6392 008c 5278     		ldrb	r2, [r2, #1]
 6393 008e 1A70     		strb	r2, [r3]
1563:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 6394              		.loc 1 1563 0
 6395 0090 3B1C     		mov	r3, r7
 6396 0092 1633     		add	r3, r3, #22
 6397 0094 3A1C     		mov	r2, r7
 6398 0096 1632     		add	r2, r2, #22
 6399 0098 1278     		ldrb	r2, [r2]
 6400 009a 3C21     		mov	r1, #60
 6401 009c 8A43     		bic	r2, r1
 6402 009e 1A70     		strb	r2, [r3]
1564:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 6403              		.loc 1 1564 0
 6404 00a0 7A68     		ldr	r2, [r7, #4]
 6405 00a2 8B4B     		ldr	r3, .L524+12
 6406 00a4 9A42     		cmp	r2, r3
 6407 00a6 11DC     		bgt	.L500
1565:../Sources/TFC/TFC_CrystalClock.c ****   {
1566:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6408              		.loc 1 1566 0
 6409 00a8 FB1C     		add	r3, r7, #3
 6410 00aa 1B78     		ldrb	r3, [r3]
 6411 00ac DB00     		lsl	r3, r3, #3
 6412 00ae DAB2     		uxtb	r2, r3
 6413 00b0 BB1C     		add	r3, r7, #2
 6414 00b2 1B78     		ldrb	r3, [r3]
 6415 00b4 9B00     		lsl	r3, r3, #2
 6416 00b6 DBB2     		uxtb	r3, r3
 6417 00b8 1343     		orr	r3, r2
 6418 00ba D9B2     		uxtb	r1, r3
 6419 00bc 3B1C     		mov	r3, r7
 6420 00be 1633     		add	r3, r3, #22
 6421 00c0 3A1C     		mov	r2, r7
 6422 00c2 1632     		add	r2, r2, #22
 6423 00c4 1278     		ldrb	r2, [r2]
 6424 00c6 0A43     		orr	r2, r1
 6425 00c8 1A70     		strb	r2, [r3]
 6426 00ca 2CE0     		b	.L501
 6427              	.L500:
1567:../Sources/TFC/TFC_CrystalClock.c ****   }
1568:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 6428              		.loc 1 1568 0
 6429 00cc 7A68     		ldr	r2, [r7, #4]
 6430 00ce 834B     		ldr	r3, .L524+24
 6431 00d0 9A42     		cmp	r2, r3
 6432 00d2 14DC     		bgt	.L502
1569:../Sources/TFC/TFC_CrystalClock.c ****   {
1570:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6433              		.loc 1 1570 0
 6434 00d4 FB1C     		add	r3, r7, #3
 6435 00d6 1B78     		ldrb	r3, [r3]
 6436 00d8 DB00     		lsl	r3, r3, #3
 6437 00da DAB2     		uxtb	r2, r3
 6438 00dc BB1C     		add	r3, r7, #2
 6439 00de 1B78     		ldrb	r3, [r3]
 6440 00e0 9B00     		lsl	r3, r3, #2
 6441 00e2 DBB2     		uxtb	r3, r3
 6442 00e4 1343     		orr	r3, r2
 6443 00e6 DAB2     		uxtb	r2, r3
 6444 00e8 3B1C     		mov	r3, r7
 6445 00ea 1633     		add	r3, r3, #22
 6446 00ec 1B78     		ldrb	r3, [r3]
 6447 00ee 1343     		orr	r3, r2
 6448 00f0 DAB2     		uxtb	r2, r3
 6449 00f2 3B1C     		mov	r3, r7
 6450 00f4 1633     		add	r3, r3, #22
 6451 00f6 1021     		mov	r1, #16
 6452 00f8 0A43     		orr	r2, r1
 6453 00fa 1A70     		strb	r2, [r3]
 6454 00fc 13E0     		b	.L501
 6455              	.L502:
1571:../Sources/TFC/TFC_CrystalClock.c ****   }
1572:../Sources/TFC/TFC_CrystalClock.c ****   else
1573:../Sources/TFC/TFC_CrystalClock.c ****   {
1574:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6456              		.loc 1 1574 0
 6457 00fe FB1C     		add	r3, r7, #3
 6458 0100 1B78     		ldrb	r3, [r3]
 6459 0102 DB00     		lsl	r3, r3, #3
 6460 0104 DAB2     		uxtb	r2, r3
 6461 0106 BB1C     		add	r3, r7, #2
 6462 0108 1B78     		ldrb	r3, [r3]
 6463 010a 9B00     		lsl	r3, r3, #2
 6464 010c DBB2     		uxtb	r3, r3
 6465 010e 1343     		orr	r3, r2
 6466 0110 DAB2     		uxtb	r2, r3
 6467 0112 3B1C     		mov	r3, r7
 6468 0114 1633     		add	r3, r3, #22
 6469 0116 1B78     		ldrb	r3, [r3]
 6470 0118 1343     		orr	r3, r2
 6471 011a DAB2     		uxtb	r2, r3
 6472 011c 3B1C     		mov	r3, r7
 6473 011e 1633     		add	r3, r3, #22
 6474 0120 2021     		mov	r1, #32
 6475 0122 0A43     		orr	r2, r1
 6476 0124 1A70     		strb	r2, [r3]
 6477              	.L501:
1575:../Sources/TFC/TFC_CrystalClock.c ****   }
1576:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 6478              		.loc 1 1576 0
 6479 0126 674B     		ldr	r3, .L524
 6480 0128 3A1C     		mov	r2, r7
 6481 012a 1632     		add	r2, r2, #22
 6482 012c 1278     		ldrb	r2, [r2]
 6483 012e 5A70     		strb	r2, [r3, #1]
1577:../Sources/TFC/TFC_CrystalClock.c **** 
1578:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1579:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1580:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 6484              		.loc 1 1580 0
 6485 0130 7A68     		ldr	r2, [r7, #4]
 6486 0132 6B4B     		ldr	r3, .L524+28
 6487 0134 9A42     		cmp	r2, r3
 6488 0136 04DC     		bgt	.L503
 6489              		.loc 1 1580 0 is_stmt 0 discriminator 1
 6490 0138 3B1C     		mov	r3, r7
 6491 013a 1733     		add	r3, r3, #23
 6492 013c 0022     		mov	r2, #0
 6493 013e 1A70     		strb	r2, [r3]
 6494 0140 27E0     		b	.L504
 6495              	.L503:
1581:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 6496              		.loc 1 1581 0 is_stmt 1
 6497 0142 7A68     		ldr	r2, [r7, #4]
 6498 0144 674B     		ldr	r3, .L524+32
 6499 0146 9A42     		cmp	r2, r3
 6500 0148 04DC     		bgt	.L505
 6501              		.loc 1 1581 0 is_stmt 0 discriminator 1
 6502 014a 3B1C     		mov	r3, r7
 6503 014c 1733     		add	r3, r3, #23
 6504 014e 0122     		mov	r2, #1
 6505 0150 1A70     		strb	r2, [r3]
 6506 0152 1EE0     		b	.L504
 6507              	.L505:
1582:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 6508              		.loc 1 1582 0 is_stmt 1
 6509 0154 7A68     		ldr	r2, [r7, #4]
 6510 0156 644B     		ldr	r3, .L524+36
 6511 0158 9A42     		cmp	r2, r3
 6512 015a 04DC     		bgt	.L506
 6513              		.loc 1 1582 0 is_stmt 0 discriminator 1
 6514 015c 3B1C     		mov	r3, r7
 6515 015e 1733     		add	r3, r3, #23
 6516 0160 0222     		mov	r2, #2
 6517 0162 1A70     		strb	r2, [r3]
 6518 0164 15E0     		b	.L504
 6519              	.L506:
1583:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 6520              		.loc 1 1583 0 is_stmt 1
 6521 0166 7A68     		ldr	r2, [r7, #4]
 6522 0168 604B     		ldr	r3, .L524+40
 6523 016a 9A42     		cmp	r2, r3
 6524 016c 04DC     		bgt	.L507
 6525              		.loc 1 1583 0 is_stmt 0 discriminator 1
 6526 016e 3B1C     		mov	r3, r7
 6527 0170 1733     		add	r3, r3, #23
 6528 0172 0322     		mov	r2, #3
 6529 0174 1A70     		strb	r2, [r3]
 6530 0176 0CE0     		b	.L504
 6531              	.L507:
1584:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 6532              		.loc 1 1584 0 is_stmt 1
 6533 0178 7A68     		ldr	r2, [r7, #4]
 6534 017a 5D4B     		ldr	r3, .L524+44
 6535 017c 9A42     		cmp	r2, r3
 6536 017e 04DC     		bgt	.L508
 6537              		.loc 1 1584 0 is_stmt 0 discriminator 1
 6538 0180 3B1C     		mov	r3, r7
 6539 0182 1733     		add	r3, r3, #23
 6540 0184 0422     		mov	r2, #4
 6541 0186 1A70     		strb	r2, [r3]
 6542 0188 03E0     		b	.L504
 6543              	.L508:
1585:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 6544              		.loc 1 1585 0 is_stmt 1
 6545 018a 3B1C     		mov	r3, r7
 6546 018c 1733     		add	r3, r3, #23
 6547 018e 0522     		mov	r2, #5
 6548 0190 1A70     		strb	r2, [r3]
 6549              	.L504:
1586:../Sources/TFC/TFC_CrystalClock.c ****    
1587:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
1588:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 6550              		.loc 1 1588 0
 6551 0192 4C4B     		ldr	r3, .L524
 6552 0194 5B78     		ldrb	r3, [r3, #1]
 6553 0196 DBB2     		uxtb	r3, r3
 6554 0198 1A1C     		mov	r2, r3
 6555 019a 3023     		mov	r3, #48
 6556 019c 1340     		and	r3, r2
 6557 019e 1B09     		lsr	r3, r3, #4
 6558 01a0 0DD0     		beq	.L509
1589:../Sources/TFC/TFC_CrystalClock.c ****   {
1590:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 6559              		.loc 1 1590 0
 6560 01a2 3B1C     		mov	r3, r7
 6561 01a4 1733     		add	r3, r3, #23
 6562 01a6 1B78     		ldrb	r3, [r3]
 6563 01a8 2022     		mov	r2, #32
 6564 01aa 111C     		mov	r1, r2
 6565 01ac 9940     		lsl	r1, r1, r3
 6566 01ae 0B1C     		mov	r3, r1
 6567 01b0 7868     		ldr	r0, [r7, #4]
 6568 01b2 191C     		mov	r1, r3
 6569 01b4 FFF7FEFF 		bl	__aeabi_idiv
 6570 01b8 031C     		mov	r3, r0
 6571 01ba 3B61     		str	r3, [r7, #16]
 6572 01bc 0CE0     		b	.L510
 6573              	.L509:
1591:../Sources/TFC/TFC_CrystalClock.c ****   }
1592:../Sources/TFC/TFC_CrystalClock.c ****   else
1593:../Sources/TFC/TFC_CrystalClock.c ****   {
1594:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 6574              		.loc 1 1594 0
 6575 01be 3B1C     		mov	r3, r7
 6576 01c0 1733     		add	r3, r3, #23
 6577 01c2 1B78     		ldrb	r3, [r3]
 6578 01c4 0122     		mov	r2, #1
 6579 01c6 111C     		mov	r1, r2
 6580 01c8 9940     		lsl	r1, r1, r3
 6581 01ca 0B1C     		mov	r3, r1
 6582 01cc 7868     		ldr	r0, [r7, #4]
 6583 01ce 191C     		mov	r1, r3
 6584 01d0 FFF7FEFF 		bl	__aeabi_idiv
 6585 01d4 031C     		mov	r3, r0
 6586 01d6 3B61     		str	r3, [r7, #16]
 6587              	.L510:
1595:../Sources/TFC/TFC_CrystalClock.c ****   }
1596:../Sources/TFC/TFC_CrystalClock.c ****   
1597:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1598:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 6588              		.loc 1 1598 0
 6589 01d8 3B69     		ldr	r3, [r7, #16]
 6590 01da 181C     		mov	r0, r3
 6591 01dc FFF7FEFF 		bl	fll_freq
 6592 01e0 031C     		mov	r3, r0
 6593 01e2 BB60     		str	r3, [r7, #8]
1599:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6594              		.loc 1 1599 0
 6595 01e4 BB68     		ldr	r3, [r7, #8]
 6596 01e6 3B2B     		cmp	r3, #59
 6597 01e8 01DC     		bgt	.L511
 6598              		.loc 1 1599 0 is_stmt 0 discriminator 1
 6599 01ea BB68     		ldr	r3, [r7, #8]
 6600 01ec 65E0     		b	.L494
 6601              	.L511:
1600:../Sources/TFC/TFC_CrystalClock.c ****   
1601:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1602:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1603:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1604:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6602              		.loc 1 1604 0 is_stmt 1
 6603 01ee 354A     		ldr	r2, .L524
 6604 01f0 3B1C     		mov	r3, r7
 6605 01f2 1633     		add	r3, r3, #22
 6606 01f4 1278     		ldrb	r2, [r2]
 6607 01f6 1A70     		strb	r2, [r3]
1605:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 6608              		.loc 1 1605 0
 6609 01f8 3B1C     		mov	r3, r7
 6610 01fa 1633     		add	r3, r3, #22
 6611 01fc 3A1C     		mov	r2, r7
 6612 01fe 1632     		add	r2, r2, #22
 6613 0200 1178     		ldrb	r1, [r2]
 6614 0202 0322     		mov	r2, #3
 6615 0204 0A40     		and	r2, r1
 6616 0206 1A70     		strb	r2, [r3]
1606:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 6617              		.loc 1 1606 0
 6618 0208 3B1C     		mov	r3, r7
 6619 020a 1733     		add	r3, r3, #23
 6620 020c 1B78     		ldrb	r3, [r3]
 6621 020e DB00     		lsl	r3, r3, #3
 6622 0210 DAB2     		uxtb	r2, r3
 6623 0212 3823     		mov	r3, #56
 6624 0214 1340     		and	r3, r2
 6625 0216 D9B2     		uxtb	r1, r3
 6626 0218 3B1C     		mov	r3, r7
 6627 021a 1633     		add	r3, r3, #22
 6628 021c 3A1C     		mov	r2, r7
 6629 021e 1632     		add	r2, r2, #22
 6630 0220 1278     		ldrb	r2, [r2]
 6631 0222 0A43     		orr	r2, r1
 6632 0224 1A70     		strb	r2, [r3]
1607:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6633              		.loc 1 1607 0
 6634 0226 274B     		ldr	r3, .L524
 6635 0228 3A1C     		mov	r2, r7
 6636 022a 1632     		add	r2, r2, #22
 6637 022c 1278     		ldrb	r2, [r2]
 6638 022e 1A70     		strb	r2, [r3]
1608:../Sources/TFC/TFC_CrystalClock.c **** 
1609:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1610:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6639              		.loc 1 1610 0
 6640 0230 BB1C     		add	r3, r7, #2
 6641 0232 1B78     		ldrb	r3, [r3]
 6642 0234 002B     		cmp	r3, #0
 6643 0236 1BD0     		beq	.L512
1611:../Sources/TFC/TFC_CrystalClock.c ****   {
1612:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6644              		.loc 1 1612 0
 6645 0238 0023     		mov	r3, #0
 6646 023a FB60     		str	r3, [r7, #12]
 6647 023c 09E0     		b	.L513
 6648              	.L516:
1613:../Sources/TFC/TFC_CrystalClock.c ****     {
1614:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 6649              		.loc 1 1614 0
 6650 023e 214B     		ldr	r3, .L524
 6651 0240 9B79     		ldrb	r3, [r3, #6]
 6652 0242 DBB2     		uxtb	r3, r3
 6653 0244 1A1C     		mov	r2, r3
 6654 0246 0223     		mov	r3, #2
 6655 0248 1340     		and	r3, r2
 6656 024a 07D1     		bne	.L522
 6657              	.L514:
1612:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6658              		.loc 1 1612 0
 6659 024c FB68     		ldr	r3, [r7, #12]
 6660 024e 0133     		add	r3, r3, #1
 6661 0250 FB60     		str	r3, [r7, #12]
 6662              	.L513:
1612:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6663              		.loc 1 1612 0 is_stmt 0 discriminator 1
 6664 0252 FA68     		ldr	r2, [r7, #12]
 6665 0254 274B     		ldr	r3, .L524+48
 6666 0256 9A42     		cmp	r2, r3
 6667 0258 F1DD     		ble	.L516
 6668 025a 00E0     		b	.L515
 6669              	.L522:
 6670              		.loc 1 1614 0 is_stmt 1
 6671 025c C046     		mov	r8, r8
 6672              	.L515:
1615:../Sources/TFC/TFC_CrystalClock.c ****     }
1616:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 6673              		.loc 1 1616 0
 6674 025e 194B     		ldr	r3, .L524
 6675 0260 9B79     		ldrb	r3, [r3, #6]
 6676 0262 DBB2     		uxtb	r3, r3
 6677 0264 1A1C     		mov	r2, r3
 6678 0266 0223     		mov	r3, #2
 6679 0268 1340     		and	r3, r2
 6680 026a 01D1     		bne	.L512
 6681              		.loc 1 1616 0 is_stmt 0 discriminator 1
 6682 026c 2323     		mov	r3, #35
 6683 026e 24E0     		b	.L494
 6684              	.L512:
1617:../Sources/TFC/TFC_CrystalClock.c ****   }
1618:../Sources/TFC/TFC_CrystalClock.c **** 
1619:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1620:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6685              		.loc 1 1620 0 is_stmt 1
 6686 0270 0023     		mov	r3, #0
 6687 0272 FB60     		str	r3, [r7, #12]
 6688 0274 09E0     		b	.L517
 6689              	.L520:
1621:../Sources/TFC/TFC_CrystalClock.c ****   {
1622:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 6690              		.loc 1 1622 0
 6691 0276 134B     		ldr	r3, .L524
 6692 0278 9B79     		ldrb	r3, [r3, #6]
 6693 027a DBB2     		uxtb	r3, r3
 6694 027c 1A1C     		mov	r2, r3
 6695 027e 1023     		mov	r3, #16
 6696 0280 1340     		and	r3, r2
 6697 0282 07D0     		beq	.L523
 6698              	.L518:
1620:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6699              		.loc 1 1620 0
 6700 0284 FB68     		ldr	r3, [r7, #12]
 6701 0286 0133     		add	r3, r3, #1
 6702 0288 FB60     		str	r3, [r7, #12]
 6703              	.L517:
1620:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6704              		.loc 1 1620 0 is_stmt 0 discriminator 1
 6705 028a FA68     		ldr	r2, [r7, #12]
 6706 028c 1A4B     		ldr	r3, .L524+52
 6707 028e 9A42     		cmp	r2, r3
 6708 0290 F1DD     		ble	.L520
 6709 0292 00E0     		b	.L519
 6710              	.L523:
 6711              		.loc 1 1622 0 is_stmt 1
 6712 0294 C046     		mov	r8, r8
 6713              	.L519:
1623:../Sources/TFC/TFC_CrystalClock.c ****   }
1624:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 6714              		.loc 1 1624 0
 6715 0296 0B4B     		ldr	r3, .L524
 6716 0298 9B79     		ldrb	r3, [r3, #6]
 6717 029a DBB2     		uxtb	r3, r3
 6718 029c 1A1C     		mov	r2, r3
 6719 029e 1023     		mov	r3, #16
 6720 02a0 1340     		and	r3, r2
 6721 02a2 01D0     		beq	.L521
 6722              		.loc 1 1624 0 is_stmt 0 discriminator 1
 6723 02a4 1123     		mov	r3, #17
 6724 02a6 08E0     		b	.L494
 6725              	.L521:
1625:../Sources/TFC/TFC_CrystalClock.c ****   
1626:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1627:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1628:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1629:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 6726              		.loc 1 1629 0 is_stmt 1
 6727 02a8 064B     		ldr	r3, .L524
 6728 02aa 064A     		ldr	r2, .L524
 6729 02ac 5279     		ldrb	r2, [r2, #5]
 6730 02ae D2B2     		uxtb	r2, r2
 6731 02b0 2021     		mov	r1, #32
 6732 02b2 0A43     		orr	r2, r1
 6733 02b4 D2B2     		uxtb	r2, r2
 6734 02b6 5A71     		strb	r2, [r3, #5]
1630:../Sources/TFC/TFC_CrystalClock.c ****   
1631:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 6735              		.loc 1 1631 0
 6736 02b8 BB68     		ldr	r3, [r7, #8]
 6737              	.L494:
1632:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fee
 6738              		.loc 1 1632 0
 6739 02ba 181C     		mov	r0, r3
 6740 02bc BD46     		mov	sp, r7
 6741 02be 06B0     		add	sp, sp, #24
 6742              		@ sp needed for prologue
 6743 02c0 80BD     		pop	{r7, pc}
 6744              	.L525:
 6745 02c2 C046     		.align	2
 6746              	.L524:
 6747 02c4 00400640 		.word	1074151424
 6748 02c8 80F0FA02 		.word	50000000
 6749 02cc 2F750000 		.word	29999
 6750 02d0 409C0000 		.word	40000
 6751 02d4 BFC62D00 		.word	2999999
 6752 02d8 0048E801 		.word	32000000
 6753 02dc 00127A00 		.word	8000000
 6754 02e0 D0121300 		.word	1250000
 6755 02e4 A0252600 		.word	2500000
 6756 02e8 404B4C00 		.word	5000000
 6757 02ec 80969800 		.word	10000000
 6758 02f0 002D3101 		.word	20000000
 6759 02f4 FF2C3101 		.word	19999999
 6760 02f8 CF070000 		.word	1999
 6761              		.cfi_endproc
 6762              	.LFE22:
 6764              		.section	.text.fee_fei,"ax",%progbits
 6765              		.align	2
 6766              		.global	fee_fei
 6767              		.code	16
 6768              		.thumb_func
 6770              	fee_fei:
 6771              	.LFB23:
1633:../Sources/TFC/TFC_CrystalClock.c **** 
1634:../Sources/TFC/TFC_CrystalClock.c **** 
1635:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq)
1636:../Sources/TFC/TFC_CrystalClock.c **** {
 6772              		.loc 1 1636 0
 6773              		.cfi_startproc
 6774 0000 80B5     		push	{r7, lr}
 6775              	.LCFI69:
 6776              		.cfi_def_cfa_offset 8
 6777              		.cfi_offset 7, -8
 6778              		.cfi_offset 14, -4
 6779 0002 84B0     		sub	sp, sp, #16
 6780              	.LCFI70:
 6781              		.cfi_def_cfa_offset 24
 6782 0004 00AF     		add	r7, sp, #0
 6783              	.LCFI71:
 6784              		.cfi_def_cfa_register 7
 6785 0006 7860     		str	r0, [r7, #4]
1637:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1638:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1639:../Sources/TFC/TFC_CrystalClock.c **** 
1640:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1641:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6786              		.loc 1 1641 0
 6787 0008 334B     		ldr	r3, .L539
 6788 000a 9B79     		ldrb	r3, [r3, #6]
 6789 000c DBB2     		uxtb	r3, r3
 6790 000e 1A1C     		mov	r2, r3
 6791 0010 0C23     		mov	r3, #12
 6792 0012 1340     		and	r3, r2
 6793 0014 9B08     		lsr	r3, r3, #2
 6794 0016 0DD1     		bne	.L527
1642:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 6795              		.loc 1 1642 0 discriminator 1
 6796 0018 2F4B     		ldr	r3, .L539
 6797 001a 9B79     		ldrb	r3, [r3, #6]
 6798 001c DBB2     		uxtb	r3, r3
 6799 001e 1A1C     		mov	r2, r3
 6800 0020 1023     		mov	r3, #16
 6801 0022 1340     		and	r3, r2
1641:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6802              		.loc 1 1641 0 discriminator 1
 6803 0024 06D1     		bne	.L527
1643:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 6804              		.loc 1 1643 0 discriminator 1
 6805 0026 2C4B     		ldr	r3, .L539
 6806 0028 9B79     		ldrb	r3, [r3, #6]
 6807 002a DBB2     		uxtb	r3, r3
 6808 002c 1A1C     		mov	r2, r3
 6809 002e 2023     		mov	r3, #32
 6810 0030 1340     		and	r3, r2
1641:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6811              		.loc 1 1641 0 discriminator 1
 6812 0032 01D0     		beq	.L528
 6813              	.L527:
1644:../Sources/TFC/TFC_CrystalClock.c ****   {
1645:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 6814              		.loc 1 1645 0
 6815 0034 0223     		mov	r3, #2
 6816 0036 4AE0     		b	.L529
 6817              	.L528:
1646:../Sources/TFC/TFC_CrystalClock.c ****   } 
1647:../Sources/TFC/TFC_CrystalClock.c ****       
1648:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1649:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 6818              		.loc 1 1649 0
 6819 0038 7A68     		ldr	r2, [r7, #4]
 6820 003a 284B     		ldr	r3, .L539+4
 6821 003c 9A42     		cmp	r2, r3
 6822 003e 03DD     		ble	.L530
 6823              		.loc 1 1649 0 is_stmt 0 discriminator 1
 6824 0040 7A68     		ldr	r2, [r7, #4]
 6825 0042 274B     		ldr	r3, .L539+8
 6826 0044 9A42     		cmp	r2, r3
 6827 0046 01DD     		ble	.L531
 6828              	.L530:
1650:../Sources/TFC/TFC_CrystalClock.c ****   {
1651:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 6829              		.loc 1 1651 0 is_stmt 1
 6830 0048 3123     		mov	r3, #49
 6831 004a 40E0     		b	.L529
 6832              	.L531:
1652:../Sources/TFC/TFC_CrystalClock.c ****   }
1653:../Sources/TFC/TFC_CrystalClock.c **** 
1654:../Sources/TFC/TFC_CrystalClock.c ****   // Check resulting FLL frequency 
1655:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 6833              		.loc 1 1655 0
 6834 004c 7B68     		ldr	r3, [r7, #4]
 6835 004e 181C     		mov	r0, r3
 6836 0050 FFF7FEFF 		bl	fll_freq
 6837 0054 031C     		mov	r3, r0
 6838 0056 BB60     		str	r3, [r7, #8]
1656:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6839              		.loc 1 1656 0
 6840 0058 BB68     		ldr	r3, [r7, #8]
 6841 005a 3B2B     		cmp	r3, #59
 6842 005c 01DC     		bgt	.L532
 6843              		.loc 1 1656 0 is_stmt 0 discriminator 1
 6844 005e BB68     		ldr	r3, [r7, #8]
 6845 0060 35E0     		b	.L529
 6846              	.L532:
1657:../Sources/TFC/TFC_CrystalClock.c ****   
1658:../Sources/TFC/TFC_CrystalClock.c **** // Ensure clock monitor is disabled before switching to FEI otherwise a loss of clock will trigger
1659:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 6847              		.loc 1 1659 0 is_stmt 1
 6848 0062 1D4B     		ldr	r3, .L539
 6849 0064 1C4A     		ldr	r2, .L539
 6850 0066 5279     		ldrb	r2, [r2, #5]
 6851 0068 D2B2     		uxtb	r2, r2
 6852 006a 2021     		mov	r1, #32
 6853 006c 8A43     		bic	r2, r1
 6854 006e D2B2     		uxtb	r2, r2
 6855 0070 5A71     		strb	r2, [r3, #5]
1660:../Sources/TFC/TFC_CrystalClock.c **** 
1661:../Sources/TFC/TFC_CrystalClock.c **** // Change FLL reference clock from external to internal by setting IREFS bit
1662:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_IREFS_MASK; // select internal reference
 6856              		.loc 1 1662 0
 6857 0072 194B     		ldr	r3, .L539
 6858 0074 184A     		ldr	r2, .L539
 6859 0076 1278     		ldrb	r2, [r2]
 6860 0078 D2B2     		uxtb	r2, r2
 6861 007a 0421     		mov	r1, #4
 6862 007c 0A43     		orr	r2, r1
 6863 007e D2B2     		uxtb	r2, r2
 6864 0080 1A70     		strb	r2, [r3]
1663:../Sources/TFC/TFC_CrystalClock.c ****   
1664:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock to switch to internal reference 
1665:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6865              		.loc 1 1665 0
 6866 0082 3B1C     		mov	r3, r7
 6867 0084 0E33     		add	r3, r3, #14
 6868 0086 0022     		mov	r2, #0
 6869 0088 1A80     		strh	r2, [r3]
 6870 008a 0DE0     		b	.L533
 6871              	.L536:
1666:../Sources/TFC/TFC_CrystalClock.c ****   {
1667:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 6872              		.loc 1 1667 0
 6873 008c 124B     		ldr	r3, .L539
 6874 008e 9B79     		ldrb	r3, [r3, #6]
 6875 0090 DBB2     		uxtb	r3, r3
 6876 0092 1A1C     		mov	r2, r3
 6877 0094 1023     		mov	r3, #16
 6878 0096 1340     		and	r3, r2
 6879 0098 0ED1     		bne	.L538
 6880              	.L534:
1665:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6881              		.loc 1 1665 0
 6882 009a 3B1C     		mov	r3, r7
 6883 009c 0E33     		add	r3, r3, #14
 6884 009e 3A1C     		mov	r2, r7
 6885 00a0 0E32     		add	r2, r2, #14
 6886 00a2 1288     		ldrh	r2, [r2]
 6887 00a4 0132     		add	r2, r2, #1
 6888 00a6 1A80     		strh	r2, [r3]
 6889              	.L533:
1665:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6890              		.loc 1 1665 0 is_stmt 0 discriminator 1
 6891 00a8 3B1C     		mov	r3, r7
 6892 00aa 0E33     		add	r3, r3, #14
 6893 00ac 0021     		mov	r1, #0
 6894 00ae 5A5E     		ldrsh	r2, [r3, r1]
 6895 00b0 0C4B     		ldr	r3, .L539+12
 6896 00b2 9A42     		cmp	r2, r3
 6897 00b4 EADD     		ble	.L536
 6898 00b6 00E0     		b	.L535
 6899              	.L538:
 6900              		.loc 1 1667 0 is_stmt 1
 6901 00b8 C046     		mov	r8, r8
 6902              	.L535:
1668:../Sources/TFC/TFC_CrystalClock.c ****   }
1669:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 6903              		.loc 1 1669 0
 6904 00ba 074B     		ldr	r3, .L539
 6905 00bc 9B79     		ldrb	r3, [r3, #6]
 6906 00be DBB2     		uxtb	r3, r3
 6907 00c0 1A1C     		mov	r2, r3
 6908 00c2 1023     		mov	r3, #16
 6909 00c4 1340     		and	r3, r2
 6910 00c6 01D1     		bne	.L537
 6911              		.loc 1 1669 0 is_stmt 0 discriminator 1
 6912 00c8 1223     		mov	r3, #18
 6913 00ca 00E0     		b	.L529
 6914              	.L537:
1670:../Sources/TFC/TFC_CrystalClock.c ****   
1671:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode  
1672:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 6915              		.loc 1 1672 0 is_stmt 1
 6916 00cc BB68     		ldr	r3, [r7, #8]
 6917              	.L529:
1673:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fei
 6918              		.loc 1 1673 0
 6919 00ce 181C     		mov	r0, r3
 6920 00d0 BD46     		mov	sp, r7
 6921 00d2 04B0     		add	sp, sp, #16
 6922              		@ sp needed for prologue
 6923 00d4 80BD     		pop	{r7, pc}
 6924              	.L540:
 6925 00d6 C046     		.align	2
 6926              	.L539:
 6927 00d8 00400640 		.word	1074151424
 6928 00dc 117A0000 		.word	31249
 6929 00e0 97980000 		.word	39063
 6930 00e4 CF070000 		.word	1999
 6931              		.cfi_endproc
 6932              	.LFE23:
 6934              		.global	__aeabi_uidiv
 6935              		.global	__aeabi_i2f
 6936              		.global	__aeabi_fdiv
 6937              		.global	__aeabi_fmul
 6938              		.global	__aeabi_f2uiz
 6939              		.section	.text.atc,"ax",%progbits
 6940              		.align	2
 6941              		.global	atc
 6942              		.code	16
 6943              		.thumb_func
 6945              	atc:
 6946              	.LFB24:
1674:../Sources/TFC/TFC_CrystalClock.c **** 
1675:../Sources/TFC/TFC_CrystalClock.c **** 
1676:../Sources/TFC/TFC_CrystalClock.c **** 
1677:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq)
1678:../Sources/TFC/TFC_CrystalClock.c **** {
 6947              		.loc 1 1678 0
 6948              		.cfi_startproc
 6949 0000 90B5     		push	{r4, r7, lr}
 6950              	.LCFI72:
 6951              		.cfi_def_cfa_offset 12
 6952              		.cfi_offset 4, -12
 6953              		.cfi_offset 7, -8
 6954              		.cfi_offset 14, -4
 6955 0002 8BB0     		sub	sp, sp, #44
 6956              	.LCFI73:
 6957              		.cfi_def_cfa_offset 56
 6958 0004 00AF     		add	r7, sp, #0
 6959              	.LCFI74:
 6960              		.cfi_def_cfa_register 7
 6961 0006 B960     		str	r1, [r7, #8]
 6962 0008 7A60     		str	r2, [r7, #4]
 6963 000a 3B1C     		mov	r3, r7
 6964 000c 0F33     		add	r3, r3, #15
 6965 000e 021C     		add	r2, r0, #0
 6966 0010 1A70     		strb	r2, [r3]
1679:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char mcg_mode;
1680:../Sources/TFC/TFC_CrystalClock.c ****   unsigned short atcv;
1681:../Sources/TFC/TFC_CrystalClock.c ****   int bus_clock_freq;
1682:../Sources/TFC/TFC_CrystalClock.c ****   int  bus_clk_div_val;
1683:../Sources/TFC/TFC_CrystalClock.c ****   int orig_div;
1684:../Sources/TFC/TFC_CrystalClock.c ****   int temp_reg;
1685:../Sources/TFC/TFC_CrystalClock.c ****   
1686:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select > 0) // force irc to 1 if greater than 0
 6967              		.loc 1 1686 0
 6968 0012 3B1C     		mov	r3, r7
 6969 0014 0F33     		add	r3, r3, #15
 6970 0016 1B78     		ldrb	r3, [r3]
 6971 0018 002B     		cmp	r3, #0
 6972 001a 03D0     		beq	.L542
1687:../Sources/TFC/TFC_CrystalClock.c ****   {
1688:../Sources/TFC/TFC_CrystalClock.c ****     irc_select = 1;
 6973              		.loc 1 1688 0
 6974 001c 3B1C     		mov	r3, r7
 6975 001e 0F33     		add	r3, r3, #15
 6976 0020 0122     		mov	r2, #1
 6977 0022 1A70     		strb	r2, [r3]
 6978              	.L542:
1689:../Sources/TFC/TFC_CrystalClock.c ****   }
1690:../Sources/TFC/TFC_CrystalClock.c ****   
1691:../Sources/TFC/TFC_CrystalClock.c ****   mcg_mode = what_mcg_mode(); // get present MCG mode
 6979              		.loc 1 1691 0
 6980 0024 3C1C     		mov	r4, r7
 6981 0026 2534     		add	r4, r4, #37
 6982 0028 FFF7FEFF 		bl	what_mcg_mode
 6983 002c 031C     		mov	r3, r0
 6984 002e 2370     		strb	r3, [r4]
1692:../Sources/TFC/TFC_CrystalClock.c ****   if ((mcg_mode != PEE) && (mcg_mode != PBE) && (mcg_mode != FBE))
 6985              		.loc 1 1692 0
 6986 0030 3B1C     		mov	r3, r7
 6987 0032 2533     		add	r3, r3, #37
 6988 0034 1B78     		ldrb	r3, [r3]
 6989 0036 082B     		cmp	r3, #8
 6990 0038 0BD0     		beq	.L543
 6991              		.loc 1 1692 0 is_stmt 0 discriminator 1
 6992 003a 3B1C     		mov	r3, r7
 6993 003c 2533     		add	r3, r3, #37
 6994 003e 1B78     		ldrb	r3, [r3]
 6995 0040 072B     		cmp	r3, #7
 6996 0042 06D0     		beq	.L543
 6997 0044 3B1C     		mov	r3, r7
 6998 0046 2533     		add	r3, r3, #37
 6999 0048 1B78     		ldrb	r3, [r3]
 7000 004a 052B     		cmp	r3, #5
 7001 004c 01D0     		beq	.L543
1693:../Sources/TFC/TFC_CrystalClock.c ****   {
1694:../Sources/TFC/TFC_CrystalClock.c ****     return 1; // return error code if not in PEE, PBE or FBE modes
 7002              		.loc 1 1694 0 is_stmt 1
 7003 004e 0123     		mov	r3, #1
 7004 0050 10E1     		b	.L544
 7005              	.L543:
1695:../Sources/TFC/TFC_CrystalClock.c ****   }
1696:../Sources/TFC/TFC_CrystalClock.c ****   
1697:../Sources/TFC/TFC_CrystalClock.c ****   orig_div = SIM_CLKDIV1; //store present clock divider values
 7006              		.loc 1 1697 0
 7007 0052 8A4A     		ldr	r2, .L559
 7008 0054 8A4B     		ldr	r3, .L559+4
 7009 0056 D358     		ldr	r3, [r2, r3]
 7010 0058 3B62     		str	r3, [r7, #32]
1698:../Sources/TFC/TFC_CrystalClock.c ****   
1699:../Sources/TFC/TFC_CrystalClock.c ****   bus_clk_div_val = mcg_out_freq / 16000000; // calculate bus clock divider to generate fastest all
 7011              		.loc 1 1699 0
 7012 005a 7B68     		ldr	r3, [r7, #4]
 7013 005c 181C     		mov	r0, r3
 7014 005e 8949     		ldr	r1, .L559+8
 7015 0060 FFF7FEFF 		bl	__aeabi_idiv
 7016 0064 031C     		mov	r3, r0
 7017 0066 FB61     		str	r3, [r7, #28]
1700:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = SIM_CLKDIV1;
 7018              		.loc 1 1700 0
 7019 0068 844A     		ldr	r2, .L559
 7020 006a 854B     		ldr	r3, .L559+4
 7021 006c D358     		ldr	r3, [r2, r3]
 7022 006e BB61     		str	r3, [r7, #24]
1701:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~SIM_CLKDIV1_OUTDIV4_MASK; // clear dividers except core
 7023              		.loc 1 1701 0
 7024 0070 BA69     		ldr	r2, [r7, #24]
 7025 0072 854B     		ldr	r3, .L559+12
 7026 0074 1340     		and	r3, r2
 7027 0076 BB61     		str	r3, [r7, #24]
1702:../Sources/TFC/TFC_CrystalClock.c ****   // set all bus and flash dividers to same value to ensure clocking restrictions are met
1703:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= SIM_CLKDIV1_OUTDIV4(bus_clk_div_val);
 7028              		.loc 1 1703 0
 7029 0078 FB69     		ldr	r3, [r7, #28]
 7030 007a 1A04     		lsl	r2, r3, #16
 7031 007c E023     		mov	r3, #224
 7032 007e DB02     		lsl	r3, r3, #11
 7033 0080 1A40     		and	r2, r3
 7034 0082 BB69     		ldr	r3, [r7, #24]
 7035 0084 1343     		orr	r3, r2
 7036 0086 BB61     		str	r3, [r7, #24]
1704:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = temp_reg; // set actual dividers
 7037              		.loc 1 1704 0
 7038 0088 7C4A     		ldr	r2, .L559
 7039 008a B969     		ldr	r1, [r7, #24]
 7040 008c 7C4B     		ldr	r3, .L559+4
 7041 008e D150     		str	r1, [r2, r3]
1705:../Sources/TFC/TFC_CrystalClock.c ****   
1706:../Sources/TFC/TFC_CrystalClock.c ****   bus_clock_freq = mcg_out_freq / (((SIM_CLKDIV1) >> 16)+ 1);//For KL25, flash and bus use the same
 7042              		.loc 1 1706 0
 7043 0090 7A68     		ldr	r2, [r7, #4]
 7044 0092 7A49     		ldr	r1, .L559
 7045 0094 7A4B     		ldr	r3, .L559+4
 7046 0096 CB58     		ldr	r3, [r1, r3]
 7047 0098 1B0C     		lsr	r3, r3, #16
 7048 009a 0133     		add	r3, r3, #1
 7049 009c 101C     		mov	r0, r2
 7050 009e 191C     		mov	r1, r3
 7051 00a0 FFF7FEFF 		bl	__aeabi_uidiv
 7052 00a4 031C     		mov	r3, r0
 7053 00a6 7B61     		str	r3, [r7, #20]
1707:../Sources/TFC/TFC_CrystalClock.c ****   if ((bus_clock_freq < 8000000) || (bus_clock_freq > 16000000))
 7054              		.loc 1 1707 0
 7055 00a8 7A69     		ldr	r2, [r7, #20]
 7056 00aa 784B     		ldr	r3, .L559+16
 7057 00ac 9A42     		cmp	r2, r3
 7058 00ae 03DD     		ble	.L545
 7059              		.loc 1 1707 0 is_stmt 0 discriminator 1
 7060 00b0 7A69     		ldr	r2, [r7, #20]
 7061 00b2 744B     		ldr	r3, .L559+8
 7062 00b4 9A42     		cmp	r2, r3
 7063 00b6 05DD     		ble	.L546
 7064              	.L545:
1708:../Sources/TFC/TFC_CrystalClock.c ****   {
1709:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7065              		.loc 1 1709 0 is_stmt 1
 7066 00b8 704A     		ldr	r2, .L559
 7067 00ba 396A     		ldr	r1, [r7, #32]
 7068 00bc 704B     		ldr	r3, .L559+4
 7069 00be D150     		str	r1, [r2, r3]
1710:../Sources/TFC/TFC_CrystalClock.c ****     return 3; // error, bus clock frequency is not within 8MHz to 16MHz
 7070              		.loc 1 1710 0
 7071 00c0 0323     		mov	r3, #3
 7072 00c2 D7E0     		b	.L544
 7073              	.L546:
1711:../Sources/TFC/TFC_CrystalClock.c ****   }
1712:../Sources/TFC/TFC_CrystalClock.c ****                 
1713:../Sources/TFC/TFC_CrystalClock.c ****   if(!irc_select) //determine if slow or fast IRC to be trimmed
 7074              		.loc 1 1713 0
 7075 00c4 3B1C     		mov	r3, r7
 7076 00c6 0F33     		add	r3, r3, #15
 7077 00c8 1B78     		ldrb	r3, [r3]
 7078 00ca 002B     		cmp	r3, #0
 7079 00cc 13D1     		bne	.L547
1714:../Sources/TFC/TFC_CrystalClock.c ****   {
1715:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 31250) // check frequency is above min spec.
 7080              		.loc 1 1715 0
 7081 00ce BA68     		ldr	r2, [r7, #8]
 7082 00d0 6F4B     		ldr	r3, .L559+20
 7083 00d2 9A42     		cmp	r2, r3
 7084 00d4 05DC     		bgt	.L548
1716:../Sources/TFC/TFC_CrystalClock.c ****     {
1717:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7085              		.loc 1 1717 0
 7086 00d6 694A     		ldr	r2, .L559
 7087 00d8 396A     		ldr	r1, [r7, #32]
 7088 00da 694B     		ldr	r3, .L559+4
 7089 00dc D150     		str	r1, [r2, r3]
1718:../Sources/TFC/TFC_CrystalClock.c ****       return 4;
 7090              		.loc 1 1718 0
 7091 00de 0423     		mov	r3, #4
 7092 00e0 C8E0     		b	.L544
 7093              	.L548:
1719:../Sources/TFC/TFC_CrystalClock.c ****     }
1720:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 39062) // check frequency is below max spec.
 7094              		.loc 1 1720 0
 7095 00e2 BA68     		ldr	r2, [r7, #8]
 7096 00e4 6B4B     		ldr	r3, .L559+24
 7097 00e6 9A42     		cmp	r2, r3
 7098 00e8 19DD     		ble	.L549
1721:../Sources/TFC/TFC_CrystalClock.c ****     {
1722:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7099              		.loc 1 1722 0
 7100 00ea 644A     		ldr	r2, .L559
 7101 00ec 396A     		ldr	r1, [r7, #32]
 7102 00ee 644B     		ldr	r3, .L559+4
 7103 00f0 D150     		str	r1, [r2, r3]
1723:../Sources/TFC/TFC_CrystalClock.c ****       return 5;
 7104              		.loc 1 1723 0
 7105 00f2 0523     		mov	r3, #5
 7106 00f4 BEE0     		b	.L544
 7107              	.L547:
1724:../Sources/TFC/TFC_CrystalClock.c ****     }         
1725:../Sources/TFC/TFC_CrystalClock.c ****   }
1726:../Sources/TFC/TFC_CrystalClock.c ****   else
1727:../Sources/TFC/TFC_CrystalClock.c ****   {
1728:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 3000000) // check frequency is above min spec.
 7108              		.loc 1 1728 0
 7109 00f6 BA68     		ldr	r2, [r7, #8]
 7110 00f8 674B     		ldr	r3, .L559+28
 7111 00fa 9A42     		cmp	r2, r3
 7112 00fc 05DC     		bgt	.L550
1729:../Sources/TFC/TFC_CrystalClock.c ****     {
1730:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7113              		.loc 1 1730 0
 7114 00fe 5F4A     		ldr	r2, .L559
 7115 0100 396A     		ldr	r1, [r7, #32]
 7116 0102 5F4B     		ldr	r3, .L559+4
 7117 0104 D150     		str	r1, [r2, r3]
1731:../Sources/TFC/TFC_CrystalClock.c ****       return 6;
 7118              		.loc 1 1731 0
 7119 0106 0623     		mov	r3, #6
 7120 0108 B4E0     		b	.L544
 7121              	.L550:
1732:../Sources/TFC/TFC_CrystalClock.c ****     }
1733:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 5000000) // check frequency is below max spec.
 7122              		.loc 1 1733 0
 7123 010a BA68     		ldr	r2, [r7, #8]
 7124 010c 634B     		ldr	r3, .L559+32
 7125 010e 9A42     		cmp	r2, r3
 7126 0110 05DD     		ble	.L549
1734:../Sources/TFC/TFC_CrystalClock.c ****     {
1735:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7127              		.loc 1 1735 0
 7128 0112 5A4A     		ldr	r2, .L559
 7129 0114 396A     		ldr	r1, [r7, #32]
 7130 0116 5A4B     		ldr	r3, .L559+4
 7131 0118 D150     		str	r1, [r2, r3]
1736:../Sources/TFC/TFC_CrystalClock.c ****       return 7;
 7132              		.loc 1 1736 0
 7133 011a 0723     		mov	r3, #7
 7134 011c AAE0     		b	.L544
 7135              	.L549:
1737:../Sources/TFC/TFC_CrystalClock.c ****     }            
1738:../Sources/TFC/TFC_CrystalClock.c ****   } // if
1739:../Sources/TFC/TFC_CrystalClock.c ****         
1740:../Sources/TFC/TFC_CrystalClock.c **** // Set up autocal registers, must use floating point calculation
1741:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select) 
 7136              		.loc 1 1741 0
 7137 011e 3B1C     		mov	r3, r7
 7138 0120 0F33     		add	r3, r3, #15
 7139 0122 1B78     		ldrb	r3, [r3]
 7140 0124 002B     		cmp	r3, #0
 7141 0126 1ED0     		beq	.L551
1742:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(128.0f * (21.0f * (bus_clock_freq / (float)irc_freq)));
 7142              		.loc 1 1742 0
 7143 0128 7869     		ldr	r0, [r7, #20]
 7144 012a FFF7FEFF 		bl	__aeabi_i2f
 7145 012e 041C     		add	r4, r0, #0
 7146 0130 B868     		ldr	r0, [r7, #8]
 7147 0132 FFF7FEFF 		bl	__aeabi_i2f
 7148 0136 031C     		add	r3, r0, #0
 7149 0138 201C     		add	r0, r4, #0
 7150 013a 191C     		add	r1, r3, #0
 7151 013c FFF7FEFF 		bl	__aeabi_fdiv
 7152 0140 031C     		add	r3, r0, #0
 7153 0142 181C     		add	r0, r3, #0
 7154 0144 5649     		ldr	r1, .L559+36
 7155 0146 FFF7FEFF 		bl	__aeabi_fmul
 7156 014a 031C     		add	r3, r0, #0
 7157 014c 181C     		add	r0, r3, #0
 7158 014e 5549     		ldr	r1, .L559+40
 7159 0150 FFF7FEFF 		bl	__aeabi_fmul
 7160 0154 031C     		add	r3, r0, #0
 7161 0156 3C1C     		mov	r4, r7
 7162 0158 2634     		add	r4, r4, #38
 7163 015a 181C     		add	r0, r3, #0
 7164 015c FFF7FEFF 		bl	__aeabi_f2uiz
 7165 0160 031C     		mov	r3, r0
 7166 0162 2380     		strh	r3, [r4]
 7167 0164 18E0     		b	.L552
 7168              	.L551:
1743:../Sources/TFC/TFC_CrystalClock.c ****   else
1744:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(21.0f * (bus_clock_freq / (float)irc_freq));
 7169              		.loc 1 1744 0
 7170 0166 7869     		ldr	r0, [r7, #20]
 7171 0168 FFF7FEFF 		bl	__aeabi_i2f
 7172 016c 041C     		add	r4, r0, #0
 7173 016e B868     		ldr	r0, [r7, #8]
 7174 0170 FFF7FEFF 		bl	__aeabi_i2f
 7175 0174 031C     		add	r3, r0, #0
 7176 0176 201C     		add	r0, r4, #0
 7177 0178 191C     		add	r1, r3, #0
 7178 017a FFF7FEFF 		bl	__aeabi_fdiv
 7179 017e 031C     		add	r3, r0, #0
 7180 0180 181C     		add	r0, r3, #0
 7181 0182 4749     		ldr	r1, .L559+36
 7182 0184 FFF7FEFF 		bl	__aeabi_fmul
 7183 0188 031C     		add	r3, r0, #0
 7184 018a 3C1C     		mov	r4, r7
 7185 018c 2634     		add	r4, r4, #38
 7186 018e 181C     		add	r0, r3, #0
 7187 0190 FFF7FEFF 		bl	__aeabi_f2uiz
 7188 0194 031C     		mov	r3, r0
 7189 0196 2380     		strh	r3, [r4]
 7190              	.L552:
1745:../Sources/TFC/TFC_CrystalClock.c ****         
1746:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVL = (atcv & 0xFF); //Set ATCVL to lower 8 bits of count value
 7191              		.loc 1 1746 0
 7192 0198 434B     		ldr	r3, .L559+44
 7193 019a 3A1C     		mov	r2, r7
 7194 019c 2632     		add	r2, r2, #38
 7195 019e 1288     		ldrh	r2, [r2]
 7196 01a0 D2B2     		uxtb	r2, r2
 7197 01a2 DA72     		strb	r2, [r3, #11]
1747:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVH = ((atcv & 0xFF00) >> 8); // Set ATCVH to upper 8 bits of count value
 7198              		.loc 1 1747 0
 7199 01a4 404B     		ldr	r3, .L559+44
 7200 01a6 3A1C     		mov	r2, r7
 7201 01a8 2632     		add	r2, r2, #38
 7202 01aa 1288     		ldrh	r2, [r2]
 7203 01ac 120A     		lsr	r2, r2, #8
 7204 01ae 92B2     		uxth	r2, r2
 7205 01b0 D2B2     		uxtb	r2, r2
 7206 01b2 9A72     		strb	r2, [r3, #10]
1748:../Sources/TFC/TFC_CrystalClock.c **** 
1749:../Sources/TFC/TFC_CrystalClock.c **** // Enable autocal
1750:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC &= ~(MCG_SC_ATME_MASK | MCG_SC_ATMS_MASK |MCG_SC_ATMF_MASK); // clear auto trim settings
 7207              		.loc 1 1750 0
 7208 01b4 3C4B     		ldr	r3, .L559+44
 7209 01b6 3C4A     		ldr	r2, .L559+44
 7210 01b8 127A     		ldrb	r2, [r2, #8]
 7211 01ba D1B2     		uxtb	r1, r2
 7212 01bc 1F22     		mov	r2, #31
 7213 01be 0A40     		and	r2, r1
 7214 01c0 D2B2     		uxtb	r2, r2
 7215 01c2 1A72     		strb	r2, [r3, #8]
1751:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = (MCG_SC_ATME_MASK | (irc_select << MCG_SC_ATMS_SHIFT)); //Select IRC to trim and enabl
 7216              		.loc 1 1751 0
 7217 01c4 3B1C     		mov	r3, r7
 7218 01c6 0F33     		add	r3, r3, #15
 7219 01c8 1B78     		ldrb	r3, [r3]
 7220 01ca 9B01     		lsl	r3, r3, #6
 7221 01cc 8022     		mov	r2, #128
 7222 01ce 1343     		orr	r3, r2
 7223 01d0 BB61     		str	r3, [r7, #24]
1752:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC |= temp_reg;
 7224              		.loc 1 1752 0
 7225 01d2 354B     		ldr	r3, .L559+44
 7226 01d4 344A     		ldr	r2, .L559+44
 7227 01d6 127A     		ldrb	r2, [r2, #8]
 7228 01d8 D2B2     		uxtb	r2, r2
 7229 01da D1B2     		uxtb	r1, r2
 7230 01dc BA69     		ldr	r2, [r7, #24]
 7231 01de D2B2     		uxtb	r2, r2
 7232 01e0 0A43     		orr	r2, r1
 7233 01e2 D2B2     		uxtb	r2, r2
 7234 01e4 D2B2     		uxtb	r2, r2
 7235 01e6 1A72     		strb	r2, [r3, #8]
1753:../Sources/TFC/TFC_CrystalClock.c ****         
1754:../Sources/TFC/TFC_CrystalClock.c ****   while (MCG_SC & MCG_SC_ATME_MASK) {}; //poll for ATME bit to clear
 7236              		.loc 1 1754 0
 7237 01e8 C046     		mov	r8, r8
 7238              	.L553:
 7239              		.loc 1 1754 0 is_stmt 0 discriminator 1
 7240 01ea 2F4B     		ldr	r3, .L559+44
 7241 01ec 1B7A     		ldrb	r3, [r3, #8]
 7242 01ee DBB2     		uxtb	r3, r3
 7243 01f0 DBB2     		uxtb	r3, r3
 7244 01f2 5BB2     		sxtb	r3, r3
 7245 01f4 002B     		cmp	r3, #0
 7246 01f6 F8DB     		blt	.L553
1755:../Sources/TFC/TFC_CrystalClock.c ****         
1756:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_SC & MCG_SC_ATMF_MASK) // check if error flag set
 7247              		.loc 1 1756 0 is_stmt 1
 7248 01f8 2B4B     		ldr	r3, .L559+44
 7249 01fa 1B7A     		ldrb	r3, [r3, #8]
 7250 01fc DBB2     		uxtb	r3, r3
 7251 01fe 1A1C     		mov	r2, r3
 7252 0200 2023     		mov	r3, #32
 7253 0202 1340     		and	r3, r2
 7254 0204 05D0     		beq	.L554
1757:../Sources/TFC/TFC_CrystalClock.c ****   {
1758:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7255              		.loc 1 1758 0
 7256 0206 1D4A     		ldr	r2, .L559
 7257 0208 396A     		ldr	r1, [r7, #32]
 7258 020a 1D4B     		ldr	r3, .L559+4
 7259 020c D150     		str	r1, [r2, r3]
1759:../Sources/TFC/TFC_CrystalClock.c ****     return 8;
 7260              		.loc 1 1759 0
 7261 020e 0823     		mov	r3, #8
 7262 0210 30E0     		b	.L544
 7263              	.L554:
1760:../Sources/TFC/TFC_CrystalClock.c ****   } 
1761:../Sources/TFC/TFC_CrystalClock.c ****   else 
1762:../Sources/TFC/TFC_CrystalClock.c ****   {      
1763:../Sources/TFC/TFC_CrystalClock.c ****     if (!irc_select)
 7264              		.loc 1 1763 0
 7265 0212 3B1C     		mov	r3, r7
 7266 0214 0F33     		add	r3, r3, #15
 7267 0216 1B78     		ldrb	r3, [r3]
 7268 0218 002B     		cmp	r3, #0
 7269 021a 0FD1     		bne	.L555
1764:../Sources/TFC/TFC_CrystalClock.c ****     {
1765:../Sources/TFC/TFC_CrystalClock.c ****       if ((MCG_C3 == 0xFF) || (MCG_C3 == 0))
 7270              		.loc 1 1765 0
 7271 021c 224B     		ldr	r3, .L559+44
 7272 021e 9B78     		ldrb	r3, [r3, #2]
 7273 0220 DBB2     		uxtb	r3, r3
 7274 0222 FF2B     		cmp	r3, #255
 7275 0224 04D0     		beq	.L556
 7276              		.loc 1 1765 0 is_stmt 0 discriminator 1
 7277 0226 204B     		ldr	r3, .L559+44
 7278 0228 9B78     		ldrb	r3, [r3, #2]
 7279 022a DBB2     		uxtb	r3, r3
 7280 022c 002B     		cmp	r3, #0
 7281 022e 1CD1     		bne	.L557
 7282              	.L556:
1766:../Sources/TFC/TFC_CrystalClock.c ****       {
1767:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7283              		.loc 1 1767 0 is_stmt 1
 7284 0230 124A     		ldr	r2, .L559
 7285 0232 396A     		ldr	r1, [r7, #32]
 7286 0234 124B     		ldr	r3, .L559+4
 7287 0236 D150     		str	r1, [r2, r3]
1768:../Sources/TFC/TFC_CrystalClock.c ****         return 9;
 7288              		.loc 1 1768 0
 7289 0238 0923     		mov	r3, #9
 7290 023a 1BE0     		b	.L544
 7291              	.L555:
1769:../Sources/TFC/TFC_CrystalClock.c ****       }
1770:../Sources/TFC/TFC_CrystalClock.c ****     }
1771:../Sources/TFC/TFC_CrystalClock.c ****     else
1772:../Sources/TFC/TFC_CrystalClock.c ****     {
1773:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7292              		.loc 1 1773 0
 7293 023c 1A4B     		ldr	r3, .L559+44
 7294 023e DB78     		ldrb	r3, [r3, #3]
 7295 0240 DBB2     		uxtb	r3, r3
 7296 0242 1A1C     		mov	r2, r3
 7297 0244 1E23     		mov	r3, #30
 7298 0246 1340     		and	r3, r2
 7299 0248 5B08     		lsr	r3, r3, #1
 7300 024a 0F2B     		cmp	r3, #15
 7301 024c 07D0     		beq	.L558
1774:../Sources/TFC/TFC_CrystalClock.c ****           (((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0))
 7302              		.loc 1 1774 0 discriminator 1
 7303 024e 164B     		ldr	r3, .L559+44
 7304 0250 DB78     		ldrb	r3, [r3, #3]
 7305 0252 DBB2     		uxtb	r3, r3
 7306 0254 1A1C     		mov	r2, r3
 7307 0256 1E23     		mov	r3, #30
 7308 0258 1340     		and	r3, r2
 7309 025a 5B08     		lsr	r3, r3, #1
1773:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7310              		.loc 1 1773 0 discriminator 1
 7311 025c 05D1     		bne	.L557
 7312              	.L558:
1775:../Sources/TFC/TFC_CrystalClock.c ****       {
1776:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7313              		.loc 1 1776 0
 7314 025e 074A     		ldr	r2, .L559
 7315 0260 396A     		ldr	r1, [r7, #32]
 7316 0262 074B     		ldr	r3, .L559+4
 7317 0264 D150     		str	r1, [r2, r3]
1777:../Sources/TFC/TFC_CrystalClock.c ****         return 10;
 7318              		.loc 1 1777 0
 7319 0266 0A23     		mov	r3, #10
 7320 0268 04E0     		b	.L544
 7321              	.L557:
1778:../Sources/TFC/TFC_CrystalClock.c ****       }
1779:../Sources/TFC/TFC_CrystalClock.c ****     }
1780:../Sources/TFC/TFC_CrystalClock.c ****   }
1781:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7322              		.loc 1 1781 0
 7323 026a 044A     		ldr	r2, .L559
 7324 026c 396A     		ldr	r1, [r7, #32]
 7325 026e 044B     		ldr	r3, .L559+4
 7326 0270 D150     		str	r1, [r2, r3]
1782:../Sources/TFC/TFC_CrystalClock.c ****   return 0;
 7327              		.loc 1 1782 0
 7328 0272 0023     		mov	r3, #0
 7329              	.L544:
1783:../Sources/TFC/TFC_CrystalClock.c **** }// atc
 7330              		.loc 1 1783 0
 7331 0274 181C     		mov	r0, r3
 7332 0276 BD46     		mov	sp, r7
 7333 0278 0BB0     		add	sp, sp, #44
 7334              		@ sp needed for prologue
 7335 027a 90BD     		pop	{r4, r7, pc}
 7336              	.L560:
 7337              		.align	2
 7338              	.L559:
 7339 027c 00700440 		.word	1074032640
 7340 0280 44100000 		.word	4164
 7341 0284 0024F400 		.word	16000000
 7342 0288 FFFFF8FF 		.word	-458753
 7343 028c FF117A00 		.word	7999999
 7344 0290 117A0000 		.word	31249
 7345 0294 96980000 		.word	39062
 7346 0298 BFC62D00 		.word	2999999
 7347 029c 404B4C00 		.word	5000000
 7348 02a0 0000A841 		.word	1101529088
 7349 02a4 00000043 		.word	1124073472
 7350 02a8 00400640 		.word	1074151424
 7351              		.cfi_endproc
 7352              	.LFE24:
 7354              		.section	.text.fll_freq,"ax",%progbits
 7355              		.align	2
 7356              		.global	fll_freq
 7357              		.code	16
 7358              		.thumb_func
 7360              	fll_freq:
 7361              	.LFB25:
1784:../Sources/TFC/TFC_CrystalClock.c **** 
1785:../Sources/TFC/TFC_CrystalClock.c **** 
1786:../Sources/TFC/TFC_CrystalClock.c **** 
1787:../Sources/TFC/TFC_CrystalClock.c **** 
1788:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref)
1789:../Sources/TFC/TFC_CrystalClock.c **** {
 7362              		.loc 1 1789 0
 7363              		.cfi_startproc
 7364 0000 80B5     		push	{r7, lr}
 7365              	.LCFI75:
 7366              		.cfi_def_cfa_offset 8
 7367              		.cfi_offset 7, -8
 7368              		.cfi_offset 14, -4
 7369 0002 84B0     		sub	sp, sp, #16
 7370              	.LCFI76:
 7371              		.cfi_def_cfa_offset 24
 7372 0004 00AF     		add	r7, sp, #0
 7373              	.LCFI77:
 7374              		.cfi_def_cfa_register 7
 7375 0006 7860     		str	r0, [r7, #4]
1790:../Sources/TFC/TFC_CrystalClock.c ****   int fll_freq_hz;
1791:../Sources/TFC/TFC_CrystalClock.c ****   
1792:../Sources/TFC/TFC_CrystalClock.c ****   // Check that only allowed ranges have been selected
1793:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) > 0x1) 
 7376              		.loc 1 1793 0
 7377 0008 684B     		ldr	r3, .L599
 7378 000a DB78     		ldrb	r3, [r3, #3]
 7379 000c DBB2     		uxtb	r3, r3
 7380 000e 1A1C     		mov	r2, r3
 7381 0010 6023     		mov	r3, #96
 7382 0012 1340     		and	r3, r2
 7383 0014 5B09     		lsr	r3, r3, #5
 7384 0016 012B     		cmp	r3, #1
 7385 0018 01D9     		bls	.L562
1794:../Sources/TFC/TFC_CrystalClock.c ****   {
1795:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3B; // return error code if DRS range 2 or 3 selected
 7386              		.loc 1 1795 0
 7387 001a 3B23     		mov	r3, #59
 7388 001c C2E0     		b	.L563
 7389              	.L562:
1796:../Sources/TFC/TFC_CrystalClock.c ****   }
1797:../Sources/TFC/TFC_CrystalClock.c ****   
1798:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_C4 & MCG_C4_DMX32_MASK) // if DMX32 set
 7390              		.loc 1 1798 0
 7391 001e 634B     		ldr	r3, .L599
 7392 0020 DB78     		ldrb	r3, [r3, #3]
 7393 0022 DBB2     		uxtb	r3, r3
 7394 0024 DBB2     		uxtb	r3, r3
 7395 0026 5BB2     		sxtb	r3, r3
 7396 0028 002B     		cmp	r3, #0
 7397 002a 54DA     		bge	.L564
1799:../Sources/TFC/TFC_CrystalClock.c ****   {
1800:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7398              		.loc 1 1800 0
 7399 002c 5F4B     		ldr	r3, .L599
 7400 002e DB78     		ldrb	r3, [r3, #3]
 7401 0030 DBB2     		uxtb	r3, r3
 7402 0032 1A1C     		mov	r2, r3
 7403 0034 6023     		mov	r3, #96
 7404 0036 1340     		and	r3, r2
 7405 0038 5B09     		lsr	r3, r3, #5
 7406 003a 012B     		cmp	r3, #1
 7407 003c 17D0     		beq	.L567
 7408 003e 04D3     		bcc	.L566
 7409 0040 022B     		cmp	r3, #2
 7410 0042 26D0     		beq	.L568
 7411 0044 032B     		cmp	r3, #3
 7412 0046 35D0     		beq	.L569
 7413 0048 ABE0     		b	.L578
 7414              	.L566:
1801:../Sources/TFC/TFC_CrystalClock.c ****     {
1802:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1803:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 732);
 7415              		.loc 1 1803 0
 7416 004a 7B68     		ldr	r3, [r7, #4]
 7417 004c B722     		mov	r2, #183
 7418 004e 9200     		lsl	r2, r2, #2
 7419 0050 5343     		mul	r3, r2
 7420 0052 FB60     		str	r3, [r7, #12]
1804:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7421              		.loc 1 1804 0
 7422 0054 FA68     		ldr	r2, [r7, #12]
 7423 0056 564B     		ldr	r3, .L599+4
 7424 0058 9A42     		cmp	r2, r3
 7425 005a 01DC     		bgt	.L570
 7426              		.loc 1 1804 0 is_stmt 0 discriminator 1
 7427 005c 3323     		mov	r3, #51
 7428 005e A1E0     		b	.L563
 7429              	.L570:
1805:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7430              		.loc 1 1805 0 is_stmt 1
 7431 0060 FA68     		ldr	r2, [r7, #12]
 7432 0062 544B     		ldr	r3, .L599+8
 7433 0064 9A42     		cmp	r2, r3
 7434 0066 00DC     		bgt	.LCB6940
 7435 0068 8CE0     		b	.L591	@long jump
 7436              	.LCB6940:
 7437              		.loc 1 1805 0 is_stmt 0 discriminator 1
 7438 006a 3423     		mov	r3, #52
 7439 006c 9AE0     		b	.L563
 7440              	.L567:
1806:../Sources/TFC/TFC_CrystalClock.c ****       break;
1807:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1808:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1464);
 7441              		.loc 1 1808 0 is_stmt 1
 7442 006e 7B68     		ldr	r3, [r7, #4]
 7443 0070 B722     		mov	r2, #183
 7444 0072 D200     		lsl	r2, r2, #3
 7445 0074 5343     		mul	r3, r2
 7446 0076 FB60     		str	r3, [r7, #12]
1809:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7447              		.loc 1 1809 0
 7448 0078 FA68     		ldr	r2, [r7, #12]
 7449 007a 4F4B     		ldr	r3, .L599+12
 7450 007c 9A42     		cmp	r2, r3
 7451 007e 01DC     		bgt	.L572
 7452              		.loc 1 1809 0 is_stmt 0 discriminator 1
 7453 0080 3523     		mov	r3, #53
 7454 0082 8FE0     		b	.L563
 7455              	.L572:
1810:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7456              		.loc 1 1810 0 is_stmt 1
 7457 0084 FA68     		ldr	r2, [r7, #12]
 7458 0086 4D4B     		ldr	r3, .L599+16
 7459 0088 9A42     		cmp	r2, r3
 7460 008a 00DC     		bgt	.LCB6963
 7461 008c 7CE0     		b	.L592	@long jump
 7462              	.LCB6963:
 7463              		.loc 1 1810 0 is_stmt 0 discriminator 1
 7464 008e 3623     		mov	r3, #54
 7465 0090 88E0     		b	.L563
 7466              	.L568:
1811:../Sources/TFC/TFC_CrystalClock.c ****       break;
1812:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1813:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2197);
 7467              		.loc 1 1813 0 is_stmt 1
 7468 0092 7B68     		ldr	r3, [r7, #4]
 7469 0094 4A4A     		ldr	r2, .L599+20
 7470 0096 5343     		mul	r3, r2
 7471 0098 FB60     		str	r3, [r7, #12]
1814:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7472              		.loc 1 1814 0
 7473 009a FA68     		ldr	r2, [r7, #12]
 7474 009c 494B     		ldr	r3, .L599+24
 7475 009e 9A42     		cmp	r2, r3
 7476 00a0 01DC     		bgt	.L574
 7477              		.loc 1 1814 0 is_stmt 0 discriminator 1
 7478 00a2 3723     		mov	r3, #55
 7479 00a4 7EE0     		b	.L563
 7480              	.L574:
1815:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7481              		.loc 1 1815 0 is_stmt 1
 7482 00a6 FA68     		ldr	r2, [r7, #12]
 7483 00a8 474B     		ldr	r3, .L599+28
 7484 00aa 9A42     		cmp	r2, r3
 7485 00ac 00DC     		bgt	.LCB6985
 7486 00ae 6DE0     		b	.L593	@long jump
 7487              	.LCB6985:
 7488              		.loc 1 1815 0 is_stmt 0 discriminator 1
 7489 00b0 3823     		mov	r3, #56
 7490 00b2 77E0     		b	.L563
 7491              	.L569:
1816:../Sources/TFC/TFC_CrystalClock.c ****       break;
1817:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1818:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2929);
 7492              		.loc 1 1818 0 is_stmt 1
 7493 00b4 7B68     		ldr	r3, [r7, #4]
 7494 00b6 454A     		ldr	r2, .L599+32
 7495 00b8 5343     		mul	r3, r2
 7496 00ba FB60     		str	r3, [r7, #12]
1819:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7497              		.loc 1 1819 0
 7498 00bc FA68     		ldr	r2, [r7, #12]
 7499 00be 444B     		ldr	r3, .L599+36
 7500 00c0 9A42     		cmp	r2, r3
 7501 00c2 01DC     		bgt	.L576
 7502              		.loc 1 1819 0 is_stmt 0 discriminator 1
 7503 00c4 3923     		mov	r3, #57
 7504 00c6 6DE0     		b	.L563
 7505              	.L576:
1820:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7506              		.loc 1 1820 0 is_stmt 1
 7507 00c8 FA68     		ldr	r2, [r7, #12]
 7508 00ca 424B     		ldr	r3, .L599+40
 7509 00cc 9A42     		cmp	r2, r3
 7510 00ce 00DC     		bgt	.LCB7007
 7511 00d0 5EE0     		b	.L594	@long jump
 7512              	.LCB7007:
 7513              		.loc 1 1820 0 is_stmt 0 discriminator 1
 7514 00d2 3A23     		mov	r3, #58
 7515 00d4 66E0     		b	.L563
 7516              	.L564:
1821:../Sources/TFC/TFC_CrystalClock.c ****       break;
1822:../Sources/TFC/TFC_CrystalClock.c ****     }
1823:../Sources/TFC/TFC_CrystalClock.c ****   }
1824:../Sources/TFC/TFC_CrystalClock.c ****   else // if DMX32 = 0
1825:../Sources/TFC/TFC_CrystalClock.c ****   {
1826:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7517              		.loc 1 1826 0 is_stmt 1
 7518 00d6 354B     		ldr	r3, .L599
 7519 00d8 DB78     		ldrb	r3, [r3, #3]
 7520 00da DBB2     		uxtb	r3, r3
 7521 00dc 1A1C     		mov	r2, r3
 7522 00de 6023     		mov	r3, #96
 7523 00e0 1340     		and	r3, r2
 7524 00e2 5B09     		lsr	r3, r3, #5
 7525 00e4 012B     		cmp	r3, #1
 7526 00e6 17D0     		beq	.L580
 7527 00e8 04D3     		bcc	.L579
 7528 00ea 022B     		cmp	r3, #2
 7529 00ec 26D0     		beq	.L581
 7530 00ee 032B     		cmp	r3, #3
 7531 00f0 36D0     		beq	.L582
 7532 00f2 56E0     		b	.L578
 7533              	.L579:
1827:../Sources/TFC/TFC_CrystalClock.c ****     {
1828:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1829:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 640);
 7534              		.loc 1 1829 0
 7535 00f4 7A68     		ldr	r2, [r7, #4]
 7536 00f6 131C     		mov	r3, r2
 7537 00f8 9B00     		lsl	r3, r3, #2
 7538 00fa 9B18     		add	r3, r3, r2
 7539 00fc DB01     		lsl	r3, r3, #7
 7540 00fe FB60     		str	r3, [r7, #12]
1830:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7541              		.loc 1 1830 0
 7542 0100 FA68     		ldr	r2, [r7, #12]
 7543 0102 2B4B     		ldr	r3, .L599+4
 7544 0104 9A42     		cmp	r2, r3
 7545 0106 01DC     		bgt	.L583
 7546              		.loc 1 1830 0 is_stmt 0 discriminator 1
 7547 0108 3323     		mov	r3, #51
 7548 010a 4BE0     		b	.L563
 7549              	.L583:
1831:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7550              		.loc 1 1831 0 is_stmt 1
 7551 010c FA68     		ldr	r2, [r7, #12]
 7552 010e 294B     		ldr	r3, .L599+8
 7553 0110 9A42     		cmp	r2, r3
 7554 0112 3FDD     		ble	.L595
 7555              		.loc 1 1831 0 is_stmt 0 discriminator 1
 7556 0114 3423     		mov	r3, #52
 7557 0116 45E0     		b	.L563
 7558              	.L580:
1832:../Sources/TFC/TFC_CrystalClock.c ****       break;
1833:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1834:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1280);
 7559              		.loc 1 1834 0 is_stmt 1
 7560 0118 7A68     		ldr	r2, [r7, #4]
 7561 011a 131C     		mov	r3, r2
 7562 011c 9B00     		lsl	r3, r3, #2
 7563 011e 9B18     		add	r3, r3, r2
 7564 0120 1B02     		lsl	r3, r3, #8
 7565 0122 FB60     		str	r3, [r7, #12]
1835:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7566              		.loc 1 1835 0
 7567 0124 FA68     		ldr	r2, [r7, #12]
 7568 0126 244B     		ldr	r3, .L599+12
 7569 0128 9A42     		cmp	r2, r3
 7570 012a 01DC     		bgt	.L585
 7571              		.loc 1 1835 0 is_stmt 0 discriminator 1
 7572 012c 3523     		mov	r3, #53
 7573 012e 39E0     		b	.L563
 7574              	.L585:
1836:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7575              		.loc 1 1836 0 is_stmt 1
 7576 0130 FA68     		ldr	r2, [r7, #12]
 7577 0132 224B     		ldr	r3, .L599+16
 7578 0134 9A42     		cmp	r2, r3
 7579 0136 2FDD     		ble	.L596
 7580              		.loc 1 1836 0 is_stmt 0 discriminator 1
 7581 0138 3623     		mov	r3, #54
 7582 013a 33E0     		b	.L563
 7583              	.L581:
1837:../Sources/TFC/TFC_CrystalClock.c ****       break;
1838:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1839:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1920);
 7584              		.loc 1 1839 0 is_stmt 1
 7585 013c 7A68     		ldr	r2, [r7, #4]
 7586 013e 131C     		mov	r3, r2
 7587 0140 1B01     		lsl	r3, r3, #4
 7588 0142 9B1A     		sub	r3, r3, r2
 7589 0144 DB01     		lsl	r3, r3, #7
 7590 0146 FB60     		str	r3, [r7, #12]
1840:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7591              		.loc 1 1840 0
 7592 0148 FA68     		ldr	r2, [r7, #12]
 7593 014a 1E4B     		ldr	r3, .L599+24
 7594 014c 9A42     		cmp	r2, r3
 7595 014e 01DC     		bgt	.L587
 7596              		.loc 1 1840 0 is_stmt 0 discriminator 1
 7597 0150 3723     		mov	r3, #55
 7598 0152 27E0     		b	.L563
 7599              	.L587:
1841:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7600              		.loc 1 1841 0 is_stmt 1
 7601 0154 FA68     		ldr	r2, [r7, #12]
 7602 0156 1C4B     		ldr	r3, .L599+28
 7603 0158 9A42     		cmp	r2, r3
 7604 015a 1FDD     		ble	.L597
 7605              		.loc 1 1841 0 is_stmt 0 discriminator 1
 7606 015c 3823     		mov	r3, #56
 7607 015e 21E0     		b	.L563
 7608              	.L582:
1842:../Sources/TFC/TFC_CrystalClock.c ****       break;
1843:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1844:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2560);
 7609              		.loc 1 1844 0 is_stmt 1
 7610 0160 7A68     		ldr	r2, [r7, #4]
 7611 0162 131C     		mov	r3, r2
 7612 0164 9B00     		lsl	r3, r3, #2
 7613 0166 9B18     		add	r3, r3, r2
 7614 0168 5B02     		lsl	r3, r3, #9
 7615 016a FB60     		str	r3, [r7, #12]
1845:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7616              		.loc 1 1845 0
 7617 016c FA68     		ldr	r2, [r7, #12]
 7618 016e 184B     		ldr	r3, .L599+36
 7619 0170 9A42     		cmp	r2, r3
 7620 0172 01DC     		bgt	.L589
 7621              		.loc 1 1845 0 is_stmt 0 discriminator 1
 7622 0174 3923     		mov	r3, #57
 7623 0176 15E0     		b	.L563
 7624              	.L589:
1846:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7625              		.loc 1 1846 0 is_stmt 1
 7626 0178 FA68     		ldr	r2, [r7, #12]
 7627 017a 164B     		ldr	r3, .L599+40
 7628 017c 9A42     		cmp	r2, r3
 7629 017e 0FDD     		ble	.L598
 7630              		.loc 1 1846 0 is_stmt 0 discriminator 1
 7631 0180 3A23     		mov	r3, #58
 7632 0182 0FE0     		b	.L563
 7633              	.L591:
1806:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7634              		.loc 1 1806 0 is_stmt 1
 7635 0184 C046     		mov	r8, r8
 7636 0186 0CE0     		b	.L578
 7637              	.L592:
1811:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7638              		.loc 1 1811 0
 7639 0188 C046     		mov	r8, r8
 7640 018a 0AE0     		b	.L578
 7641              	.L593:
1816:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7642              		.loc 1 1816 0
 7643 018c C046     		mov	r8, r8
 7644 018e 08E0     		b	.L578
 7645              	.L594:
1821:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7646              		.loc 1 1821 0
 7647 0190 C046     		mov	r8, r8
 7648 0192 06E0     		b	.L578
 7649              	.L595:
1832:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7650              		.loc 1 1832 0
 7651 0194 C046     		mov	r8, r8
 7652 0196 04E0     		b	.L578
 7653              	.L596:
1837:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7654              		.loc 1 1837 0
 7655 0198 C046     		mov	r8, r8
 7656 019a 02E0     		b	.L578
 7657              	.L597:
1842:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7658              		.loc 1 1842 0
 7659 019c C046     		mov	r8, r8
 7660 019e 00E0     		b	.L578
 7661              	.L598:
1847:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7662              		.loc 1 1847 0
 7663 01a0 C046     		mov	r8, r8
 7664              	.L578:
1848:../Sources/TFC/TFC_CrystalClock.c ****     }
1849:../Sources/TFC/TFC_CrystalClock.c ****   }    
1850:../Sources/TFC/TFC_CrystalClock.c ****   return fll_freq_hz;
 7665              		.loc 1 1850 0
 7666 01a2 FB68     		ldr	r3, [r7, #12]
 7667              	.L563:
1851:../Sources/TFC/TFC_CrystalClock.c **** } // fll_freq
 7668              		.loc 1 1851 0
 7669 01a4 181C     		mov	r0, r3
 7670 01a6 BD46     		mov	sp, r7
 7671 01a8 04B0     		add	sp, sp, #16
 7672              		@ sp needed for prologue
 7673 01aa 80BD     		pop	{r7, pc}
 7674              	.L600:
 7675              		.align	2
 7676              	.L599:
 7677 01ac 00400640 		.word	1074151424
 7678 01b0 FF2C3101 		.word	19999999
 7679 01b4 40787D01 		.word	25000000
 7680 01b8 FF596202 		.word	39999999
 7681 01bc 80F0FA02 		.word	50000000
 7682 01c0 95080000 		.word	2197
 7683 01c4 FF869303 		.word	59999999
 7684 01c8 C0687804 		.word	75000000
 7685 01cc 710B0000 		.word	2929
 7686 01d0 FFB3C404 		.word	79999999
 7687 01d4 00E1F505 		.word	100000000
 7688              		.cfi_endproc
 7689              	.LFE25:
 7691              		.section	.text.what_mcg_mode,"ax",%progbits
 7692              		.align	2
 7693              		.global	what_mcg_mode
 7694              		.code	16
 7695              		.thumb_func
 7697              	what_mcg_mode:
 7698              	.LFB26:
1852:../Sources/TFC/TFC_CrystalClock.c **** 
1853:../Sources/TFC/TFC_CrystalClock.c **** 
1854:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void)
1855:../Sources/TFC/TFC_CrystalClock.c **** {
 7699              		.loc 1 1855 0
 7700              		.cfi_startproc
 7701 0000 80B5     		push	{r7, lr}
 7702              	.LCFI78:
 7703              		.cfi_def_cfa_offset 8
 7704              		.cfi_offset 7, -8
 7705              		.cfi_offset 14, -4
 7706 0002 00AF     		add	r7, sp, #0
 7707              	.LCFI79:
 7708              		.cfi_def_cfa_register 7
1856:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
1857:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7709              		.loc 1 1857 0
 7710 0004 724B     		ldr	r3, .L611
 7711 0006 9B79     		ldrb	r3, [r3, #6]
 7712 0008 DBB2     		uxtb	r3, r3
 7713 000a 1A1C     		mov	r2, r3
 7714 000c 0C23     		mov	r3, #12
 7715 000e 1340     		and	r3, r2
 7716 0010 9B08     		lsr	r3, r3, #2
 7717 0012 0FD1     		bne	.L602
1858:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7718              		.loc 1 1858 0 discriminator 1
 7719 0014 6E4B     		ldr	r3, .L611
 7720 0016 9B79     		ldrb	r3, [r3, #6]
 7721 0018 DBB2     		uxtb	r3, r3
 7722 001a 1A1C     		mov	r2, r3
 7723 001c 1023     		mov	r3, #16
 7724 001e 1340     		and	r3, r2
1857:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7725              		.loc 1 1857 0 discriminator 1
 7726 0020 08D0     		beq	.L602
1859:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)))                                     // check PLLS mux has sele
 7727              		.loc 1 1859 0
 7728 0022 6B4B     		ldr	r3, .L611
 7729 0024 9B79     		ldrb	r3, [r3, #6]
 7730 0026 DBB2     		uxtb	r3, r3
 7731 0028 1A1C     		mov	r2, r3
 7732 002a 2023     		mov	r3, #32
 7733 002c 1340     		and	r3, r2
1858:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7734              		.loc 1 1858 0
 7735 002e 01D1     		bne	.L602
1860:../Sources/TFC/TFC_CrystalClock.c ****   {
1861:../Sources/TFC/TFC_CrystalClock.c ****     return FEI;                                                          // return FEI code
 7736              		.loc 1 1861 0
 7737 0030 0323     		mov	r3, #3
 7738 0032 CAE0     		b	.L603
 7739              	.L602:
1862:../Sources/TFC/TFC_CrystalClock.c ****   }
1863:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PEE mode
1864:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7740              		.loc 1 1864 0
 7741 0034 664B     		ldr	r3, .L611
 7742 0036 9B79     		ldrb	r3, [r3, #6]
 7743 0038 DBB2     		uxtb	r3, r3
 7744 003a 1A1C     		mov	r2, r3
 7745 003c 0C23     		mov	r3, #12
 7746 003e 1340     		and	r3, r2
 7747 0040 9B08     		lsr	r3, r3, #2
 7748 0042 032B     		cmp	r3, #3
 7749 0044 0FD1     		bne	.L604
1865:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7750              		.loc 1 1865 0 discriminator 1
 7751 0046 624B     		ldr	r3, .L611
 7752 0048 9B79     		ldrb	r3, [r3, #6]
 7753 004a DBB2     		uxtb	r3, r3
 7754 004c 1A1C     		mov	r2, r3
 7755 004e 1023     		mov	r3, #16
 7756 0050 1340     		and	r3, r2
1864:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7757              		.loc 1 1864 0 discriminator 1
 7758 0052 08D1     		bne	.L604
1866:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK))                                    // check PLLS mux has sele
 7759              		.loc 1 1866 0
 7760 0054 5E4B     		ldr	r3, .L611
 7761 0056 9B79     		ldrb	r3, [r3, #6]
 7762 0058 DBB2     		uxtb	r3, r3
 7763 005a 1A1C     		mov	r2, r3
 7764 005c 2023     		mov	r3, #32
 7765 005e 1340     		and	r3, r2
1865:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7766              		.loc 1 1865 0
 7767 0060 01D0     		beq	.L604
1867:../Sources/TFC/TFC_CrystalClock.c ****   {
1868:../Sources/TFC/TFC_CrystalClock.c ****     return PEE;                                                          // return PEE code
 7768              		.loc 1 1868 0
 7769 0062 0823     		mov	r3, #8
 7770 0064 B1E0     		b	.L603
 7771              	.L604:
1869:../Sources/TFC/TFC_CrystalClock.c ****   }
1870:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
1871:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7772              		.loc 1 1871 0
 7773 0066 5A4B     		ldr	r3, .L611
 7774 0068 9B79     		ldrb	r3, [r3, #6]
 7775 006a DBB2     		uxtb	r3, r3
 7776 006c 1A1C     		mov	r2, r3
 7777 006e 0C23     		mov	r3, #12
 7778 0070 1340     		and	r3, r2
 7779 0072 9B08     		lsr	r3, r3, #2
 7780 0074 022B     		cmp	r3, #2
 7781 0076 16D1     		bne	.L605
1872:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7782              		.loc 1 1872 0 discriminator 1
 7783 0078 554B     		ldr	r3, .L611
 7784 007a 9B79     		ldrb	r3, [r3, #6]
 7785 007c DBB2     		uxtb	r3, r3
 7786 007e 1A1C     		mov	r2, r3
 7787 0080 1023     		mov	r3, #16
 7788 0082 1340     		and	r3, r2
1871:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7789              		.loc 1 1871 0 discriminator 1
 7790 0084 0FD1     		bne	.L605
1873:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7791              		.loc 1 1873 0
 7792 0086 524B     		ldr	r3, .L611
 7793 0088 9B79     		ldrb	r3, [r3, #6]
 7794 008a DBB2     		uxtb	r3, r3
 7795 008c 1A1C     		mov	r2, r3
 7796 008e 2023     		mov	r3, #32
 7797 0090 1340     		and	r3, r2
1872:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7798              		.loc 1 1872 0
 7799 0092 08D0     		beq	.L605
1874:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7800              		.loc 1 1874 0
 7801 0094 4E4B     		ldr	r3, .L611
 7802 0096 5B78     		ldrb	r3, [r3, #1]
 7803 0098 DBB2     		uxtb	r3, r3
 7804 009a 1A1C     		mov	r2, r3
 7805 009c 0223     		mov	r3, #2
 7806 009e 1340     		and	r3, r2
1873:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7807              		.loc 1 1873 0
 7808 00a0 01D1     		bne	.L605
1875:../Sources/TFC/TFC_CrystalClock.c ****   {
1876:../Sources/TFC/TFC_CrystalClock.c ****     return PBE;                                                          // return PBE code
 7809              		.loc 1 1876 0
 7810 00a2 0723     		mov	r3, #7
 7811 00a4 91E0     		b	.L603
 7812              	.L605:
1877:../Sources/TFC/TFC_CrystalClock.c ****   }
1878:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FBE mode
1879:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7813              		.loc 1 1879 0
 7814 00a6 4A4B     		ldr	r3, .L611
 7815 00a8 9B79     		ldrb	r3, [r3, #6]
 7816 00aa DBB2     		uxtb	r3, r3
 7817 00ac 1A1C     		mov	r2, r3
 7818 00ae 0C23     		mov	r3, #12
 7819 00b0 1340     		and	r3, r2
 7820 00b2 9B08     		lsr	r3, r3, #2
 7821 00b4 022B     		cmp	r3, #2
 7822 00b6 16D1     		bne	.L606
1880:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7823              		.loc 1 1880 0 discriminator 1
 7824 00b8 454B     		ldr	r3, .L611
 7825 00ba 9B79     		ldrb	r3, [r3, #6]
 7826 00bc DBB2     		uxtb	r3, r3
 7827 00be 1A1C     		mov	r2, r3
 7828 00c0 1023     		mov	r3, #16
 7829 00c2 1340     		and	r3, r2
1879:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7830              		.loc 1 1879 0 discriminator 1
 7831 00c4 0FD1     		bne	.L606
1881:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7832              		.loc 1 1881 0
 7833 00c6 424B     		ldr	r3, .L611
 7834 00c8 9B79     		ldrb	r3, [r3, #6]
 7835 00ca DBB2     		uxtb	r3, r3
 7836 00cc 1A1C     		mov	r2, r3
 7837 00ce 2023     		mov	r3, #32
 7838 00d0 1340     		and	r3, r2
1880:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7839              		.loc 1 1880 0
 7840 00d2 08D1     		bne	.L606
1882:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7841              		.loc 1 1882 0
 7842 00d4 3E4B     		ldr	r3, .L611
 7843 00d6 5B78     		ldrb	r3, [r3, #1]
 7844 00d8 DBB2     		uxtb	r3, r3
 7845 00da 1A1C     		mov	r2, r3
 7846 00dc 0223     		mov	r3, #2
 7847 00de 1340     		and	r3, r2
1881:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7848              		.loc 1 1881 0
 7849 00e0 01D1     		bne	.L606
1883:../Sources/TFC/TFC_CrystalClock.c ****   {
1884:../Sources/TFC/TFC_CrystalClock.c ****     return FBE;                                                          // return FBE code
 7850              		.loc 1 1884 0
 7851 00e2 0523     		mov	r3, #5
 7852 00e4 71E0     		b	.L603
 7853              	.L606:
1885:../Sources/TFC/TFC_CrystalClock.c ****   }
1886:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in BLPE mode
1887:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7854              		.loc 1 1887 0
 7855 00e6 3A4B     		ldr	r3, .L611
 7856 00e8 9B79     		ldrb	r3, [r3, #6]
 7857 00ea DBB2     		uxtb	r3, r3
 7858 00ec 1A1C     		mov	r2, r3
 7859 00ee 0C23     		mov	r3, #12
 7860 00f0 1340     		and	r3, r2
 7861 00f2 9B08     		lsr	r3, r3, #2
 7862 00f4 022B     		cmp	r3, #2
 7863 00f6 0FD1     		bne	.L607
1888:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7864              		.loc 1 1888 0 discriminator 1
 7865 00f8 354B     		ldr	r3, .L611
 7866 00fa 9B79     		ldrb	r3, [r3, #6]
 7867 00fc DBB2     		uxtb	r3, r3
 7868 00fe 1A1C     		mov	r2, r3
 7869 0100 1023     		mov	r3, #16
 7870 0102 1340     		and	r3, r2
1887:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7871              		.loc 1 1887 0 discriminator 1
 7872 0104 08D1     		bne	.L607
1889:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check MCG_C2[LP] bit is
 7873              		.loc 1 1889 0
 7874 0106 324B     		ldr	r3, .L611
 7875 0108 5B78     		ldrb	r3, [r3, #1]
 7876 010a DBB2     		uxtb	r3, r3
 7877 010c 1A1C     		mov	r2, r3
 7878 010e 0223     		mov	r3, #2
 7879 0110 1340     		and	r3, r2
1888:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7880              		.loc 1 1888 0
 7881 0112 01D0     		beq	.L607
1890:../Sources/TFC/TFC_CrystalClock.c ****   {
1891:../Sources/TFC/TFC_CrystalClock.c ****     return BLPE;                                                         // return BLPE code
 7882              		.loc 1 1891 0
 7883 0114 0623     		mov	r3, #6
 7884 0116 58E0     		b	.L603
 7885              	.L607:
1892:../Sources/TFC/TFC_CrystalClock.c ****   }
1893:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1894:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7886              		.loc 1 1894 0
 7887 0118 2D4B     		ldr	r3, .L611
 7888 011a 9B79     		ldrb	r3, [r3, #6]
 7889 011c DBB2     		uxtb	r3, r3
 7890 011e 1A1C     		mov	r2, r3
 7891 0120 0C23     		mov	r3, #12
 7892 0122 1340     		and	r3, r2
 7893 0124 9B08     		lsr	r3, r3, #2
 7894 0126 012B     		cmp	r3, #1
 7895 0128 16D1     		bne	.L608
1895:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7896              		.loc 1 1895 0 discriminator 1
 7897 012a 294B     		ldr	r3, .L611
 7898 012c 9B79     		ldrb	r3, [r3, #6]
 7899 012e DBB2     		uxtb	r3, r3
 7900 0130 1A1C     		mov	r2, r3
 7901 0132 1023     		mov	r3, #16
 7902 0134 1340     		and	r3, r2
1894:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7903              		.loc 1 1894 0 discriminator 1
 7904 0136 0FD0     		beq	.L608
1896:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7905              		.loc 1 1896 0
 7906 0138 254B     		ldr	r3, .L611
 7907 013a 9B79     		ldrb	r3, [r3, #6]
 7908 013c DBB2     		uxtb	r3, r3
 7909 013e 1A1C     		mov	r2, r3
 7910 0140 2023     		mov	r3, #32
 7911 0142 1340     		and	r3, r2
1895:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7912              		.loc 1 1895 0
 7913 0144 08D1     		bne	.L608
1897:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check LP bit is set
 7914              		.loc 1 1897 0
 7915 0146 224B     		ldr	r3, .L611
 7916 0148 5B78     		ldrb	r3, [r3, #1]
 7917 014a DBB2     		uxtb	r3, r3
 7918 014c 1A1C     		mov	r2, r3
 7919 014e 0223     		mov	r3, #2
 7920 0150 1340     		and	r3, r2
1896:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7921              		.loc 1 1896 0
 7922 0152 01D0     		beq	.L608
1898:../Sources/TFC/TFC_CrystalClock.c ****   {
1899:../Sources/TFC/TFC_CrystalClock.c ****     return BLPI;                                                         // return BLPI code
 7923              		.loc 1 1899 0
 7924 0154 0123     		mov	r3, #1
 7925 0156 38E0     		b	.L603
 7926              	.L608:
1900:../Sources/TFC/TFC_CrystalClock.c ****   }
1901:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FBI mode
1902:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7927              		.loc 1 1902 0
 7928 0158 1D4B     		ldr	r3, .L611
 7929 015a 9B79     		ldrb	r3, [r3, #6]
 7930 015c DBB2     		uxtb	r3, r3
 7931 015e 1A1C     		mov	r2, r3
 7932 0160 0C23     		mov	r3, #12
 7933 0162 1340     		and	r3, r2
 7934 0164 9B08     		lsr	r3, r3, #2
 7935 0166 012B     		cmp	r3, #1
 7936 0168 16D1     		bne	.L609
1903:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7937              		.loc 1 1903 0 discriminator 1
 7938 016a 194B     		ldr	r3, .L611
 7939 016c 9B79     		ldrb	r3, [r3, #6]
 7940 016e DBB2     		uxtb	r3, r3
 7941 0170 1A1C     		mov	r2, r3
 7942 0172 1023     		mov	r3, #16
 7943 0174 1340     		and	r3, r2
1902:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7944              		.loc 1 1902 0 discriminator 1
 7945 0176 0FD0     		beq	.L609
1904:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7946              		.loc 1 1904 0
 7947 0178 154B     		ldr	r3, .L611
 7948 017a 9B79     		ldrb	r3, [r3, #6]
 7949 017c DBB2     		uxtb	r3, r3
 7950 017e 1A1C     		mov	r2, r3
 7951 0180 2023     		mov	r3, #32
 7952 0182 1340     		and	r3, r2
1903:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7953              		.loc 1 1903 0
 7954 0184 08D1     		bne	.L609
1905:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check LP bit is clear
 7955              		.loc 1 1905 0
 7956 0186 124B     		ldr	r3, .L611
 7957 0188 5B78     		ldrb	r3, [r3, #1]
 7958 018a DBB2     		uxtb	r3, r3
 7959 018c 1A1C     		mov	r2, r3
 7960 018e 0223     		mov	r3, #2
 7961 0190 1340     		and	r3, r2
1904:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7962              		.loc 1 1904 0
 7963 0192 01D1     		bne	.L609
1906:../Sources/TFC/TFC_CrystalClock.c ****   {  
1907:../Sources/TFC/TFC_CrystalClock.c ****     return FBI;                                                          // return FBI code 
 7964              		.loc 1 1907 0
 7965 0194 0223     		mov	r3, #2
 7966 0196 18E0     		b	.L603
 7967              	.L609:
1908:../Sources/TFC/TFC_CrystalClock.c ****   }
1909:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FEE mode
1910:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7968              		.loc 1 1910 0
 7969 0198 0D4B     		ldr	r3, .L611
 7970 019a 9B79     		ldrb	r3, [r3, #6]
 7971 019c DBB2     		uxtb	r3, r3
 7972 019e 1A1C     		mov	r2, r3
 7973 01a0 0C23     		mov	r3, #12
 7974 01a2 1340     		and	r3, r2
 7975 01a4 9B08     		lsr	r3, r3, #2
 7976 01a6 0FD1     		bne	.L610
1911:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7977              		.loc 1 1911 0 discriminator 1
 7978 01a8 094B     		ldr	r3, .L611
 7979 01aa 9B79     		ldrb	r3, [r3, #6]
 7980 01ac DBB2     		uxtb	r3, r3
 7981 01ae 1A1C     		mov	r2, r3
 7982 01b0 1023     		mov	r3, #16
 7983 01b2 1340     		and	r3, r2
1910:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7984              		.loc 1 1910 0 discriminator 1
 7985 01b4 08D1     		bne	.L610
1912:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)))                                 // check PLLS mux has sele
 7986              		.loc 1 1912 0
 7987 01b6 064B     		ldr	r3, .L611
 7988 01b8 9B79     		ldrb	r3, [r3, #6]
 7989 01ba DBB2     		uxtb	r3, r3
 7990 01bc 1A1C     		mov	r2, r3
 7991 01be 2023     		mov	r3, #32
 7992 01c0 1340     		and	r3, r2
1911:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7993              		.loc 1 1911 0
 7994 01c2 01D1     		bne	.L610
1913:../Sources/TFC/TFC_CrystalClock.c ****   {
1914:../Sources/TFC/TFC_CrystalClock.c ****     return FEE;                                                          // return FEE code
 7995              		.loc 1 1914 0
 7996 01c4 0423     		mov	r3, #4
 7997 01c6 00E0     		b	.L603
 7998              	.L610:
1915:../Sources/TFC/TFC_CrystalClock.c ****   }
1916:../Sources/TFC/TFC_CrystalClock.c ****   else
1917:../Sources/TFC/TFC_CrystalClock.c ****   {
1918:../Sources/TFC/TFC_CrystalClock.c ****     return 0;                                                            // error condition
 7999              		.loc 1 1918 0
 8000 01c8 0023     		mov	r3, #0
 8001              	.L603:
1919:../Sources/TFC/TFC_CrystalClock.c ****   }
1920:../Sources/TFC/TFC_CrystalClock.c **** } // what_mcg_mode
 8002              		.loc 1 1920 0
 8003 01ca 181C     		mov	r0, r3
 8004 01cc BD46     		mov	sp, r7
 8005              		@ sp needed for prologue
 8006 01ce 80BD     		pop	{r7, pc}
 8007              	.L612:
 8008              		.align	2
 8009              	.L611:
 8010 01d0 00400640 		.word	1074151424
 8011              		.cfi_endproc
 8012              	.LFE26:
 8014              		.section	.text.clk_monitor_0,"ax",%progbits
 8015              		.align	2
 8016              		.global	clk_monitor_0
 8017              		.code	16
 8018              		.thumb_func
 8020              	clk_monitor_0:
 8021              	.LFB27:
1921:../Sources/TFC/TFC_CrystalClock.c **** 
1922:../Sources/TFC/TFC_CrystalClock.c **** 
1923:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1924:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : clk_monitor_0
1925:../Sources/TFC/TFC_CrystalClock.c ****  *
1926:../Sources/TFC/TFC_CrystalClock.c ****  * This function simply enables or disables the OSC 0 clock monitor. This is
1927:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting or clearing the MCG_C6[CME] bit. It is recommended to  
1928:../Sources/TFC/TFC_CrystalClock.c ****  * enable this monitor in external clock modes (FEE, FBE, BLPE, PBE and PEE.
1929:../Sources/TFC/TFC_CrystalClock.c ****  * It MUST be disabled in all other modes or a reset may be generated. It must
1930:../Sources/TFC/TFC_CrystalClock.c ****  * also be disabled if it is desired to enter VLPR from BLPE mode.
1931:../Sources/TFC/TFC_CrystalClock.c ****  *
1932:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: en_dis - enables (= 1) or disables (= 0) the OSC 0 clock monitor
1933:../Sources/TFC/TFC_CrystalClock.c ****  *
1934:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : none
1935:../Sources/TFC/TFC_CrystalClock.c ****  */
1936:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis)
1937:../Sources/TFC/TFC_CrystalClock.c **** {         
 8022              		.loc 1 1937 0
 8023              		.cfi_startproc
 8024 0000 80B5     		push	{r7, lr}
 8025              	.LCFI80:
 8026              		.cfi_def_cfa_offset 8
 8027              		.cfi_offset 7, -8
 8028              		.cfi_offset 14, -4
 8029 0002 82B0     		sub	sp, sp, #8
 8030              	.LCFI81:
 8031              		.cfi_def_cfa_offset 16
 8032 0004 00AF     		add	r7, sp, #0
 8033              	.LCFI82:
 8034              		.cfi_def_cfa_register 7
 8035 0006 021C     		mov	r2, r0
 8036 0008 FB1D     		add	r3, r7, #7
 8037 000a 1A70     		strb	r2, [r3]
1938:../Sources/TFC/TFC_CrystalClock.c ****   if (en_dis)
 8038              		.loc 1 1938 0
 8039 000c FB1D     		add	r3, r7, #7
 8040 000e 1B78     		ldrb	r3, [r3]
 8041 0010 002B     		cmp	r3, #0
 8042 0012 08D0     		beq	.L614
1939:../Sources/TFC/TFC_CrystalClock.c ****   {
1940:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 |= MCG_C6_CME0_MASK;   
 8043              		.loc 1 1940 0
 8044 0014 094B     		ldr	r3, .L616
 8045 0016 094A     		ldr	r2, .L616
 8046 0018 5279     		ldrb	r2, [r2, #5]
 8047 001a D2B2     		uxtb	r2, r2
 8048 001c 2021     		mov	r1, #32
 8049 001e 0A43     		orr	r2, r1
 8050 0020 D2B2     		uxtb	r2, r2
 8051 0022 5A71     		strb	r2, [r3, #5]
 8052 0024 07E0     		b	.L613
 8053              	.L614:
1941:../Sources/TFC/TFC_CrystalClock.c ****   }
1942:../Sources/TFC/TFC_CrystalClock.c ****   else
1943:../Sources/TFC/TFC_CrystalClock.c ****   {
1944:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 &= ~MCG_C6_CME0_MASK;
 8054              		.loc 1 1944 0
 8055 0026 054B     		ldr	r3, .L616
 8056 0028 044A     		ldr	r2, .L616
 8057 002a 5279     		ldrb	r2, [r2, #5]
 8058 002c D2B2     		uxtb	r2, r2
 8059 002e 2021     		mov	r1, #32
 8060 0030 8A43     		bic	r2, r1
 8061 0032 D2B2     		uxtb	r2, r2
 8062 0034 5A71     		strb	r2, [r3, #5]
 8063              	.L613:
1945:../Sources/TFC/TFC_CrystalClock.c ****   }
1946:../Sources/TFC/TFC_CrystalClock.c **** }    // end clk_monitor_0
 8064              		.loc 1 1946 0
 8065 0036 BD46     		mov	sp, r7
 8066 0038 02B0     		add	sp, sp, #8
 8067              		@ sp needed for prologue
 8068 003a 80BD     		pop	{r7, pc}
 8069              	.L617:
 8070              		.align	2
 8071              	.L616:
 8072 003c 00400640 		.word	1074151424
 8073              		.cfi_endproc
 8074              	.LFE27:
 8076              		.text
 8077              	.Letext0:
 8078              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 8079              		.file 3 "C:/ELI/BUSINESS/CLIENT_DATA/FREESCALE/frdm-tfc__google-code/DEVELOPMENT_TRUNK/FRDM-TFC/Pr
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_CrystalClock.c
                            *COM*:00000001 drs_val
                            *COM*:00000001 dmx32_val
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:20     .text.TFC_InitClock:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:25     .text.TFC_InitClock:00000000 TFC_InitClock
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:70     .text.pll_init:00000000 pll_init
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:59     .text.TFC_InitClock:00000020 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:65     .text.pll_init:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:594    .text.pll_init:00000324 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:612    .text.pll_init:00000364 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:903    .text.pll_init:0000053c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:910    .text.pee_pbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:915    .text.pee_pbe:00000000 pee_pbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1040   .text.pee_pbe:000000a8 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1046   .text.pbe_pee:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1051   .text.pbe_pee:00000000 pbe_pee
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1266   .text.pbe_pee:0000013c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1272   .text.pbe_fbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1277   .text.pbe_fbe:00000000 pbe_fbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1406   .text.pbe_fbe:000000ac $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1412   .text.fbe_pbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1417   .text.fbe_pbe:00000000 fbe_pbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1757   .text.fbe_pbe:00000208 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1767   .text.pbe_blpe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1772   .text.pbe_blpe:00000000 pbe_blpe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1851   .text.pbe_blpe:00000064 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1856   .text.blpe_pbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:1861   .text.blpe_pbe:00000000 blpe_pbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2173   .text.blpe_pbe:000001dc $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2181   .text.blpe_fbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2186   .text.blpe_fbe:00000000 blpe_fbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2315   .text.blpe_fbe:000000b0 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2321   .text.fbe_blpe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2326   .text.fbe_blpe:00000000 fbe_blpe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2405   .text.fbe_blpe:00000064 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2410   .text.fbe_fei:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2415   .text.fbe_fei:00000000 fbe_fei
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7360   .text.fll_freq:00000000 fll_freq
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2655   .text.fbe_fei:00000158 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2663   .text.fei_fbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:2668   .text.fei_fbe:00000000 fei_fbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3153   .text.fei_fbe:000002e4 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3171   .text.fbe_fee:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3176   .text.fbe_fee:00000000 fbe_fee
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3376   .text.fbe_fee:00000130 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3382   .text.fee_fbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3387   .text.fee_fbe:00000000 fee_fbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3511   .text.fee_fbe:000000a8 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3517   .text.fbe_fbi:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3522   .text.fbe_fbi:00000000 fbe_fbi
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3936   .text.fbe_fbi:00000268 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3946   .text.fbi_fbe:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:3951   .text.fbi_fbe:00000000 fbi_fbe
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4446   .text.fbi_fbe:000002f4 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4464   .text.fbi_blpi:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4469   .text.fbi_blpi:00000000 fbi_blpi
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4579   .text.fbi_blpi:0000009c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4584   .text.blpi_fbi:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4589   .text.blpi_fbi:00000000 blpi_fbi
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4699   .text.blpi_fbi:0000009c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4704   .text.fbi_fee:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:4709   .text.fbi_fee:00000000 fbi_fee
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5215   .text.fbi_fee:00000314 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5231   .text.fbi_fee:0000034c $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5267   .text.fbi_fee:0000037c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5272   .text.fee_fbi:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5277   .text.fee_fbi:00000000 fee_fbi
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5660   .text.fee_fbi:00000234 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5670   .text.fbi_fei:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5675   .text.fbi_fei:00000000 fbi_fei
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5913   .text.fbi_fei:00000154 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5921   .text.fei_fbi:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:5926   .text.fei_fbi:00000000 fei_fbi
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6271   .text.fei_fbi:00000200 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6281   .text.fei_fee:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6286   .text.fei_fee:00000000 fei_fee
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6747   .text.fei_fee:000002c4 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6765   .text.fee_fei:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6770   .text.fee_fei:00000000 fee_fei
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6927   .text.fee_fei:000000d8 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6940   .text.atc:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:6945   .text.atc:00000000 atc
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7697   .text.what_mcg_mode:00000000 what_mcg_mode
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7339   .text.atc:0000027c $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7355   .text.fll_freq:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7677   .text.fll_freq:000001ac $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:7692   .text.what_mcg_mode:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:8010   .text.what_mcg_mode:000001d0 $d
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:8015   .text.clk_monitor_0:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:8020   .text.clk_monitor_0:00000000 clk_monitor_0
C:\Users\ehughes\AppData\Local\Temp\ccYXDXqF.s:8072   .text.clk_monitor_0:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2uiz
