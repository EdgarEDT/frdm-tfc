   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_UART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SDA_SERIAL_OUTGOING_QUEUE,12,4
  18              		.comm	SDA_SERIAL_INCOMING_QUEUE,12,4
  19              		.comm	SDA_SERIAL_OUTGOING_QUEUE_Storage,2048,4
  20              		.comm	SDA_SERIAL_INCOMING_QUEUE_Storage,128,4
  21              		.section	.text.TFC_InitUARTs,"ax",%progbits
  22              		.align	2
  23              		.global	TFC_InitUARTs
  24              		.code	16
  25              		.thumb_func
  27              	TFC_InitUARTs:
  28              	.LFB0:
  29              		.file 1 "../Sources/TFC/TFC_UART.c"
   1:../Sources/TFC/TFC_UART.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_UART.c **** 
   3:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud);
   4:../Sources/TFC/TFC_UART.c **** 
   5:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_OUTGOING_QUEUE;
   6:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_INCOMING_QUEUE;
   7:../Sources/TFC/TFC_UART.c **** 
   8:../Sources/TFC/TFC_UART.c **** 
   9:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_OUTGOING_QUEUE_Storage[SDA_SERIAL_OUTGOING_QUEUE_SIZE];
  10:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_INCOMING_QUEUE_Storage[SDA_SERIAL_INCOMING_QUEUE_SIZE];
  11:../Sources/TFC/TFC_UART.c **** 
  12:../Sources/TFC/TFC_UART.c **** 
  13:../Sources/TFC/TFC_UART.c **** void TFC_InitUARTs()
  14:../Sources/TFC/TFC_UART.c **** {
  30              		.loc 1 14 0
  31              		.cfi_startproc
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  15:../Sources/TFC/TFC_UART.c **** 	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
  40              		.loc 1 15 0
  41 0004 274A     		ldr	r2, .L2
  42 0006 2749     		ldr	r1, .L2
  43 0008 274B     		ldr	r3, .L2+4
  44 000a CB58     		ldr	r3, [r1, r3]
  45 000c 8021     		mov	r1, #128
  46 000e 8900     		lsl	r1, r1, #2
  47 0010 1943     		orr	r1, r3
  48 0012 254B     		ldr	r3, .L2+4
  49 0014 D150     		str	r1, [r2, r3]
  16:../Sources/TFC/TFC_UART.c **** 
  17:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_OUTGOING_QUEUE,SDA_SERIAL_OUTGOING_QUEUE_SIZE,SDA_SERIAL_OUTGOING_QUEUE_
  50              		.loc 1 17 0
  51 0016 2549     		ldr	r1, .L2+8
  52 0018 8023     		mov	r3, #128
  53 001a 1A01     		lsl	r2, r3, #4
  54 001c 244B     		ldr	r3, .L2+12
  55 001e 081C     		mov	r0, r1
  56 0020 111C     		mov	r1, r2
  57 0022 1A1C     		mov	r2, r3
  58 0024 FFF7FEFF 		bl	InitByteQueue
  18:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_INCOMING_QUEUE,SDA_SERIAL_INCOMING_QUEUE_SIZE,SDA_SERIAL_INCOMING_QUEUE_
  59              		.loc 1 18 0
  60 0028 224A     		ldr	r2, .L2+16
  61 002a 234B     		ldr	r3, .L2+20
  62 002c 101C     		mov	r0, r2
  63 002e 8021     		mov	r1, #128
  64 0030 1A1C     		mov	r2, r3
  65 0032 FFF7FEFF 		bl	InitByteQueue
  19:../Sources/TFC/TFC_UART.c **** 	
  20:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR1 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;   
  66              		.loc 1 20 0
  67 0036 214B     		ldr	r3, .L2+24
  68 0038 9022     		mov	r2, #144
  69 003a 9200     		lsl	r2, r2, #2
  70 003c 5A60     		str	r2, [r3, #4]
  21:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR2 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;  
  71              		.loc 1 21 0
  72 003e 1F4B     		ldr	r3, .L2+24
  73 0040 9022     		mov	r2, #144
  74 0042 9200     		lsl	r2, r2, #2
  75 0044 9A60     		str	r2, [r3, #8]
  22:../Sources/TFC/TFC_UART.c **** 	
  23:../Sources/TFC/TFC_UART.c **** 	//Select PLL/2 Clock
  24:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 &= ~(3<<26);
  76              		.loc 1 24 0
  77 0046 174A     		ldr	r2, .L2
  78 0048 1649     		ldr	r1, .L2
  79 004a 1D4B     		ldr	r3, .L2+28
  80 004c CB58     		ldr	r3, [r1, r3]
  81 004e 191C     		mov	r1, r3
  82 0050 1C4B     		ldr	r3, .L2+32
  83 0052 1940     		and	r1, r3
  84 0054 1A4B     		ldr	r3, .L2+28
  85 0056 D150     		str	r1, [r2, r3]
  25:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); 
  86              		.loc 1 25 0
  87 0058 124A     		ldr	r2, .L2
  88 005a 1249     		ldr	r1, .L2
  89 005c 184B     		ldr	r3, .L2+28
  90 005e CB58     		ldr	r3, [r1, r3]
  91 0060 8021     		mov	r1, #128
  92 0062 C904     		lsl	r1, r1, #19
  93 0064 1943     		orr	r1, r3
  94 0066 164B     		ldr	r3, .L2+28
  95 0068 D150     		str	r1, [r2, r3]
  26:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;
  96              		.loc 1 26 0
  97 006a 0E4A     		ldr	r2, .L2
  98 006c 0D49     		ldr	r1, .L2
  99 006e 144B     		ldr	r3, .L2+28
 100 0070 CB58     		ldr	r3, [r1, r3]
 101 0072 8021     		mov	r1, #128
 102 0074 4902     		lsl	r1, r1, #9
 103 0076 1943     		orr	r1, r3
 104 0078 114B     		ldr	r3, .L2+28
 105 007a D150     		str	r1, [r2, r3]
  27:../Sources/TFC/TFC_UART.c **** 	
  28:../Sources/TFC/TFC_UART.c **** 	//We have to feed this function the clock in KHz!
  29:../Sources/TFC/TFC_UART.c ****      uart0_init (CORE_CLOCK/2/1000, SDA_SERIAL_BAUD);
 106              		.loc 1 29 0
 107 007c 124A     		ldr	r2, .L2+36
 108 007e E123     		mov	r3, #225
 109 0080 5B02     		lsl	r3, r3, #9
 110 0082 101C     		mov	r0, r2
 111 0084 191C     		mov	r1, r3
 112 0086 FFF7FEFF 		bl	uart0_init
  30:../Sources/TFC/TFC_UART.c **** 	 //Enable recieve interrupts
  31:../Sources/TFC/TFC_UART.c ****      
  32:../Sources/TFC/TFC_UART.c ****      UART0_C2 |= UART_C2_RIE_MASK;
 113              		.loc 1 32 0
 114 008a 104B     		ldr	r3, .L2+40
 115 008c 0F4A     		ldr	r2, .L2+40
 116 008e D278     		ldrb	r2, [r2, #3]
 117 0090 D2B2     		uxtb	r2, r2
 118 0092 2021     		mov	r1, #32
 119 0094 0A43     		orr	r2, r1
 120 0096 D2B2     		uxtb	r2, r2
 121 0098 DA70     		strb	r2, [r3, #3]
  33:../Sources/TFC/TFC_UART.c ****      enable_irq(INT_UART0-16);
 122              		.loc 1 33 0
 123 009a 0C20     		mov	r0, #12
 124 009c FFF7FEFF 		bl	enable_irq
  34:../Sources/TFC/TFC_UART.c **** 	
  35:../Sources/TFC/TFC_UART.c **** }
 125              		.loc 1 35 0
 126 00a0 BD46     		mov	sp, r7
 127              		@ sp needed for prologue
 128 00a2 80BD     		pop	{r7, pc}
 129              	.L3:
 130              		.align	2
 131              	.L2:
 132 00a4 00700440 		.word	1074032640
 133 00a8 38100000 		.word	4152
 134 00ac 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 135 00b0 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE_Storage
 136 00b4 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 137 00b8 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE_Storage
 138 00bc 00900440 		.word	1074040832
 139 00c0 04100000 		.word	4100
 140 00c4 FFFFFFF3 		.word	-201326593
 141 00c8 C05D0000 		.word	24000
 142 00cc 00A00640 		.word	1074176000
 143              		.cfi_endproc
 144              	.LFE0:
 146              		.section	.text.TFC_UART_Process,"ax",%progbits
 147              		.align	2
 148              		.global	TFC_UART_Process
 149              		.code	16
 150              		.thumb_func
 152              	TFC_UART_Process:
 153              	.LFB1:
  36:../Sources/TFC/TFC_UART.c **** 
  37:../Sources/TFC/TFC_UART.c **** void TFC_UART_Process()
  38:../Sources/TFC/TFC_UART.c **** {
 154              		.loc 1 38 0
 155              		.cfi_startproc
 156 0000 80B5     		push	{r7, lr}
 157              	.LCFI2:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 00AF     		add	r7, sp, #0
 162              	.LCFI3:
 163              		.cfi_def_cfa_register 7
  39:../Sources/TFC/TFC_UART.c **** 	if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0 && (UART0_S1 & UART_S1_TDRE_MASK))
 164              		.loc 1 39 0
 165 0004 0B4B     		ldr	r3, .L6
 166 0006 181C     		mov	r0, r3
 167 0008 FFF7FEFF 		bl	BytesInQueue
 168 000c 031C     		mov	r3, r0
 169 000e 0FD0     		beq	.L4
 170              		.loc 1 39 0 is_stmt 0 discriminator 1
 171 0010 094B     		ldr	r3, .L6+4
 172 0012 1B79     		ldrb	r3, [r3, #4]
 173 0014 DBB2     		uxtb	r3, r3
 174 0016 DBB2     		uxtb	r3, r3
 175 0018 5BB2     		sxtb	r3, r3
 176 001a 002B     		cmp	r3, #0
 177 001c 08DA     		bge	.L4
  40:../Sources/TFC/TFC_UART.c **** 			UART0_C2 |= UART_C2_TIE_MASK; //Enable Transmitter Interrupts
 178              		.loc 1 40 0 is_stmt 1
 179 001e 064B     		ldr	r3, .L6+4
 180 0020 054A     		ldr	r2, .L6+4
 181 0022 D278     		ldrb	r2, [r2, #3]
 182 0024 D2B2     		uxtb	r2, r2
 183 0026 8021     		mov	r1, #128
 184 0028 4942     		neg	r1, r1
 185 002a 0A43     		orr	r2, r1
 186 002c D2B2     		uxtb	r2, r2
 187 002e DA70     		strb	r2, [r3, #3]
 188              	.L4:
  41:../Sources/TFC/TFC_UART.c **** }
 189              		.loc 1 41 0
 190 0030 BD46     		mov	sp, r7
 191              		@ sp needed for prologue
 192 0032 80BD     		pop	{r7, pc}
 193              	.L7:
 194              		.align	2
 195              	.L6:
 196 0034 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 197 0038 00A00640 		.word	1074176000
 198              		.cfi_endproc
 199              	.LFE1:
 201              		.section	.text.UART0_IRQHandler,"ax",%progbits
 202              		.align	2
 203              		.global	UART0_IRQHandler
 204              		.code	16
 205              		.thumb_func
 207              	UART0_IRQHandler:
 208              	.LFB2:
  42:../Sources/TFC/TFC_UART.c **** 
  43:../Sources/TFC/TFC_UART.c **** 
  44:../Sources/TFC/TFC_UART.c **** void UART0_IRQHandler()
  45:../Sources/TFC/TFC_UART.c **** {
 209              		.loc 1 45 0
 210              		.cfi_startproc
 211 0000 80B5     		push	{r7, lr}
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 82B0     		sub	sp, sp, #8
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 16
 219 0004 00AF     		add	r7, sp, #0
 220              	.LCFI6:
 221              		.cfi_def_cfa_register 7
  46:../Sources/TFC/TFC_UART.c **** 	uint8_t Temp;
  47:../Sources/TFC/TFC_UART.c **** 		
  48:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_RDRF_MASK)
 222              		.loc 1 48 0
 223 0006 194B     		ldr	r3, .L12
 224 0008 1B79     		ldrb	r3, [r3, #4]
 225 000a DBB2     		uxtb	r3, r3
 226 000c 1A1C     		mov	r2, r3
 227 000e 2023     		mov	r3, #32
 228 0010 1340     		and	r3, r2
 229 0012 07D0     		beq	.L9
  49:../Sources/TFC/TFC_UART.c **** 	{
  50:../Sources/TFC/TFC_UART.c **** 		ByteEnqueue(&SDA_SERIAL_INCOMING_QUEUE,UART0_D);
 230              		.loc 1 50 0
 231 0014 154B     		ldr	r3, .L12
 232 0016 DB79     		ldrb	r3, [r3, #7]
 233 0018 DBB2     		uxtb	r3, r3
 234 001a 154A     		ldr	r2, .L12+4
 235 001c 101C     		mov	r0, r2
 236 001e 191C     		mov	r1, r3
 237 0020 FFF7FEFF 		bl	ByteEnqueue
 238              	.L9:
  51:../Sources/TFC/TFC_UART.c **** 	}
  52:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_TDRE_MASK)
 239              		.loc 1 52 0
 240 0024 114B     		ldr	r3, .L12
 241 0026 1B79     		ldrb	r3, [r3, #4]
 242 0028 DBB2     		uxtb	r3, r3
 243 002a DBB2     		uxtb	r3, r3
 244 002c 5BB2     		sxtb	r3, r3
 245 002e 002B     		cmp	r3, #0
 246 0030 18DA     		bge	.L8
  53:../Sources/TFC/TFC_UART.c **** 	{
  54:../Sources/TFC/TFC_UART.c **** 		if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0)
 247              		.loc 1 54 0
 248 0032 104B     		ldr	r3, .L12+8
 249 0034 181C     		mov	r0, r3
 250 0036 FFF7FEFF 		bl	BytesInQueue
 251 003a 031C     		mov	r3, r0
 252 003c 0AD0     		beq	.L11
  55:../Sources/TFC/TFC_UART.c **** 		{
  56:../Sources/TFC/TFC_UART.c **** 			ByteDequeue(&SDA_SERIAL_OUTGOING_QUEUE,&Temp);
 253              		.loc 1 56 0
 254 003e 0D4A     		ldr	r2, .L12+8
 255 0040 FB1D     		add	r3, r7, #7
 256 0042 101C     		mov	r0, r2
 257 0044 191C     		mov	r1, r3
 258 0046 FFF7FEFF 		bl	ByteDequeue
  57:../Sources/TFC/TFC_UART.c **** 			UART0_D = Temp;
 259              		.loc 1 57 0
 260 004a 084B     		ldr	r3, .L12
 261 004c FA1D     		add	r2, r7, #7
 262 004e 1278     		ldrb	r2, [r2]
 263 0050 DA71     		strb	r2, [r3, #7]
 264 0052 07E0     		b	.L8
 265              	.L11:
  58:../Sources/TFC/TFC_UART.c **** 		}
  59:../Sources/TFC/TFC_UART.c **** 		else
  60:../Sources/TFC/TFC_UART.c **** 		{
  61:../Sources/TFC/TFC_UART.c **** 			//if there is nothing left in the queue then disable interrupts
  62:../Sources/TFC/TFC_UART.c **** 			UART0_C2 &= ~UART_C2_TIE_MASK; //Disable the  Interrupts
 266              		.loc 1 62 0
 267 0054 054B     		ldr	r3, .L12
 268 0056 054A     		ldr	r2, .L12
 269 0058 D278     		ldrb	r2, [r2, #3]
 270 005a D1B2     		uxtb	r1, r2
 271 005c 7F22     		mov	r2, #127
 272 005e 0A40     		and	r2, r1
 273 0060 D2B2     		uxtb	r2, r2
 274 0062 DA70     		strb	r2, [r3, #3]
 275              	.L8:
  63:../Sources/TFC/TFC_UART.c **** 		}
  64:../Sources/TFC/TFC_UART.c **** 	}
  65:../Sources/TFC/TFC_UART.c **** }
 276              		.loc 1 65 0
 277 0064 BD46     		mov	sp, r7
 278 0066 02B0     		add	sp, sp, #8
 279              		@ sp needed for prologue
 280 0068 80BD     		pop	{r7, pc}
 281              	.L13:
 282 006a C046     		.align	2
 283              	.L12:
 284 006c 00A00640 		.word	1074176000
 285 0070 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 286 0074 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 287              		.cfi_endproc
 288              	.LFE2:
 290              		.global	__aeabi_uidiv
 291              		.section	.text.uart0_init,"ax",%progbits
 292              		.align	2
 293              		.global	uart0_init
 294              		.code	16
 295              		.thumb_func
 297              	uart0_init:
 298              	.LFB3:
  66:../Sources/TFC/TFC_UART.c **** 
  67:../Sources/TFC/TFC_UART.c **** 
  68:../Sources/TFC/TFC_UART.c **** 
  69:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud)
  70:../Sources/TFC/TFC_UART.c **** {
 299              		.loc 1 70 0
 300              		.cfi_startproc
 301 0000 80B5     		push	{r7, lr}
 302              	.LCFI7:
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0002 8CB0     		sub	sp, sp, #48
 307              	.LCFI8:
 308              		.cfi_def_cfa_offset 56
 309 0004 00AF     		add	r7, sp, #0
 310              	.LCFI9:
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
 313 0008 3960     		str	r1, [r7]
  71:../Sources/TFC/TFC_UART.c ****     uint8 i;
  72:../Sources/TFC/TFC_UART.c ****     uint32 calculated_baud = 0;
 314              		.loc 1 72 0
 315 000a 0023     		mov	r3, #0
 316 000c FB61     		str	r3, [r7, #28]
  73:../Sources/TFC/TFC_UART.c ****     uint32 baud_diff = 0;
 317              		.loc 1 73 0
 318 000e 0023     		mov	r3, #0
 319 0010 BB62     		str	r3, [r7, #40]
  74:../Sources/TFC/TFC_UART.c ****     uint32 osr_val = 0;
 320              		.loc 1 74 0
 321 0012 0023     		mov	r3, #0
 322 0014 7B62     		str	r3, [r7, #36]
  75:../Sources/TFC/TFC_UART.c ****     uint32 sbr_val, uart0clk;
  76:../Sources/TFC/TFC_UART.c ****     uint32 baud_rate;
  77:../Sources/TFC/TFC_UART.c ****     uint32 reg_temp = 0;
 323              		.loc 1 77 0
 324 0016 0023     		mov	r3, #0
 325 0018 BB61     		str	r3, [r7, #24]
  78:../Sources/TFC/TFC_UART.c ****     uint32 temp = 0;
 326              		.loc 1 78 0
 327 001a 0023     		mov	r3, #0
 328 001c 3B62     		str	r3, [r7, #32]
  79:../Sources/TFC/TFC_UART.c ****     
  80:../Sources/TFC/TFC_UART.c ****     SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
 329              		.loc 1 80 0
 330 001e 7D4A     		ldr	r2, .L27
 331 0020 7C49     		ldr	r1, .L27
 332 0022 7D4B     		ldr	r3, .L27+4
 333 0024 CB58     		ldr	r3, [r1, r3]
 334 0026 8021     		mov	r1, #128
 335 0028 C900     		lsl	r1, r1, #3
 336 002a 1943     		orr	r1, r3
 337 002c 7A4B     		ldr	r3, .L27+4
 338 002e D150     		str	r1, [r2, r3]
  81:../Sources/TFC/TFC_UART.c ****     
  82:../Sources/TFC/TFC_UART.c ****     // Disable UART0 before changing registers
  83:../Sources/TFC/TFC_UART.c ****     UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
 339              		.loc 1 83 0
 340 0030 7A4B     		ldr	r3, .L27+8
 341 0032 7A4A     		ldr	r2, .L27+8
 342 0034 D278     		ldrb	r2, [r2, #3]
 343 0036 D2B2     		uxtb	r2, r2
 344 0038 0C21     		mov	r1, #12
 345 003a 8A43     		bic	r2, r1
 346 003c D2B2     		uxtb	r2, r2
 347 003e DA70     		strb	r2, [r3, #3]
  84:../Sources/TFC/TFC_UART.c ****   
  85:../Sources/TFC/TFC_UART.c ****     // Verify that a valid clock value has been passed to the function 
  86:../Sources/TFC/TFC_UART.c ****     if ((sysclk > 50000) || (sysclk < 32))
 348              		.loc 1 86 0
 349 0040 7A68     		ldr	r2, [r7, #4]
 350 0042 774B     		ldr	r3, .L27+12
 351 0044 9A42     		cmp	r2, r3
 352 0046 02DC     		bgt	.L15
 353              		.loc 1 86 0 is_stmt 0 discriminator 1
 354 0048 7B68     		ldr	r3, [r7, #4]
 355 004a 1F2B     		cmp	r3, #31
 356 004c 0EDC     		bgt	.L16
 357              	.L15:
  87:../Sources/TFC/TFC_UART.c ****     {
  88:../Sources/TFC/TFC_UART.c ****         sysclk = 0;
 358              		.loc 1 88 0 is_stmt 1
 359 004e 0023     		mov	r3, #0
 360 0050 7B60     		str	r3, [r7, #4]
  89:../Sources/TFC/TFC_UART.c ****         reg_temp = SIM_SOPT2;
 361              		.loc 1 89 0
 362 0052 704A     		ldr	r2, .L27
 363 0054 734B     		ldr	r3, .L27+16
 364 0056 D358     		ldr	r3, [r2, r3]
 365 0058 BB61     		str	r3, [r7, #24]
  90:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
 366              		.loc 1 90 0
 367 005a BA69     		ldr	r2, [r7, #24]
 368 005c 724B     		ldr	r3, .L27+20
 369 005e 1340     		and	r3, r2
 370 0060 BB61     		str	r3, [r7, #24]
  91:../Sources/TFC/TFC_UART.c ****         reg_temp |= SIM_SOPT2_UART0SRC(0);
  92:../Sources/TFC/TFC_UART.c ****         SIM_SOPT2 = reg_temp;
 371              		.loc 1 92 0
 372 0062 6C4A     		ldr	r2, .L27
 373 0064 6F4B     		ldr	r3, .L27+16
 374 0066 B969     		ldr	r1, [r7, #24]
 375 0068 D150     		str	r1, [r2, r3]
 376              	.L17:
  93:../Sources/TFC/TFC_UART.c **** 			
  94:../Sources/TFC/TFC_UART.c **** 			  // Enter inifinite loop because the 
  95:../Sources/TFC/TFC_UART.c **** 			  // the desired system clock value is 
  96:../Sources/TFC/TFC_UART.c **** 			  // invalid!!
  97:../Sources/TFC/TFC_UART.c **** 			  while(1)
  98:../Sources/TFC/TFC_UART.c **** 				{}
 377              		.loc 1 98 0 discriminator 1
 378 006a FEE7     		b	.L17
 379              	.L16:
  99:../Sources/TFC/TFC_UART.c ****     }
 100:../Sources/TFC/TFC_UART.c ****    
 101:../Sources/TFC/TFC_UART.c ****     
 102:../Sources/TFC/TFC_UART.c ****     // Initialize baud rate
 103:../Sources/TFC/TFC_UART.c ****     baud_rate = baud;
 380              		.loc 1 103 0
 381 006c 3B68     		ldr	r3, [r7]
 382 006e 7B61     		str	r3, [r7, #20]
 104:../Sources/TFC/TFC_UART.c ****     
 105:../Sources/TFC/TFC_UART.c ****     // Change units to Hz
 106:../Sources/TFC/TFC_UART.c ****     uart0clk = sysclk * 1000;
 383              		.loc 1 106 0
 384 0070 7B68     		ldr	r3, [r7, #4]
 385 0072 FA22     		mov	r2, #250
 386 0074 9200     		lsl	r2, r2, #2
 387 0076 5343     		mul	r3, r2
 388 0078 3B61     		str	r3, [r7, #16]
 107:../Sources/TFC/TFC_UART.c ****     // Calculate the first baud rate using the lowest OSR value possible.  
 108:../Sources/TFC/TFC_UART.c ****     i = 4;
 389              		.loc 1 108 0
 390 007a 3B1C     		mov	r3, r7
 391 007c 2F33     		add	r3, r3, #47
 392 007e 0422     		mov	r2, #4
 393 0080 1A70     		strb	r2, [r3]
 109:../Sources/TFC/TFC_UART.c ****     sbr_val = (uint32)(uart0clk/(baud_rate * i));
 394              		.loc 1 109 0
 395 0082 3B1C     		mov	r3, r7
 396 0084 2F33     		add	r3, r3, #47
 397 0086 1B78     		ldrb	r3, [r3]
 398 0088 7A69     		ldr	r2, [r7, #20]
 399 008a 5343     		mul	r3, r2
 400 008c 3869     		ldr	r0, [r7, #16]
 401 008e 191C     		mov	r1, r3
 402 0090 FFF7FEFF 		bl	__aeabi_uidiv
 403 0094 031C     		mov	r3, r0
 404 0096 FB60     		str	r3, [r7, #12]
 110:../Sources/TFC/TFC_UART.c ****     calculated_baud = (uart0clk / (i * sbr_val));
 405              		.loc 1 110 0
 406 0098 3B1C     		mov	r3, r7
 407 009a 2F33     		add	r3, r3, #47
 408 009c 1B78     		ldrb	r3, [r3]
 409 009e FA68     		ldr	r2, [r7, #12]
 410 00a0 5343     		mul	r3, r2
 411 00a2 3869     		ldr	r0, [r7, #16]
 412 00a4 191C     		mov	r1, r3
 413 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 414 00aa 031C     		mov	r3, r0
 415 00ac FB61     		str	r3, [r7, #28]
 111:../Sources/TFC/TFC_UART.c ****         
 112:../Sources/TFC/TFC_UART.c ****     if (calculated_baud > baud_rate)
 416              		.loc 1 112 0
 417 00ae FA69     		ldr	r2, [r7, #28]
 418 00b0 7B69     		ldr	r3, [r7, #20]
 419 00b2 9A42     		cmp	r2, r3
 420 00b4 04D9     		bls	.L18
 113:../Sources/TFC/TFC_UART.c ****         baud_diff = calculated_baud - baud_rate;
 421              		.loc 1 113 0
 422 00b6 FA69     		ldr	r2, [r7, #28]
 423 00b8 7B69     		ldr	r3, [r7, #20]
 424 00ba D31A     		sub	r3, r2, r3
 425 00bc BB62     		str	r3, [r7, #40]
 426 00be 03E0     		b	.L19
 427              	.L18:
 114:../Sources/TFC/TFC_UART.c ****     else
 115:../Sources/TFC/TFC_UART.c ****         baud_diff = baud_rate - calculated_baud;
 428              		.loc 1 115 0
 429 00c0 7A69     		ldr	r2, [r7, #20]
 430 00c2 FB69     		ldr	r3, [r7, #28]
 431 00c4 D31A     		sub	r3, r2, r3
 432 00c6 BB62     		str	r3, [r7, #40]
 433              	.L19:
 116:../Sources/TFC/TFC_UART.c ****     
 117:../Sources/TFC/TFC_UART.c ****     osr_val = i;
 434              		.loc 1 117 0
 435 00c8 3B1C     		mov	r3, r7
 436 00ca 2F33     		add	r3, r3, #47
 437 00cc 1B78     		ldrb	r3, [r3]
 438 00ce 7B62     		str	r3, [r7, #36]
 118:../Sources/TFC/TFC_UART.c ****         
 119:../Sources/TFC/TFC_UART.c ****     // Select the best OSR value
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 439              		.loc 1 120 0
 440 00d0 3B1C     		mov	r3, r7
 441 00d2 2F33     		add	r3, r3, #47
 442 00d4 0522     		mov	r2, #5
 443 00d6 1A70     		strb	r2, [r3]
 444 00d8 33E0     		b	.L20
 445              	.L24:
 121:../Sources/TFC/TFC_UART.c ****     {
 122:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)(uart0clk/(baud_rate * i));
 446              		.loc 1 122 0
 447 00da 3B1C     		mov	r3, r7
 448 00dc 2F33     		add	r3, r3, #47
 449 00de 1B78     		ldrb	r3, [r3]
 450 00e0 7A69     		ldr	r2, [r7, #20]
 451 00e2 5343     		mul	r3, r2
 452 00e4 3869     		ldr	r0, [r7, #16]
 453 00e6 191C     		mov	r1, r3
 454 00e8 FFF7FEFF 		bl	__aeabi_uidiv
 455 00ec 031C     		mov	r3, r0
 456 00ee FB60     		str	r3, [r7, #12]
 123:../Sources/TFC/TFC_UART.c ****         calculated_baud = (uart0clk / (i * sbr_val));
 457              		.loc 1 123 0
 458 00f0 3B1C     		mov	r3, r7
 459 00f2 2F33     		add	r3, r3, #47
 460 00f4 1B78     		ldrb	r3, [r3]
 461 00f6 FA68     		ldr	r2, [r7, #12]
 462 00f8 5343     		mul	r3, r2
 463 00fa 3869     		ldr	r0, [r7, #16]
 464 00fc 191C     		mov	r1, r3
 465 00fe FFF7FEFF 		bl	__aeabi_uidiv
 466 0102 031C     		mov	r3, r0
 467 0104 FB61     		str	r3, [r7, #28]
 124:../Sources/TFC/TFC_UART.c ****         
 125:../Sources/TFC/TFC_UART.c ****         if (calculated_baud > baud_rate)
 468              		.loc 1 125 0
 469 0106 FA69     		ldr	r2, [r7, #28]
 470 0108 7B69     		ldr	r3, [r7, #20]
 471 010a 9A42     		cmp	r2, r3
 472 010c 04D9     		bls	.L21
 126:../Sources/TFC/TFC_UART.c ****             temp = calculated_baud - baud_rate;
 473              		.loc 1 126 0
 474 010e FA69     		ldr	r2, [r7, #28]
 475 0110 7B69     		ldr	r3, [r7, #20]
 476 0112 D31A     		sub	r3, r2, r3
 477 0114 3B62     		str	r3, [r7, #32]
 478 0116 03E0     		b	.L22
 479              	.L21:
 127:../Sources/TFC/TFC_UART.c ****         else
 128:../Sources/TFC/TFC_UART.c ****             temp = baud_rate - calculated_baud;
 480              		.loc 1 128 0
 481 0118 7A69     		ldr	r2, [r7, #20]
 482 011a FB69     		ldr	r3, [r7, #28]
 483 011c D31A     		sub	r3, r2, r3
 484 011e 3B62     		str	r3, [r7, #32]
 485              	.L22:
 129:../Sources/TFC/TFC_UART.c ****         
 130:../Sources/TFC/TFC_UART.c ****         if (temp <= baud_diff)
 486              		.loc 1 130 0
 487 0120 3A6A     		ldr	r2, [r7, #32]
 488 0122 BB6A     		ldr	r3, [r7, #40]
 489 0124 9A42     		cmp	r2, r3
 490 0126 05D8     		bhi	.L23
 131:../Sources/TFC/TFC_UART.c ****         {
 132:../Sources/TFC/TFC_UART.c ****             baud_diff = temp;
 491              		.loc 1 132 0
 492 0128 3B6A     		ldr	r3, [r7, #32]
 493 012a BB62     		str	r3, [r7, #40]
 133:../Sources/TFC/TFC_UART.c ****             osr_val = i; 
 494              		.loc 1 133 0
 495 012c 3B1C     		mov	r3, r7
 496 012e 2F33     		add	r3, r3, #47
 497 0130 1B78     		ldrb	r3, [r3]
 498 0132 7B62     		str	r3, [r7, #36]
 499              	.L23:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 500              		.loc 1 120 0
 501 0134 3B1C     		mov	r3, r7
 502 0136 2F33     		add	r3, r3, #47
 503 0138 3A1C     		mov	r2, r7
 504 013a 2F32     		add	r2, r2, #47
 505 013c 1278     		ldrb	r2, [r2]
 506 013e 0132     		add	r2, r2, #1
 507 0140 1A70     		strb	r2, [r3]
 508              	.L20:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 509              		.loc 1 120 0 is_stmt 0 discriminator 1
 510 0142 3B1C     		mov	r3, r7
 511 0144 2F33     		add	r3, r3, #47
 512 0146 1B78     		ldrb	r3, [r3]
 513 0148 202B     		cmp	r3, #32
 514 014a C6D9     		bls	.L24
 134:../Sources/TFC/TFC_UART.c ****         }
 135:../Sources/TFC/TFC_UART.c ****     }
 136:../Sources/TFC/TFC_UART.c ****     
 137:../Sources/TFC/TFC_UART.c ****     if (baud_diff < ((baud_rate / 100) * 3))
 515              		.loc 1 137 0 is_stmt 1
 516 014c 7B69     		ldr	r3, [r7, #20]
 517 014e 181C     		mov	r0, r3
 518 0150 6421     		mov	r1, #100
 519 0152 FFF7FEFF 		bl	__aeabi_uidiv
 520 0156 031C     		mov	r3, r0
 521 0158 1A1C     		mov	r2, r3
 522 015a 131C     		mov	r3, r2
 523 015c 5B00     		lsl	r3, r3, #1
 524 015e 9A18     		add	r2, r3, r2
 525 0160 BB6A     		ldr	r3, [r7, #40]
 526 0162 9A42     		cmp	r2, r3
 527 0164 52D9     		bls	.L14
 138:../Sources/TFC/TFC_UART.c ****     {
 139:../Sources/TFC/TFC_UART.c ****         // If the OSR is between 4x and 8x then both
 140:../Sources/TFC/TFC_UART.c ****         // edge sampling MUST be turned on.  
 141:../Sources/TFC/TFC_UART.c ****         if ((osr_val >3) && (osr_val < 9))
 528              		.loc 1 141 0
 529 0166 7B6A     		ldr	r3, [r7, #36]
 530 0168 032B     		cmp	r3, #3
 531 016a 0AD9     		bls	.L26
 532              		.loc 1 141 0 is_stmt 0 discriminator 1
 533 016c 7B6A     		ldr	r3, [r7, #36]
 534 016e 082B     		cmp	r3, #8
 535 0170 07D8     		bhi	.L26
 142:../Sources/TFC/TFC_UART.c ****             UART0_C5|= UART0_C5_BOTHEDGE_MASK;
 536              		.loc 1 142 0 is_stmt 1
 537 0172 2A4B     		ldr	r3, .L27+8
 538 0174 294A     		ldr	r2, .L27+8
 539 0176 D27A     		ldrb	r2, [r2, #11]
 540 0178 D2B2     		uxtb	r2, r2
 541 017a 0221     		mov	r1, #2
 542 017c 0A43     		orr	r2, r1
 543 017e D2B2     		uxtb	r2, r2
 544 0180 DA72     		strb	r2, [r3, #11]
 545              	.L26:
 143:../Sources/TFC/TFC_UART.c ****         
 144:../Sources/TFC/TFC_UART.c ****         // Setup OSR value 
 145:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_C4;
 546              		.loc 1 145 0
 547 0182 264B     		ldr	r3, .L27+8
 548 0184 9B7A     		ldrb	r3, [r3, #10]
 549 0186 DBB2     		uxtb	r3, r3
 550 0188 BB61     		str	r3, [r7, #24]
 146:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~UART0_C4_OSR_MASK;
 551              		.loc 1 146 0
 552 018a BB69     		ldr	r3, [r7, #24]
 553 018c 1F22     		mov	r2, #31
 554 018e 9343     		bic	r3, r2
 555 0190 BB61     		str	r3, [r7, #24]
 147:../Sources/TFC/TFC_UART.c ****         reg_temp |= UART0_C4_OSR(osr_val-1);
 556              		.loc 1 147 0
 557 0192 7B6A     		ldr	r3, [r7, #36]
 558 0194 DBB2     		uxtb	r3, r3
 559 0196 013B     		sub	r3, r3, #1
 560 0198 DBB2     		uxtb	r3, r3
 561 019a 1A1C     		mov	r2, r3
 562 019c 1F23     		mov	r3, #31
 563 019e 1340     		and	r3, r2
 564 01a0 BA69     		ldr	r2, [r7, #24]
 565 01a2 1343     		orr	r3, r2
 566 01a4 BB61     		str	r3, [r7, #24]
 148:../Sources/TFC/TFC_UART.c ****     
 149:../Sources/TFC/TFC_UART.c ****         // Write reg_temp to C4 register
 150:../Sources/TFC/TFC_UART.c ****         UART0_C4 = reg_temp;
 567              		.loc 1 150 0
 568 01a6 1D4B     		ldr	r3, .L27+8
 569 01a8 BA69     		ldr	r2, [r7, #24]
 570 01aa D2B2     		uxtb	r2, r2
 571 01ac 9A72     		strb	r2, [r3, #10]
 151:../Sources/TFC/TFC_UART.c ****         
 152:../Sources/TFC/TFC_UART.c ****         reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
 572              		.loc 1 152 0
 573 01ae BA69     		ldr	r2, [r7, #24]
 574 01b0 1F23     		mov	r3, #31
 575 01b2 1340     		and	r3, r2
 576 01b4 0133     		add	r3, r3, #1
 577 01b6 BB61     		str	r3, [r7, #24]
 153:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
 578              		.loc 1 153 0
 579 01b8 7B69     		ldr	r3, [r7, #20]
 580 01ba BA69     		ldr	r2, [r7, #24]
 581 01bc 5343     		mul	r3, r2
 582 01be 3869     		ldr	r0, [r7, #16]
 583 01c0 191C     		mov	r1, r3
 584 01c2 FFF7FEFF 		bl	__aeabi_uidiv
 585 01c6 031C     		mov	r3, r0
 586 01c8 FB60     		str	r3, [r7, #12]
 154:../Sources/TFC/TFC_UART.c ****         
 155:../Sources/TFC/TFC_UART.c ****          /* Save off the current value of the uartx_BDH except for the SBR field */
 156:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
 587              		.loc 1 156 0
 588 01ca 144B     		ldr	r3, .L27+8
 589 01cc 1B78     		ldrb	r3, [r3]
 590 01ce DBB2     		uxtb	r3, r3
 591 01d0 1F22     		mov	r2, #31
 592 01d2 9343     		bic	r3, r2
 593 01d4 BB61     		str	r3, [r7, #24]
 157:../Sources/TFC/TFC_UART.c ****    
 158:../Sources/TFC/TFC_UART.c ****         UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
 594              		.loc 1 158 0
 595 01d6 114B     		ldr	r3, .L27+8
 596 01d8 F968     		ldr	r1, [r7, #12]
 597 01da F822     		mov	r2, #248
 598 01dc 5201     		lsl	r2, r2, #5
 599 01de 0A40     		and	r2, r1
 600 01e0 120A     		lsr	r2, r2, #8
 601 01e2 D1B2     		uxtb	r1, r2
 602 01e4 1F22     		mov	r2, #31
 603 01e6 0A40     		and	r2, r1
 604 01e8 D1B2     		uxtb	r1, r2
 605 01ea BA69     		ldr	r2, [r7, #24]
 606 01ec D2B2     		uxtb	r2, r2
 607 01ee 0A43     		orr	r2, r1
 608 01f0 D2B2     		uxtb	r2, r2
 609 01f2 1A70     		strb	r2, [r3]
 159:../Sources/TFC/TFC_UART.c ****         UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
 610              		.loc 1 159 0
 611 01f4 094B     		ldr	r3, .L27+8
 612 01f6 FA68     		ldr	r2, [r7, #12]
 613 01f8 D2B2     		uxtb	r2, r2
 614 01fa 5A70     		strb	r2, [r3, #1]
 160:../Sources/TFC/TFC_UART.c ****         
 161:../Sources/TFC/TFC_UART.c ****         /* Enable receiver and transmitter */
 162:../Sources/TFC/TFC_UART.c ****         UART0_C2 |= (UART0_C2_TE_MASK
 615              		.loc 1 162 0
 616 01fc 074B     		ldr	r3, .L27+8
 617 01fe 074A     		ldr	r2, .L27+8
 618 0200 D278     		ldrb	r2, [r2, #3]
 619 0202 D2B2     		uxtb	r2, r2
 620 0204 0C21     		mov	r1, #12
 621 0206 0A43     		orr	r2, r1
 622 0208 D2B2     		uxtb	r2, r2
 623 020a DA70     		strb	r2, [r3, #3]
 624              	.L14:
 163:../Sources/TFC/TFC_UART.c ****                     | UART0_C2_RE_MASK );
 164:../Sources/TFC/TFC_UART.c ****     }
 165:../Sources/TFC/TFC_UART.c ****     else
 166:../Sources/TFC/TFC_UART.c **** 		{
 167:../Sources/TFC/TFC_UART.c ****         // Unacceptable baud rate difference
 168:../Sources/TFC/TFC_UART.c ****         // More than 3% difference!!
 169:../Sources/TFC/TFC_UART.c ****         // Enter infinite loop!
 170:../Sources/TFC/TFC_UART.c ****         //while(1)
 171:../Sources/TFC/TFC_UART.c **** 			//	{}
 172:../Sources/TFC/TFC_UART.c **** 		}					
 173:../Sources/TFC/TFC_UART.c ****     
 174:../Sources/TFC/TFC_UART.c **** }
 625              		.loc 1 174 0
 626 020c BD46     		mov	sp, r7
 627 020e 0CB0     		add	sp, sp, #48
 628              		@ sp needed for prologue
 629 0210 80BD     		pop	{r7, pc}
 630              	.L28:
 631 0212 C046     		.align	2
 632              	.L27:
 633 0214 00700440 		.word	1074032640
 634 0218 34100000 		.word	4148
 635 021c 00A00640 		.word	1074176000
 636 0220 50C30000 		.word	50000
 637 0224 04100000 		.word	4100
 638 0228 FFFFFFF3 		.word	-201326593
 639              		.cfi_endproc
 640              	.LFE3:
 642              		.section	.text.uart_getchar,"ax",%progbits
 643              		.align	2
 644              		.global	uart_getchar
 645              		.code	16
 646              		.thumb_func
 648              	uart_getchar:
 649              	.LFB4:
 175:../Sources/TFC/TFC_UART.c **** 
 176:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 177:../Sources/TFC/TFC_UART.c **** /*
 178:../Sources/TFC/TFC_UART.c ****  * Wait for a character to be received on the specified uart
 179:../Sources/TFC/TFC_UART.c ****  *
 180:../Sources/TFC/TFC_UART.c ****  * Parameters:
 181:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to read from
 182:../Sources/TFC/TFC_UART.c ****  *
 183:../Sources/TFC/TFC_UART.c ****  * Return Values:
 184:../Sources/TFC/TFC_UART.c ****  *  the received character
 185:../Sources/TFC/TFC_UART.c ****  */
 186:../Sources/TFC/TFC_UART.c **** char uart_getchar (UART_MemMapPtr channel)
 187:../Sources/TFC/TFC_UART.c **** {
 650              		.loc 1 187 0
 651              		.cfi_startproc
 652 0000 80B5     		push	{r7, lr}
 653              	.LCFI10:
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 82B0     		sub	sp, sp, #8
 658              	.LCFI11:
 659              		.cfi_def_cfa_offset 16
 660 0004 00AF     		add	r7, sp, #0
 661              	.LCFI12:
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 188:../Sources/TFC/TFC_UART.c ****       /* Wait until character has been received */
 189:../Sources/TFC/TFC_UART.c ****       while (!(UART_S1_REG(channel) & UART_S1_RDRF_MASK));
 664              		.loc 1 189 0
 665 0008 C046     		mov	r8, r8
 666              	.L30:
 667              		.loc 1 189 0 is_stmt 0 discriminator 1
 668 000a 7B68     		ldr	r3, [r7, #4]
 669 000c 1B79     		ldrb	r3, [r3, #4]
 670 000e DBB2     		uxtb	r3, r3
 671 0010 1A1C     		mov	r2, r3
 672 0012 2023     		mov	r3, #32
 673 0014 1340     		and	r3, r2
 674 0016 F8D0     		beq	.L30
 190:../Sources/TFC/TFC_UART.c ****     
 191:../Sources/TFC/TFC_UART.c ****       /* Return the 8-bit data from the receiver */
 192:../Sources/TFC/TFC_UART.c ****       return UART_D_REG(channel);
 675              		.loc 1 192 0 is_stmt 1
 676 0018 7B68     		ldr	r3, [r7, #4]
 677 001a DB79     		ldrb	r3, [r3, #7]
 678 001c DBB2     		uxtb	r3, r3
 193:../Sources/TFC/TFC_UART.c **** }
 679              		.loc 1 193 0
 680 001e 181C     		mov	r0, r3
 681 0020 BD46     		mov	sp, r7
 682 0022 02B0     		add	sp, sp, #8
 683              		@ sp needed for prologue
 684 0024 80BD     		pop	{r7, pc}
 685              		.cfi_endproc
 686              	.LFE4:
 688 0026 C046     		.section	.text.uart_putchar,"ax",%progbits
 689              		.align	2
 690              		.global	uart_putchar
 691              		.code	16
 692              		.thumb_func
 694              	uart_putchar:
 695              	.LFB5:
 194:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 195:../Sources/TFC/TFC_UART.c **** /*
 196:../Sources/TFC/TFC_UART.c ****  * Wait for space in the uart Tx FIFO and then send a character
 197:../Sources/TFC/TFC_UART.c ****  *
 198:../Sources/TFC/TFC_UART.c ****  * Parameters:
 199:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to send to
 200:../Sources/TFC/TFC_UART.c ****  *  ch			 character to send
 201:../Sources/TFC/TFC_UART.c ****  */ 
 202:../Sources/TFC/TFC_UART.c **** void uart_putchar (UART_MemMapPtr channel, char ch)
 203:../Sources/TFC/TFC_UART.c **** {
 696              		.loc 1 203 0
 697              		.cfi_startproc
 698 0000 80B5     		push	{r7, lr}
 699              	.LCFI13:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 82B0     		sub	sp, sp, #8
 704              	.LCFI14:
 705              		.cfi_def_cfa_offset 16
 706 0004 00AF     		add	r7, sp, #0
 707              	.LCFI15:
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 710 0008 0A1C     		mov	r2, r1
 711 000a FB1C     		add	r3, r7, #3
 712 000c 1A70     		strb	r2, [r3]
 204:../Sources/TFC/TFC_UART.c ****       /* Wait until space is available in the FIFO */
 205:../Sources/TFC/TFC_UART.c ****       while(!(UART_S1_REG(channel) & UART_S1_TDRE_MASK));
 713              		.loc 1 205 0
 714 000e C046     		mov	r8, r8
 715              	.L32:
 716              		.loc 1 205 0 is_stmt 0 discriminator 1
 717 0010 7B68     		ldr	r3, [r7, #4]
 718 0012 1B79     		ldrb	r3, [r3, #4]
 719 0014 DBB2     		uxtb	r3, r3
 720 0016 DBB2     		uxtb	r3, r3
 721 0018 5BB2     		sxtb	r3, r3
 722 001a 002B     		cmp	r3, #0
 723 001c F8DA     		bge	.L32
 206:../Sources/TFC/TFC_UART.c ****     
 207:../Sources/TFC/TFC_UART.c ****       /* Send the character */
 208:../Sources/TFC/TFC_UART.c ****       UART_D_REG(channel) = (uint8)ch;
 724              		.loc 1 208 0 is_stmt 1
 725 001e 7B68     		ldr	r3, [r7, #4]
 726 0020 FA1C     		add	r2, r7, #3
 727 0022 1278     		ldrb	r2, [r2]
 728 0024 DA71     		strb	r2, [r3, #7]
 209:../Sources/TFC/TFC_UART.c ****     
 210:../Sources/TFC/TFC_UART.c ****  }
 729              		.loc 1 210 0
 730 0026 BD46     		mov	sp, r7
 731 0028 02B0     		add	sp, sp, #8
 732              		@ sp needed for prologue
 733 002a 80BD     		pop	{r7, pc}
 734              		.cfi_endproc
 735              	.LFE5:
 737              		.section	.text.uart_getchar_present,"ax",%progbits
 738              		.align	2
 739              		.global	uart_getchar_present
 740              		.code	16
 741              		.thumb_func
 743              	uart_getchar_present:
 744              	.LFB6:
 211:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 212:../Sources/TFC/TFC_UART.c **** /*
 213:../Sources/TFC/TFC_UART.c ****  * Check to see if a character has been received
 214:../Sources/TFC/TFC_UART.c ****  *
 215:../Sources/TFC/TFC_UART.c ****  * Parameters:
 216:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to check for a character
 217:../Sources/TFC/TFC_UART.c ****  *
 218:../Sources/TFC/TFC_UART.c ****  * Return values:
 219:../Sources/TFC/TFC_UART.c ****  *  0       No character received
 220:../Sources/TFC/TFC_UART.c ****  *  1       Character has been received
 221:../Sources/TFC/TFC_UART.c ****  */
 222:../Sources/TFC/TFC_UART.c **** int uart_getchar_present (UART_MemMapPtr channel)
 223:../Sources/TFC/TFC_UART.c **** {
 745              		.loc 1 223 0
 746              		.cfi_startproc
 747 0000 80B5     		push	{r7, lr}
 748              	.LCFI16:
 749              		.cfi_def_cfa_offset 8
 750              		.cfi_offset 7, -8
 751              		.cfi_offset 14, -4
 752 0002 82B0     		sub	sp, sp, #8
 753              	.LCFI17:
 754              		.cfi_def_cfa_offset 16
 755 0004 00AF     		add	r7, sp, #0
 756              	.LCFI18:
 757              		.cfi_def_cfa_register 7
 758 0006 7860     		str	r0, [r7, #4]
 224:../Sources/TFC/TFC_UART.c ****     return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
 759              		.loc 1 224 0
 760 0008 7B68     		ldr	r3, [r7, #4]
 761 000a 1B79     		ldrb	r3, [r3, #4]
 762 000c DBB2     		uxtb	r3, r3
 763 000e 1A1C     		mov	r2, r3
 764 0010 2023     		mov	r3, #32
 765 0012 1340     		and	r3, r2
 225:../Sources/TFC/TFC_UART.c **** }
 766              		.loc 1 225 0
 767 0014 181C     		mov	r0, r3
 768 0016 BD46     		mov	sp, r7
 769 0018 02B0     		add	sp, sp, #8
 770              		@ sp needed for prologue
 771 001a 80BD     		pop	{r7, pc}
 772              		.cfi_endproc
 773              	.LFE6:
 775              		.text
 776              	.Letext0:
 777              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 778              		.file 3 "C:/ELI/BUSINESS/CLIENT_DATA/FREESCALE/frdm-tfc__google-code/DEVELOPMENT_TRUNK/FRDM-TFC/Pr
 779              		.file 4 "C:/ELI/BUSINESS/CLIENT_DATA/FREESCALE/frdm-tfc__google-code/DEVELOPMENT_TRUNK/FRDM-TFC/Pr
 780              		.file 5 "C:/ELI/BUSINESS/CLIENT_DATA/FREESCALE/frdm-tfc__google-code/DEVELOPMENT_TRUNK/FRDM-TFC/Pr
 781              		.file 6 "C:/ELI/BUSINESS/CLIENT_DATA/FREESCALE/frdm-tfc__google-code/DEVELOPMENT_TRUNK/FRDM-TFC/Pr
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_UART.c
                            *COM*:0000000c SDA_SERIAL_OUTGOING_QUEUE
                            *COM*:0000000c SDA_SERIAL_INCOMING_QUEUE
                            *COM*:00000800 SDA_SERIAL_OUTGOING_QUEUE_Storage
                            *COM*:00000080 SDA_SERIAL_INCOMING_QUEUE_Storage
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:22     .text.TFC_InitUARTs:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:27     .text.TFC_InitUARTs:00000000 TFC_InitUARTs
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:297    .text.uart0_init:00000000 uart0_init
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:132    .text.TFC_InitUARTs:000000a4 $d
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:147    .text.TFC_UART_Process:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:152    .text.TFC_UART_Process:00000000 TFC_UART_Process
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:196    .text.TFC_UART_Process:00000034 $d
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:202    .text.UART0_IRQHandler:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:207    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:284    .text.UART0_IRQHandler:0000006c $d
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:292    .text.uart0_init:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:633    .text.uart0_init:00000214 $d
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:643    .text.uart_getchar:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:648    .text.uart_getchar:00000000 uart_getchar
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:689    .text.uart_putchar:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:694    .text.uart_putchar:00000000 uart_putchar
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:738    .text.uart_getchar_present:00000000 $t
C:\Users\ehughes\AppData\Local\Temp\ccQkJr3C.s:743    .text.uart_getchar_present:00000000 uart_getchar_present
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
InitByteQueue
enable_irq
BytesInQueue
ByteEnqueue
ByteDequeue
__aeabi_uidiv
